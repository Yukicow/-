






@Transactional이 붙은 메소드를 호출했는데, 다른 @Transactional이 붙은 메소드가 또 호출되면 어떻게 될까?

이럴 때 어떤 식으로 처리해야 할 지에 대한 것을 트랜잭션 전파 레벨을 통해 정해 놓았다.


일반적인 상식이라면, 트랜잭션 동기화 매니저에 담긴 Connection을 그냥 같이 공유해서 쓰니까 무조건 서로 하나의 트랜잭션 아닌가?

이런 생각이 들것이다.

정말 놀랍게도 맞다. 기본적인 전파 레벨에서는 우리가 생각하는 위의 방식으로 구현해 놓았다.

근데 기본적인 default레벨에서 그렇다는 것은 다른 경우도 있다는 것이다.


제대로 전파레벨이 어떻게 구현되어 있는 지 이해하면, 전파레벨에 대한 이해가 훨씬 잘 될 것이다.

그래서 어떻게 스프링에서 이런 트랜잭션 전파레벨을 구현하고 있는 지 내부적으로 알아 보도록 하자.



1. REQUIRED

먼저, 가장 먼저 얘기한 하나의 Connection을 사용함으로써 트랜잭션이 하나로 묶이는 전파레벨인 REQUIRED에 대해 알아 보자.

밑의 내용은 REQUIRED 전파 레벨로 설정된 경우 동작 과정이다. 


가장 처음에 @Transactional이 붙은 메소드가 수행될 때 똑같이 TransactionManager를 통해 트랜잭션을 시작한다.

평소처럼 DataSource를 통해서 커넥션을 생성하고(얻고) setAutoCommit을 false로 설정하고 트랜잭션 동기화 매니저에 보관한다. 

이렇게 트랜잭션 매니저를 통해 getTransaction() 메소드를 호출하면 TransactionStatus객체를 받을 수 있는데, 

이 객체에는 트랜잭션에 대한 여러 정보가 담겨있다.

그 중에는 isNewTransaction()이라는 메소드가 있는데, 이 트랜잭션이 가장 처음에 생성된 트랜잭션이 맞는 지에 대한 boolean값을 갖고 있다.


이제 다음 @Transactional이 붙은 메소드가 호출되었다고 해 보자.

이 메소드가 호출될 때에도 똑같이 프록시에 의해 트랜잭션 매니저의 getConnection()이 호출된다.

이 때 기존에 기존 트랜잭션이 존재하는 지 확인하는데, 

만약 존재할 경우 처음 @Transactional이 붙은 메소드가 호출될 때 처럼 

새로운 Connection을 만들고 동기화 매니저에 담는 과정을 하지 않는다.

그리고 똑같이 TransactionStatus객체를 반환한다.

이 때 반환된 TransactionStatus객체는 신규 트랜잭션이 아니기 때문에 isNewTransaction() 메소드의 반환 값이 false일 것이다.


모든 작업이 끝나고 두 번째로 호출된 메소드는 commit을 호출할 것이다.

# 각 메소드는 별개이기 때문에 각각의 로직에 commit로직이 포함되어 있기 때문

하지만 하나의 커넥션에서 commit은 한 번만 가능하다.

commit을 할 때에 TransactionStatus객체를 넘기는 이유가 여기서 나온다.

commit을 하기 전에 isNewTransaction()을 호출해서 신규 트랜잭션이 맞는 지 확인하고 아닐 경우 commit을 하지 않는다.

즉, 실제 commit이 가능한 것은 처음 트랜잭션을 시작한 메소드에서 일어나는 commit 뿐이라는 것이다.

그렇기 때문에 모든 트랜잭션이 하나의 트랜잭션으로 묶일 수 있는 것이다.

같은 커넥션을 사용해도 이후에 실행된 커넥션이 commit을 실행해 버리면 트랜잭션이 제대로 이루어지지 않을 수 있는데

이런 방식으로 모든 트랜잭션 메소드들이 다 수행된 뒤에 첫 트랜잭션이 commit과 rollback여부를 결정하도록 만들어서

하나의 트랜잭션으로 묶을 수 있게 했다.


근데 그러면 이후 메소드들 중에서 rollback이 일어나면 어떡할까?

트랜잭션이 하나로 묶였다면 내부에서 각각의 트랜잭션들 중에 하나라도 rollback이 일어나면 모두 rollback되어야 하기 때문이다.

그래서 이 문제를 해결하기 위해 스프링은 하나의 장치를 놓았다.

신규 트랜잭션이 최종적으로 commit을 하기 전에 다른 트랜잭션들 중에 rollback이 일어난 적이 있는 지 확인한다.


이것을 어떻게 구현해 놓았느냐

내부 트랜잭션들 중에 rollback이 발생하면 트랜잭션 매니저가 트랜잭션 동기화 매니저에 rollbackOnly값을 true로 설정한다.

그럼 마지막에 신규 트랜잭션이 commit요청을 할 때에 트랜잭션 매니저가 트랜잭션 동기화 매니저에 설정된 rollbackOnly값을 확인하는데,

이 때 그 값이 true라면 commit요청을 무시하고 rollback을 시킨 뒤 예외를 던진다.

이 때 예외는 UnexpectedRollbackException이다. 

# 나중에 UnexpectedRollbackException 예외가 터지면, '아.. 내부에서 롤백 하나 터졌네' 라고 생각하면 된다.


위가 트랜잭션 전파레벨 REQUIRED에 대한 내용이다.




2. REQUIRES_NEW

이 전파 레벨에서는 각 트랜잭션마다 각각 별도의 Connection을 갖는다.

따라서 서로의 트랜잭션 처리가 서로에게 영향을 미치지 않는다.

그냥 쉽게 생각하면 아예 서로 다른 요청이라고 봐도 된다.


REQUIRES_NEW를 사용하면, 위처럼 기존에 트랜잭션이 있는 지 확인하는 과정을 하지 않는다.

그냥 바로 새로운 커넥션을 동기화 매니저에 등록하고 사용한다.

즉, 위에서 REQUIRED를 설명할 때의 상황으로 따지면 두 개의 커넥션이 커넥션 동기화 매니저에 담긴 것이다.

@Transactional의 옵션으로 전파 레벨이 적용이 가능하기 때문에 

두 번째 호출된 메소드 내부에 똑 @Transactional을 사용하는 객체로부터 메소드를 호출하고

그 @Transactional의 옵션이 REQUIRED라면 그 트랜잭션은 또 두 번째로 등록된 커넥션을 공유해서 사용하는 레벨이 되는 것이다.

만약 두 번째 호출된 메소드의 내부의 @Transactional의 전파 레벨 옵션이 REQUIRES_NEW라면 connection이 3개가 되는 것이다.


REQUIRES_NEW를 사용하면 새로운 트랜잭션이 시작되기 때문에 REQUIRES_NEW 트랜잭션은 언제나 isNewTransaction()이 true이다.

그래서 commit이나 rollback이 자신의 트랜잭션 선에서 이루어진다는 것이다.

만약 첫 번째 트랜잭션이 commit을 하고 두 번째 트랜잭션이 rollback을 한다면 

두 번째 트랜잭션은 rollback처리가 완료되고 예외를 잘 처리해서 UnChecked예외로 던질 것이다.

첫 번째 트랜잭션은 잘 commit을 했으니 문제 없이 db에 반영이 될 것이다.

즉, 하나는 반영되고 하나는 반영이 되지 않은 것이다.

하나의 트랜잭션으로 묶이지 않았기 때문에, 이렇게 결과가 나타난다.


REQUIRES_NEW는 로직상의 동작에서는 순서를 가지고 동작하지만 결과론적으로는 서로 다른 요청을 수행한 결과처럼 나타난다는 것이다.

두 번째 트랜잭션이 시작되면, 첫 번째 트랜잭션은 잠시 보류상태가 되고 두 번째 트랜잭션이 commit하거나 rollback하고 나면 

다시 첫 번째 트랜잭션이 commit이나 rollback을 수행한다. 따라서 순서는 존재한다.

그래서 이게 단점이 크다. 

하나의 요청이 대해 물리적으로 두 개의 요청을 처리하고 있다는 말과 같다는 것이다.

심지어는 더 안 좋다. 두 개의 요청이면 하나 처리하고 하나 처리하니까 커넥션이 그때그때 반납되는데

얘는 두 번째 트랜잭션 처리하는 동안 첫 번째 커넥션을 잡고 있으니 문제가 많다.

그래서 트래픽이 많거나 성능이 중요한 곳에서는 사용할 때에 조심해서 사용해야 한다.





이 외에도 SUPPORT, NOT_SUPPORT, MANDATORY, NEVER, NESTED 등 여러 전파 옵션이 있디.

예를 들어 NESTED를 예시로 들면 REQUIRES_NEW랑 조금 비슷한데 

REQUIRES_NEW는 트랜잭션들 간에 아예 간섭을 안 하는데, 

얘는 외부 트랜잭션은 내부에 영향을 받지 않는데, 내부 트랜잭션은 외부에 영향을 받는 형태이다.

즉, 내부 트랜잭션에서 rollback이 발생해도 외부는 커밋이 가능한데,

외부에서 rollback이 일어나 버리면 내부도 함께 commit되는 것이다.


하여튼 위처럼 혹시나 필요한 옵션이 있을 수도 있는데 

실무에서 실질적으로 거의 사용하지 않는 녀석들이니 필요하면 그 때 찾아보도록 하자.