

전에 배운 것처럼 Converter를 사용하면 우리가 특정 객체를 만들었을 때 자유롭게 

사용자 인자로부터 객체를 자동 생성해서 받을 수 있다.

그 반대로 객체를 View에 담을 String으로도 만들 수 있을 것이다.


하지만 잘 생각해 보면 Web 환경에서는 이렇게 특정 객체를 인자로부터 추출해서 만들만큼

특별한 객체를 직접 생성하고 Converter를 등록할 일은 많지 않을 것이다.

그런 것 보다는 일반적인 케이스로 String을 다른 기본 객체로 그리고 다른 기본 객체를 String으로 많이 변환한다.

그렇기 때문에 거의 일반적으로 제공되는 Converter만 있어도 사용하는 데에 문제는 없는데,

우리가 원하는 것은 그러한 String의 출력이나 변환과정을 세세하게 나누고 싶다는 것이다.


예를 들어 "1,000"으로 입력된 값을 1000원으로 변환하거나,

1000원으로 입력되어 있는 값을 View에 출력할 때 1,000으로 바꾸고 싶다거나.

이런 케이스가 더 많을 것이다.

이런 것도 Converter를 통해 충분히 가능하다.

하지만 이런 경우를 위해서 spring은 Converter보다는 좀 더 포맷팅에 특화된 Formatter라는 것을 제공한다.

Converter의 대놓고 Formatter을 위한 버전이라고 보면된다.

( 이 때 주의할 점은 이 Formatter들은 HttpMessageConverter와는 무관하다는 점이다.

당연하게도 HttpMessageConverter는 jackson라이브러리 등을 통해 동작한다.

그럼 애초에 messageConverting과정에서의 formatting역할은 jackson라이브러리의 역할이다.

또, 데이터를 받아서 특정 형태로 변환하고 필드에 주입하는 개념이 아니고, 바로 객체를 생성하는 개념이기 때문에 

위의 Formatter들이 동작할 수 있는 개념은 아니다.

이런 경우 Formatting을 원하면 라이브러리에서 제공하는 Formatter를 이용해야 한다. 

아마 객체를 생성하고 나서 Formatting하는 형태로 만들었을 듯 하다. )



생성 방법도 Converter와 비슷하다. 

Spring에서 제공하는 Formatter 인터페이스를 구현하는 객체를 생성하고 parse()와 print() 메소드를 오버라이딩 하면 된다.

parse는 특정 형태의 String 데이터를 원하는 데이터 타입으로 변환해서 반환하는 로직으로 사용하면 되고,

print는 특정 데이터 타입을 원하는 String형태의 데이터로 바꾸어 반환하는데 사용하면 된다.


이러한 Formatter 또한 ConversionService에서 관리될 수 있도록 FormattingConversionService라는 것을 제공한다.

우리는 거기에 Formatter를 담아 놓기만 하면 데이터 타입에 따라 각 우리가 등록해 놓은 대로 변환될 것이다.

그리고 이러한 FormattingConversionService는 Formatter만 지원하는 게 아니고 Converter를 함께 지원하고

스프링 부트에 기본으로 등록되는 ConversionService 또한 이 녀석을 상속받은 객체이기 때문에 

그냥 위의 Converter를 등록하는 곳에 똑같이 addFormatter()를 통해 Formatter를 추가하기만 하면 사용할 수 있다.



근데 문제는 이것도 직접 구현해서 사용해야 하는 게 참 번거롭다.

그래서 spring은 아주 좋은 어노테이션 기반의 Formatter를 제공한다.

어노테이션을 사용하기만 하면 작성된 형식을 바탕으로 알아서 Formatting을 해 주는 녀석이라고 볼 수 있다.



종류는 여러 가지가 있는 듯 한데, 자세한 건 공식페이지를 참조하고 기본적인 두 가지만 알아 보자.

@NumberFormat과 @DataTimeFormat이다.

옵션으로 pattern="형식" 을 지정해 주면 데이터를 받거나 출력할 때 그 형식의 데이터를 알맞게 변환하여 받거나 출력한다.

사용 예시는 이렇다.

@NumberFormat(pattern = "###,###") @DateTimeFormat(pattern = "yyyy-MM-dd hh:mm:ss)

위와 같이 사용하면 된다.







