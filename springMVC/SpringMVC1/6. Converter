





우리가 스프링에서 @RequestParam, @ModelAttribute, @PathVariable 등등을 사용할 때

특정 데이터 타입으로 변환 시켜서 바로 받을 수 있던 걸 기억하는가?

그 이유는 ArgumentResolver가 중간에 동작하기 때문에 그런 것이다.

하지만 이 때 ArgumentResolver는 직접 동작하지 않는다. 각각의 역할에 맞는 객체들을 이용해서 인자를 생성한다.

이 때 특정 데이터 타입간의 변환을 담당하는 것은 Converter라는 객체이다.


Converter는 특정 데이터 타입을 특정 데이터 타입으로 변환시켜 주는 역할을 한다.

우리가 직접 특정 데이터 타입에 대한 변환 Converter를 만들어서 등록할 수도 있다.

이렇게 등록된 Converter들을 관리해서 각 경우에 맞는 Converter를 사용하도록 실질적으로 관리하는 객체는 ConversionService이다.

그리고 위의 어노테이션 등에서 Converter가 동작하는 이유는 위의 어노테이션들을 동작하게 하는 ArgumentResolver에서 

실제로 ConversionService를 사용하고 있기 때문이다.


HttpMessageConverter또한 body에 담겨져 오는 데이터를 특정 데이터 타입으로 바꾸거나 

특정 데이터를 다시 특정 형태의 String으로 바꾸기 위한 converter이다.

이 인터페이스를 구현한 녀석들 중 하나가 우리가 흔히 사용하는 jackson라이브러리의 구현체이다.

이렇게 ArgumentResolver에 의해 사용되는 Converter에는 body에 담겨오는 데이터를 변환하는 converter도 포함된다는 것이다.

즉, 우리가 컨트롤러에서 @RequestBody 를 통해 json을 읽어서 객체로 받거나, 

객체를 return해서 json으로 반환하는 것은 이러한 HttpMessageConverter가 동작하기 때문이고 

이것은 @RequestBody를 처리하는 ArgumentResolver에 의해 사용되는 Converter라는 것이다.



스프링 부트에서는 중간에 Parameter로 날라온 String 데이터들을 특정 데이터 타입으로 변환하기 위해서 

여러가지 기본적인 Converter들을 생성해서 등록해 놓는다.

그렇기 때문에 우리는 거의 원하는 형태의 모든 데이터 타입으로 인자들이 알아서 특정 타입으로 변환된 값을 받을 수 있었다.

또 반대로 Thymeleaf와 같은 템플릿 엔진에서도 이러한 ConversionService를 통해 등록된 Converter를 바탕으로

특정 객체를 String으로 변환해 View에서 출력되도록 하고 있다.



ArgumentResolver가 @ModelAttribute를 처리할 때 사용하는 WebDataBinder또한 이러한 컨버터를 사용한다.

당연하게도 특정 필드의 데이터 타입이 인자로 넘어온 String과 맞지 않을 경우 바꿔 주어야 하기 때문이다.

근데 그렇다면 문제점이 하나 있다는 것을 알 수 있다.

기본적으로 제공되는 Converter들만 가지고는 필드에 기본 Converter가 처리할 수 없는 데이터 타입이 있으면 변환에 무리가 있다는 것이다.

( MultipartFile 처럼 객체여도 기본적으로 Convert가 지원되는 경우는 ModelAttribute를 써도 필드에 객체값이 저장됨 

하지만 MultipartFile 객체는 조금 특별한게 multipart/form-data 요청이 오면 request객체가 생성해 갖고 있는 객체이기 때문에

따로 converting 과정 없이 request객체로부터 바로 얻을 수 있어서 그런 거지 복잡한 객체를 만들어 놓고 사용자가 보낸 String타입 인자로부터 

다른 데이터 타입으로 변환해서 그 복잡한 객체를 만들어내는 경우는 많지 않을 것이다. )


예시를 들면 조금 편할 것이다.

class MyClass{
    private String name;
    private Integer id;
    private IpPort ipPort;
}

위와 같은 클래스가 있고 @ModelAttribute를 통해 사용자로부터 넘어온 인자들을 토대로 알아서 MyClass가 생성되도록 했다고 가정하자.

이 때 WebDataBinder가 동작하면서 String 이나 Integer타입을 바인딩 할 때에는 

스프링에서 기본 제공하는 Converter를 이용해 String타입으로 넘어온 인자들을 잘 변환해서 name과, id라는 필드에 잘 값을 담았을 것이다.

근데 문제는 ipPort라는 필드의 데이터 타입인, 우리가 만든 객체이다.


IpPort는 내가 직접 만든 객체이기 때문에 기본적으로 제공되는 Converter들 중에 

String타입의 인자를 보고 IpPort로 변환 시킬 수 있는 Converter가 없다.

그래서 이런 경우에는 우리가 직접 Converter를 생성해서 등록해 주어야 하는 것이다.


생성 방법은 간단하다.

Spring에서 제공하는 Converter라는 인터페이스를 구현하는 객체를 하나 생성하고

그 객체에서 convert라는 메소드를 오버라이딩 하면 된다.

이 메소드는 제너릭을 토대로 반환 타입이 결정되기 때문에 특정 데이터 타입에 따라 원하는 타입의 데이터를 반환할 수 있다.


이렇게 객체를 만들었다면 등록만 해 주면 된다.

Config에 WebMvcConfigurer를 implement하고 addFormatter()메소드를 오버라이딩

거기에 registry.addConverter를 통해 우리가 생성한 객체를 넘기면 된다.

이 FormatterRegistry객체는 사실 Converter를 관리하는 객체가 구현하는 인터페이스이다.

Converter를 관리하는 객체는 ConverterRegistry와 ConversionService 인터페이스를 구현한다.

하나의 객체에서 두 개의 인터페이스로 각각의 역할을 나누어 놓은 것이다.

Converter를 등록할 때 그 역할만 하기 위한 인터페이스와 실제 convert를 수행하는 ConversionService 각각 두 개로 나눈 것이다.

FormatterRegistry는 ConverterRegistry를 상속받은 인터페이스이다.

FormatterRegistry가 있는 이유는 뒤에 나오는 Formatter도 함께 관리할 수 있는 관리 객체를 위해서 이렇게 만든 것이다.





