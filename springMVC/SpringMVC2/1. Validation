




검증이란, 유효성 검사라고도 할 수 있다.

값이 유효한 값인 지에 대한 것을 판단하는 것들이 이에 해당한다고 볼 수 있다.

이러한 검증 과정은 프론트엔드, 백엔드 모두 다뤄야 한다.

서버 단에서만 검증을 하면, 사용자와의 즉각적인 상호작용이 잘 되지 않을 수 있기 때문에

둘 모두 중요한 사항이다.


원래라면 이런 검증 과정에 대한 로직을 우리가 직접 하나하나 로직을 짜서 해야 한다.

예를 들어 숫자만 입력 받아야 하고, 0보다 크고 100보다 작아야 하는 값이 있다고 하면

사용자로부터 입력받은 인자를 서버단에서 받아서, if문을 사용한 로직을 작성하는 식으로

값에 대한 유효성 검사가 가능하다.

또 만약에 값이 유효하지 않을 때에 어떤 식으로 처리할 지에 대한 것도 하나하나 직접 생각하고 다뤄야 한다.

예를 들어 화면을 다시 보여 주면서 오류메시지를 띄운다든가, 단순히 오류 페이지를 보여준다든가 등등

위와 같은 작업은 하나하나 직접 하기에는 번거롭고 귀찮은 일이다.


오류메시지를 띄운다고 해 보자.

우리가 오류메시지를 띄우기 위해서는 if문을 사용한 로직에서 유효하지 않음이 밝혀질 경우 오류메시지를 담을 객체를 생성하고

그 객체에 오류메시지를 담고 Model에 추가해서 html에서 가져다 사용해야 할 것이다.

또, 그 객체가 여러개일 수 있으니 컬렉션스에 담아서 사용해야 할 것이다.

html단에서는 컬렉션스 안에서 값을 꺼내 있는 지 확인하고 있다면 그 오류와 관련 있는 곳에 잘 작성해야 한다.


이런 오류와 관련된 메커니즘을 직접 사용하자니 조금 불편하다.

그래서 Spring은 이런 검증 오류메시지와 관련된 메커니즘을 BindingResult라는 것을 통해 제공한다.

BindingResult는 검증이 필요한 객체 바로 뒤에 사용해야 한다.

즉, @ModelAttribute가 사용된 인자 다음에 함께 적어 주어야 한다는 것이다.


이 BindingResult를 사용하면, 여러 가지 에러를 안에 담아서 Html과 상호작용할 수 있도록  제공한다.

꼭 html 뿐만 아니라 검증과 관련된 로직 메커니즘에서 다양하게 사용할 수 있다.

또 좋은 점이, 타입오류 같은 경우는 ArgumentResolver에서 인자를 생성하는 과정에서 발생하는데

이는 Controller가 실행되기 이전에 발생하는 일이므로, 검증을 따로 할 수가 없다.

하지만 BindingResult를 ModelAttribute와 함께 사용하면, 오류 정보를 BindingResult에 담은 상태로 Controller 호출한다.

즉, 타입 매칭에 문제가 있어도 이를 BindingResult에 에러를 담고 정상흐름으로 반환한다는 것이다.

만약 @ModeAttribute(생략가능)과 BindingResult을 함께 사용하지 않는다면 바인딩 과정에서 문제가 발생했다는 걸

BindingResult객체로 알 수가 없으니 그냥 BindException을 때려버리고, Controller가 호출되지 않고 오류 처리된다.


에러의 종류에는 두 가지가 있다. 필드에러와 글로벌(Object Error) 에러이다.

FieldError는 검증의 대상이 특정 객체의 필드와 매핑되는 경우의 에러이고,

GlobalError는 필드 단위의 에러가 아닌 그 외의 에러들을 말한다.

예를 들면 전달된 인자가 필드에 주입될 때 숫자(Integer 등)가 입력되어야 하는데 문자가 입력되어 와서 주입이 안 된다거나 하는

특정 필드 단위로 발생하는 검증 에러가 FieldError이다.

그리고 예를 들어 입력 받은 값 중 price와 quantity가 있는데 두 값의 곱이 100을 넘으면 안 된다거나 하는

특정 필드에 의존적인 에러가 아닌, 추가적인 검증사항에 대한 것이 GlobalError가 될 수 있다.


BindingResult에는 이러한 FieldError와 GlobalError를 담을 수 있다.

addError()메소드를 사용하고 안에는 FieldError나 GlobalError 객체를 넣으면 된다.

하지만 문제는 FieldError나 GlobalError를 생성할 때 넘기는 인자가 너무 많아서 보기가 안 좋다는 것이다.

타겟이 되는 Object이름, 필드 이름, 바인딩 성공 여부, 출력할 에러 메시지의 식별값, 에러 메시지의 인자, 기본 메시지..

너무 많다.

다행히 우리는 이렇게 힘들게 addError를 사용하지 않아도 된다.

BindingResult는 기본적으로 ModelAttribute와 함께 사용되기 때문에 자신이 어떤 객체를 target으로 검증하는 지 알고있다.

따라서 우리는 Object이름, 바인딩 성공 여부 등등 몇 가지 빼도 되는 것들이 생겨난 것이다.

그렇게 FieldError나 GlobalError를 직접 생성하지 않고 BindingResult에 에러를 넣을 수 있는 방법이

reject와 rejectValue이다.


rejectValue는 필드 에러를 담는 메소드이고 reject는 글로벌 에러를 담는 메소드이다.

필요한 인자를 오버로딩된 메소드가 여러개라서 원하는 걸 선택해서 넣으면 되지만.

일반적인 케이스라면 field이름과 출력될 메시지를 식별할 errorCode 정도만 넣으면 된다.




