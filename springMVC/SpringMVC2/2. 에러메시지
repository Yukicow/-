






에러메시지도 메시지 국제화처럼 properties파일을 만들고 code를 생성해 두면 메시지를 가져다 사용하게 된다.

예를 들어 범위가 0~100까지인 필드에 대해 검증을 하기로 했고 거기서 에러 발생 시 range라는 에러 코드에 대한 메시지를 출력하게 하려면

range=범위 오류입니다.

이렇게 작성해 놓고 rejectValue를 사용할 때 errorCode를 작성하는 인자에 'range'를 작성하면 '범위 오류입니다'가 출력될 것이다.


에러코드도 국제화 메시지처럼 MessageSource에 의해 출력되기 때문에 properties파일을 만들어야 한다.

사실 국제화에 사용했던 messages.properties를 그대로 사용해도 된다. 

결국은 모두 MessageSource에 의해 참조되고 사용되는 파일이기 때문이다.

하지만 에러와 일반 메시지를 구분하기 위해 따로 만들어 주는 것이다.

만약 errors라는 properties파일을 만들었다면, MessageSource가 이것을 참조할 수 있게 application.properties파일에

spring.messages.basename=messages,errors 이렇게 설정해 주어야 한다.

messages라는 파일과 errors라는 파일이 둘다 참조될 수 있도록 하는 것이다.

(errors도 국제화를 하고 싶다면 '베이스네임_언어' 형태로 여러 파일을 만들면 된다.)



에러코드는 여러 가지를 작성해 놓을 수 있다.

보통 '원하는 식별 에러코드.Object명.필드명'으로 작성할 수 있다. 

사실 꼭 이렇게 해야 하는 건 아닌데, 이렇게 하면 좋은 이유가 있다.

우리가 rejectValue나, reject를 이용해서 에러를 생성할 때에 내부적으로 MessageCodeResolver라는 것을 사용하기 때문이다.

MessageCodeResolver는 FieldError나 GlobalError가 생성될 때 받은 인자들을 토대로 나중에 참고될 에러코드를 배열을 만들어 준다.

그럼 BindingResult에 담긴 에러 중에서 그 에러에 대한 메시지를 가져올 때 그 배열에 있는 값들 중 우선순위 별로 가져오게 된다.

우선순위는 자세한 것 순이다. 쉽게 말해서 '.'이 많이 사용된 순서이다.


예를 들어 rejectValue("price", "range") 라고 Item이라는 객체의 price라는 필드에 대한 필드에러를 추가하고 에러코드는 range라고 하면

MessageCodeResolver는 range.item.price, range.price, range.java.lang.Integer, range 이렇게 4가지의 에러코드를 만들어 준다.

이렇게 만들어진 에러코드가 담긴 배열을 필드에러를 new로 생성할 때 인자로 넘겨서 나중에 이 값들이 참조되도록 하는 것이다.

그럼 나중에 price에 대해 range에러가 발생했을 때 range.item.price, range.price, range.java.lang.Integer, range 순으로 참조된다.



다음은 검증이 시작되기도 전에 필드에 인자가 binding되지 않은 경우에 어떻게 되는 지 알아 보자.

전에도 말했지만, binding과정은 Controller 호출 이전에 ArgumentResolver에서 발생하기 때문에 우리가 직접 에러추가 처리를 할 수가 없다.

그래서 @ModelAttribute 뒤에 BindingResult가 있을 경우 자동으로 BindingResult에 에러를 추가하고 정상흐름으로 바꾼다고 했다.

근데 문제는 이때 에러에 등록되는 default 에러 메시지가 엄청 길고 못생겼다는 것이다.

하지만 자동으로 BindingResult에 등록해 주는 과정에 에러코드도 함께 추가되기 때문에 

우리가 그 에러코드에 맞게 에러 메시지를 넣으면 default메시지는 무시되고 우리가 작성한 메시지로 출력되게 할 수 있다.


에러코드는 typeMismatch이다. 

즉, 위의 Item을 경우로 예시를 들며

typeMismatch.item.price, typeMismatch.price, typeMismatch.java.lang.Integer, typeMismatch에 메시지를 등록할 수 있다.

4가지 다 해도 되고, 타입 불일치에 대한 내용은 typeMismatch로 통일하겠다고 하면 

'typeMismatch=유효하지 않은 값입니다.' 이런 식으로 사용할 수가 있다.

그럼 기본으로 제공해 주는 못생긴 문자대신 '유효하지 않은 값입니다.'라는 메시지가 출력되도록 할 수 있다.









