





검증을 하는 과정을 모두 Controller 내부에서 로직으로 처리한다면 Controller가 너무 복잡해질 것이다.

그래서 Validator를 따로 만들고 그 Validator를 Controller 내부에서 사용하여 검증 과정을 거칠 수 있다.

사실 검증 로직을 따로 클래스로 분리하고 가져다 쓰는 개념이라 어렵지 않기 때문에 그냥 우리만의 Validator를 만들어 사용해도 되지만

이왕 Spring에서 제공하는 인터페이스가 있으니 그걸 사용하는 게 좋다. 그 이유는 뒤에 설명하겠다.



Validator라는 인터페이스를 구현하면 되는데 그럼 두 가지 메소드를 구현해야 한다.

support와 validate이다.

support는 검증기가 검증하려는 대상인 지, 즉 검증을 지원하는 지에 대한 것을 true false로 반환하는 메소드이다.

Controller에서 검증하기 전에 검증 가능 여부를 확인할 때나,

Validator를 관리하는 또 다른 객체가 있다면 Validator의 사용여부를 검사할 때 필요한 메소드일 것이다.


validate는 말그대로 검증하는 로직이 담긴 메소드이다.

검증 대상이 되는 객체와 BindingResult 객체를 넘겨 주면 검증 로직을 거쳐서 유효하지 않을 시 에러를 추가하는 로직이다.


이제 우리는 이 Validator를 직접 인스턴스로 생성해 사용하거나, 빈으로 등록해서 사용할 수 있다.

그냥 인스턴스로 생성해서 바로 사용해도 되지만, 이렇게 하면 문제점이 있다.

Controller내부 로직에 Validator가 필요한 부분에는 공통되는 로직이 계속해서 들어간다는 점이다.

뭐 크게 문제되는 건 아니지만, 가독성도 떨어지고 조금 노동이 필요해 진다.


그래서 아까 말한 Spring에서 제공하는 Validator를 사용하라고 한 이유가 여기서 나온다.

위에서 Validator를 관리하는 녀석이 있다면, 필요할 만한 메소드가 있다고 했다. 바로 support이다.

예상대로 Spring이 제공하는 Validator를 구현하면 이것을 관리 객체에 등록해서 사용할 수 있다.

바로 WebDataBinder이다. 

이 객체는 Validator를 관리하는 객체라기 보다는 사용하는 객체이다.

이 객체는 사용자 입력 인자를 객체의 필드에 바인딩 하고 검증하는 과정을 담당하는 객체인 듯 하다.

아마 ArgumentResolver가 사용하는 객체가 아닐까 한다.


우리는 이 WebDataBinder에 Validator를 등록할 수 있다.

그럼 데이터를 바인딩하고 검증하는 과정에서 Validator를 이용해 유효성을 체크할 것이다.

등록 방법은 간단하다.

@InitBinder 어노테이션을 사용하면 된다.

public void 형태의 메소드여야 하고 WebDataBinder를 인자로 받아서 그 인자로 받은 WebDataBinder객체의

addValidator()메소드를 통해 그 컨트롤러의 핸들러 메소드에서 필요한 Validator를 넣어 주는 로직을 작성하면 된다.

# ( addValidator()는 WebDataBinder가 상속받는 DataBinder에 있는 메소드이다. )


WebDataBinder는 새 요청마다 새로 생겨난다. 정확히는 컨트롤러가 호출될 때마다 새로 생긴다고 생각하면 된다.

컨트롤러가 호출 되기 전에 ArgumentResolver가 인자 생성 과정에서 WebDataBinder를 만들어 사용한다.

ArgumentResolver는 WebDataBinderFactory를 통해 WebDataBinder를 생성해서 사용한다.

이 때 WebDataBinder 종류 중에 InitBinderDataBinderFactory라는 것이 있는데

이 클래스의 메소드에는 initBinder라는 메소드가 있고, 이는 WebDataBinder를 인자로 받아서

@InitBinder가 붙은 메소드를 호출해 초기화하는 작업을 한다.

ArgumentResolver 내부를 다 뜯어 보지는 않아서 정확한 지는 모르겠지만 ArgumentResolver 내부적으로 이 과정을 거치는 듯 하다.


# ( 내가 찾아 본 건 ModelAttribute를 처리하는 ArgumentResolver 뿐이지만,

# 다른 @RequestBody나 @ResponseBody를 처리하는 ArgumentResolver도 WebDataBinder를 사용한다. )


위와 같은 과정을 통해 @InitBinder를 사용하면 Validator가 등록되는 것 같다.

그럼 이제 WebDataBinder가 객체를 binding하는 과정에서 Validator를 사용할 수 있다.

하지만 문제는 Validator는 등록이 되었는데, 이 검증기를 언제 사용하면 좋을 지 어떻게 알려야 할까.

@ModelAttribute가 붙은 모든 객체를 생성할 때마다 검증기를 다 돌리는 건 너무 비효율적이다.

어쩌면 검증이 필요하지 않은 객체를 인자로 필요로 할 수도 있는데 일단 검증기를 필요로 하는 지 다 돌려 본다니 너무 비효율적이다.

그래서 기본적으로 ArgumentResolver는 @ModelAttribute를 처리할 때 모든 객체에 검증을 하지 않는다.

그럼 어떤 인자에 검증을 시도할까?

바로 @Validated 또는 @Valid 어노테이션 붙은 인자에만 검증을 한다.

# @Validated와 @Valid의 차이점은 심화내용 참조





그럼 우리는 @ModelAttribute 앞에 @Valid 또는 @Validated를 붙여 주기만 하면 이제 검증 과정을 거치는 것이다.

이 때 검증을 거치기 위해 우리가 인자로 필요로 하는 객체가 검증기가 처리할 수 있는 객체인 지 supprot() 메소드로 확인하고

만약에 메소드가 true를 반환하면 검증 로직을 담당하는 validate()메소드가 호출되어 검증과정을 거치고

문제가 있다면 BindingResult에 에러가 저장된 뒤 핸들러 메소드에 넘어가는 것이다.



@InitBinder 대신에 WebDataBinder가 생성될 때 마다 Validator가 적용되도록 할 수도 있는데,

WebMvcConfiguerer를 구현한 Config파일에 getValidator라는 것을 오버라이딩 하면 된다.

그리고 원하는 Validator를 return 해 주면 그 Validator는 모든 WebDataBinder에 적용된다.




크게 어려운 내용은 없다. 그저, Controller에서 부담하는 일을 다른 클래스로 뺀 것이 전부이고

그 클래스를 사용하는 WebDataBinder가 이용할 수 있게 등록한 것 뿐이다.

다음에는 Bean Validation이라는 것을 배울 것이다.

지금까지 힘들게 검증 과정을 거쳐야했던 것을 쉽게 사용하는 방법이다.

