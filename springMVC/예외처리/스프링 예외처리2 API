




전에 내용처럼 하면 사용자에게 보여질 에러페이지는 쉽게 사용할 수가 있는데, 문제가 하나 있다.

바로 API에 대한 에러이다.


우리는 컨트롤러를 통해 꼭 뷰페이지만을 보내는 것이 아니고 특정 데이터를 보내기도 한다.

하지만 이런 API 요청에 대한 에러 처리를 View로 한다면 그건 참 문제가 있다.

그럼 어떻게 해야 할까?


기본적으로 BasicErrorController도 @RequestMapping의 옵션인 produces를 사용하여 같을 url요청에 대해

produces = MediaType.TEXT_HTML_VALUE 일 때와 나머지일 때에 대한 핸들러 메소드를 만들어 놓고 

요청의 accept의 형태에 따라 결과를 View나 json을 반환하도록 구현되어 있어서

요청 accept가 application/json 형태인 경우는 view가 아닌 json방식으로 에러 데이터를 보내주기는 한다.

하지만 이런 방식은 기본적으로 재요청 과정을 거치고, 원하는 에러마다 커스터마이징 하는게 여간 불편한 게 아니다.



전 내용에서 '예외를 처리하기 위해 등록된 ExceptionResolver가 있는 지 확인' 라는 내용을 기억하는가?

프론트 컨트롤러에 예외가 던져졌을 때 한 번 해결을 하고 갈 지에 대한 처리 장치라고 생각하면 편하다. 

이 녀석을 이용하면 API에 대한 처리가 가능하다.

HandlerExceptionResolver를 implements해서 우리만의 ExceptionResolver를 만들고 

resolveException 메소드를 구현해서 예외에 따라 어떻게 처리할 지를 작성하면 된다.


ExceptionResolver의 동작 방식은 각각의 우선순위에 따라 하나씩 호출되며,

null을 반환하면 다음 우선순위의 ExceptionResolver가 동작하는 형태이다.

하나의 Resolver 안에서 여러개의 예외처리를 해도 되고, 클래스를 생성하고 각각이 예외를 처리하도록 해도 된다.

우리가 생성한 ExceptionResolver는 Config를 통해 등록할 수 있다.

WebMvcConfigurer를 구현한 Configuration 클래스에 extendHandlerExceptionResolver를 오버라이딩하거나

configureHandlerExceptionResolver를 오버라이딩 하면 된다.

extendHandlerExceptionResolver는 스프링이 기본으로 제공하는 ExceptionResolver에 +로 더 추가하는 것이고

configureHandlerExceptionResolver는 스프링이 기본으로 제공하는 ExceptionResolver는 모두 없애고 우리가 등록하는 것만 생성되게 한다.


ExceptionResolver의 resolveException() 메소드의 반환타입은 ModelAndView인데, 반환값에 따라 동작이 달라진다.

일단 ModelAndView가 반환될 경우 기본적으로 요청이 정상처리된 것으로 간주된다.

즉, 다시 WAS가 재요청을 통해 View를 내보내는 것이 아니라 바로 결과를 내보낸다.

물론, sendError가 호출된 적이 한 번이라도 있다면 재요청된다. (그게 Controller에서 사용됐든, Resolver에서 사용됐든)

그럼 어떤 결과를 내보낼까?

ModelAndView의 인자로 String데이터를 넣으면 컨트롤러에서 ModelAndView에 ViewName을 넣은 것처럼

그 값을 바탕으로 View페이지를 바로 렌더링 해서 내보내고, 아무 값도 넣지 않고 ModelAndView()만 보내면

그냥 아무 View페이지 없이 body에 아무값도 담지 않고 응답이 처리된다.

이럴 경우에 로직에서 http body부에 우리가 직접 특정 에러에 대한 메시지나 원하는 내용을 

writer를 통해서 넣어 놓고 반환한 적이 있다면 그 값이 body에 담겨 그대로 데이터로 넘어갈 것이다.

그래서 API 요청의 경우에는 미리 에러에 대한 내용을 담을 객체를 만들고 그 객체에 에러나 원하는 내용을 담아서

Mapper객체를 통해 json이나 원하는 데이터 형태로 변환, 그 후 바디에 넣어 내보낸다.



장점이 있기는 하지만 위를 봐서 알겠지만 문제가 있다.

이렇게 직접 만들게 되면 각 컨트롤러에서 발생하는 예외를 처리하는 방식이 통일된다는 것이다.

쉽게 생각해서 서로 다른 컨트롤러에서 같은 예외가 발생하면 같은 예외처리 방식으로 동작한다는 것이다.

우리는 요청에 따라서 같은 예외더라도 다르게 처리하고 싶을 때가 있을 것이다.

그럴 때를 위해 통일되지 않게 하려면 url에 따라, 또는 accept의 형태에 따라 if문을 마구마구 사용해서 경우의 수마다

로직을 여러개 나누어야 하는데, 이게 상당히 복잡하고 번거롭고 귀찮다.



스프링 부트는 이런 귀찮은 과정을 줄여주기 위해서 기본적인 ExceptionResolver들을 제공한다.

세 가지가 있는데, 첫 번째와 두 번째는 결과적으로 위의 불편함을 제거해 주지는 않고 그냥

기본적으로 제공되는 처리 resolver라고 생각하면 된다.


먼저, 첫 번째는 ResponseStatusExceptionResolver이다.

이 녀석은 사실상 크게 도움이 안 된다. 쉽게 생각하면 커스터마이징과정을 돕는 것과 비슷한 효과를 낸다.

이 녀석은 어노테이션을 보고 동작하는데, 예외 클래스 위에 @ResponseStatus() 를 작성하고

거기에 code(상태코드), reason(에러코드) 값을 넣어 주면 그 값을 토대로 sendError처리를 해 주는 resolver이다.

# 에러코드는 MessageSource를 이용해 properties파일에 있는 코드와 매핑되는 문자를 가져다 사용하기 위함이다.

예외 클래스 위에 @ResponseStatus를 달아야 동작하기 때문에 사실상 우리가 직접 만든 예외 클래스에 대한 커스터마이징 기능이라고 볼 수 있다.

위에서도 말했지만 Controller가 됐든 Resolver가 됐든 sendError를 호출하면 WAS는 그 에러코드나 예외를 보고 재요청을 한다고 했다.

즉, 이 녀석은 어노테이션에 작성된 code값에 따라 그냥 재요청을 해 주는 녀석이라고 보면 된다.

동작과정만 따지고 보면 작성된 상태코드나 예외에 따라 예외 페이지로 재요청되니 

그냥 예외에 따라 재요청될 페이지를 지정시키는 용도정도의 수준인 듯 하다.

대신 그 예외가 우리가 직접 생성한 예외들이고 그럴 경우 더 편하게 작성할 수 있다는 정도?


그럼 우리가 만든거 말고 원래 있는 예외는 어떡하죠?

사실 그럴 때에도 방법이 있는데, 예외를 던지게 만들면 된다.

throw new ResponseStatusException() 을 던지게 되면 인자로 넘긴 값들을 토대로 예외처리를 처리하게 한다.

예를 들어 throw new ResponseStatusException(HttpStatus.NOT_FOUND, "error-message", new IllegalArgumentException()) 

위와 같이 작성하면, ResponseStatusException라는 예외를 컨트롤러 단에서 발생시킨 게 되고

이 예외는 던져지면서 결국 프론트 컨트롤러에게 전달되어 Resolver들이 처리 가능한 지 돌려보게 되며

ResponseStatusExceptionResolver에서 처리되는데, 이 때 넘겨 받은 인자를 토대로 sendError를 발생시킨다.

즉, IllegalArgumentException에 대해서 404에러를 처리하도록 만든 것이다.

이정도면 많이 편해지고 좋은 기능인 것 같기는 한데, 나중에 어차피 개쩌는 놈 나와서 안 쓸 것 같다.



두 번째는 DefaultHandlerException이다.

이 녀석은 모든 예외가 재요청되어 500으로 처리되는 것을 

자기가 기본적으로 모든 에러들에 대해 적절하게 defualt http상태코드를 정해놓고 

앞에 resolver들이 처리하지 못한 경우 defualt http상태코드로 sendError처리하도록 만들어 놓은 resolver라고 볼 수 있다.

sendError를 통해 재요청하게는 하는데, 이게 모두 500으로 처리되는 것은 좀 적절하지 않아 보이고,

각 예외마다 뭔가 이런 코드로 많이 처리하는 것 같더라 싶은 것들로 default 예외코드를 설정해서 재요청 시킨다고 보면 된다.


즉, 첫 번째 녀석은 우리가 직접 예외에 대해 상태코드를 지정해서 넘기는 걸 도와 주는 녀석,

두 번째는 우리가 지정하지 않은 예외들이 있다면 기본적으로 처리될 코드를 스프링의 판단 하에 미리 처리해 놓은 녀석이라고 보면 된다.

하지만 위 두 개는 결과적으로 첫 번째는 잘 안 쓸 것 같고, 두 번째는 디폴트라 웬만하면 건드릴 일이 없다.



하지만 대망의 세 번째 친구가 있다.

이 친구는 우선순위도 가장 높고 아주 편리하며, 좋은 기능을 많이 제공한다.

바로 ExceptionHandlerExceptionResolver이다.

이 친구는 @ExceptionHandler 라는 어노테이션을 처리하기 위한 resolver이다.


@ExceptionHandler는 위의 단순 ExceptionResolver로 처리하기에는 귀찮고 복잡한 일을 

아주 편하게 처리할 수 있도록 여러 가지 기능들을 제공한다.

마치 컨트롤러와 비슷한 메커니즘으로 동작하기 때문에 사용도 간편하다.


이 Resolver는 핸들러 메소드에 @ExceptionHandler가 있는지 확인하고 있다면 사용된 메소드를 읽어들여 처리를 도와 준다.

이 Resolver는 sendError없이 모두 정상처리로 처리한다.

애초에 그렇게 되도록 설계가 되어 있다. 

마치 컨트롤러처럼 메소드의 반환되는 값에 따라 그 값에 맞는 처리를 통해 ModelAndView를 반환하는 것이다.

그래서 우리가 작성한 로직이 Resolving과정이고 return값이 응답 결과가 된다.

만약 Resolving로직에 sendError가 있다면 WAS로 sendError처리가 넘어갈 것이고 아니면 return값을 확인할 것이다.


@ExceptionHandler의 사용법은 컨트롤러와 거의 비슷하다.

먼저, @ExceptionHandler() 의 괄호 안에 class 클래스를 입력하면 

현재 컨트롤러 내부에서 그 클래스의 예외가 발생하면 해당 @ExceptionHandler가 붙은 메소드가 그 클래스에 대한 처리를 맡는다.

해당 예외 클래스 뿐만 아니라, 그 클래스의 자식까지 예외 클래스 까지도 처리한다.

@ExceptionHandler()의 ()안에 값을 넣지 않고 메소드의 인자로 특정 예외 클래스를 넣으면

그 클래스가 ()안에 .class 형식으로 들어간 것과 똑같이 동작한다.

# 참고로 Exception을 처리하는 우선순위는 더 디테일한 에러에 대한 @ExceptionHandler가 먼저 처리된다.

# 즉, 자식 클래스가 우선순위를 갖는다는 것이다.



return 값으로는 컨트롤러처럼 String, 객체, ModelAndView, ResponseEntity를 반환할 수 있다.

String을 반환하면 거기에 해당하는 View를 반환하고, ModelAndView도 마찬가지, 객체의 경우 json으로 변환하여 body에 담아 응답한다.

거의 컨트롤러랑 똑같다고 볼 수 있다.

예외 처리에 대한 것을 우리에게 익숙한 컨트롤러처럼 처리한다고 보면 된다.

위에서는 우리가 직접 Resolver를 만들고 그 resolve 내부 로직에서 경우의 수에 따라 분리하고

body에는 직접 객체를 Mapper객체를 통해 변환해서 넣어 주는 아주 귀찮은 짓을 해야했지만 

이제는 @ExceptionHandler 하나면 컨트롤러처럼 예외에 따라 원하는 처리 로직을 쉽게 작성하고

body에 담기는 것도 객체를 return 할 경우 자동으로 변환해서 담아주니 아주 개꿀이다.




그럼 http 상태 코드는 무조건 200대 인가요?

그건 아니다. 기본적으로는 정상 응답이기 때문에 defualt는 200이겠지만 원하는 상태코드를 지정할 수도 있다.

바로 메소드 위에 @ResponseStatus() 어노테이션을 붙여 주면 된다.

사실 이것도 컨트롤러에서 사용하던 어노테이션을 그대로 붙인 것과 같다.

즉, 그냥 컨트롤러랑 똑같은 메커니즘이다 이말씀이다.




딱 보면 알겠지만 API 예외처리에 특화되어 있기 때문에 

API요청에 대한 예외처리를 할 때에 아주 많이 사용되며, 

사용자 View에 대한 예외처리는 전의 BasicErrorController를 이용하는 게 좋다.