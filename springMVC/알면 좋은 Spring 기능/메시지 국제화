







메시지 국제화란 html파일에 들어가는 문자들을 특정 설정 파일에 미리 적어놓고 가져다 쓰도록 하는 것이다.

이렇게 국제화를 하면 좋은 점이 각 국가마다 그 국가에 맞는 글자를 붙여넣어서 페이지를 렌더링 할 수 있고

또는 특정 문자가 바뀔 때 html파일을 하나하나 고치지 않고 하나를 바꾸면 나머지가 바뀌게 할 수도 있다.


Spring은 이러한 메시지 국제화에 대한 것을 구현해 놓았는데, 우리는 그에 맞춰 사용하기만 하면 된다.

Spring에서 국제화를 사용하기 위해서 resource 디렉토리에 messages라는 properties파일을 만들어 두면 된다.

그리고 '단어=문자' 형식으로 '단어'에는 나중에 html에 삽입하기 위한 식별자를 '문자'에는 삽입될 문자를 넣어 주면 된다.

그리고 application.propertes 파일에 spring.messages.basename=messages 이렇게 넣어 주면 된다.

messages를 다른 값으로 바꾸어도 된다. 우리가 만든 propertes파일의 이름에 맞추기만 하면 상관 없다.


( 이 값은 생략할 수가 있다. 스프링부트에서 기본으로 등록하기 때문이다.

부트가 아니고 그냥 Spring을 사용한다면 MessageSource bean을 등록하고 위 값을 직접 setter로 설정해 주어야 한다. )


예를 들어 

form.item.name=상품 이름  

위처럼 작성했다면 나중에 html태그에 국제화 문법을 사용해서 form.item.name를 넣으면 '상품 이름'이 치환되어 들어간다.


messages.properties파일은 기본 default파일로서 요청이 왔을 때 기본적으로 사용되는 파일이다.

만약 위에서 말한 대로 영어,한국어,일본어 등 여러가지 언어에 대한 messages.properties파일을 만들고 싶다면

messages_ko, messages_en, messages_jp 이런 식으로 basename으로 지정한 값에 '_언어' 형식으로 작성하면 된다.

이 형식을 지켜야 MessageSource가 찾아서 사용이 가능하다.

이렇게 해 두면 MessageSource는 Accept-Language값을 확인하고 그에 맞는 언어 propertes파일을 찾아서

그 파일의 국제화 메시지를 찾아서 사용한다.


하지만 위처럼 Accept-Language값을 보고 결정하도록 하는 방식은 썩 좋지 않을 수도 있다.

일반적으로 이는 브라우저에 의해서 로컬 정보에 따라 보내지는 것인데, 사용자가 따로 설정해서 바꾸지 않으면 거의 유지된다.

우리는 한국에 사는 사용자라도 원하면 영어로 볼 수 있게 하는 등의 기능으로 만들고 싶은 경우가 더 많을 것이다.

이렇게 고객이 원하는 언어로 선택되도록 하기 위한 방법도 Spring은 제공해 준다.

바로 LocaleResolver를 이용하는 것이다.

LocaleResolver는 선택되는 언어를 결정하는 것을 도와 주는 인터페이스이다.

구현체의 종류에는 여러 가지가 있고, 아마 Accept-Language를 통해 결정하는 것도 구현체의 종류 중 하나가 아닐까 한다.

이러한 LocaleResolver는 인터넷에 검색해서 필요한 걸 찾아 쓰도록 하자.

cookie를 이용하는 방식의 resolver가 좋아 보인다.



참고로 타임리프도 스프링이 제공하는 국제화와 호완이 되는데, '#{}'을 사용해서 국제화 메시지를 출력할 수 있도록 만들어졌다.

타임리프 내부에 '#{}'를 사용하고 안에 메시지 구분자를 넣으면 문자로 치환되어 출력된다.

예를 들어 th:text=#{item.name}

이런 식으로 사용할 수 있다.