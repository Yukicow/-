





@Valid과 @Validated는 동작 방식에 차이가 있다.

@Valid의 경우는 ArgumentResolver에서 WebDataBinder가 등록된 Validator를 이용해서 검증과정을 거친다.

# 꼭 WebDataBinder에서만 사용하는 게 아닐 수도 있음. 내가 알아본 것들은 WebDataBinder를 사용하는 Resolver들이었음.

Validator 인터페이스는 이름 때문에 단일이라고 오해할 수도 있는데, validatorFactroy들도 Validator인터페이스를 구현하고 있다.

즉, 여러 Validator를 필드로 등록해 놓고 Validator의 기능만 구현할 수도 있다는 것이다.


하여튼 @Valid는 Adapter에 의해 핸들러가 호출되기 전, 

ArgumentResolver에 의해 인자를 생성하는 과정에서 검증 과정이 함께 일어난다는 것이다. 

그렇기 때문에 @Valid는 Controller에서만 사용이 가능한 어노테이션이다.


하지만 @Validated는 Spring의 AOP기술로 구현되어 있다.

스프링 부트에서는 gradle에 validation관련 라이브러리를 추가하면 MethodValidationPostProcessor라는 것이 자동으로 등록되는데

이 클래스는 등록된 빈을 커스터마이징 하기 위한 클래스이다.

스프링에서는 등록되는 빈을 커스터마이징(예를 들어 proxy로 감싸는 것 등)을 할 수 있도록 제공하는 클래스들이 있는데,

그 클래스들을 상속받으면 스프링 컨테이너에서 자동으로 그 클래스들에 접근해서 빈들을 커스터마이징 할 수 있게 도와 준다.

생성되는 빈 순서대로 모든 빈에대해 적용하며, 커스터마이징 순서는 커스터마이징 클래스의 우선순위에 따라 결정된다.

우선순위는 PriorityOrdered 인터페이스가 결정하는 듯 한데, 이건 나중에 알아 보자.


그래서 자동으로 등록되는 MethodValidationPostProcessor는 @Validated가 클래스나에 붙어 있는 클래스를

createMethodValidationAdvice() 메소드를 통해 AOP기술이 적용된 MethodValidationInterceptor로 만들고

컨테이너에 다시 돌려주는 작업을 거치는 듯 하다.

즉, @Validated가 붙은 클래스는 모두 위의 AOP기술이 접목된 프록시로 감싸진다는 것이다.


그 말은 ArgumentResolver의 WebDataBinder에 의해 검증이 수행이 되는 개념이 아니기 때문에 꼭 Controller가 아니더라도

스프링 컨테이너에 담겨 있는 빈이라면 모두 이 Validated 기능의 수혜를 맛볼 수 있다는 것이다.


@Valid는 ArgumentResolver를 거쳐 WebDataBinder가 바인딩을 하고 검증하는 과정에서 참조되는 어노테이션이다.

즉, ArgumentResolver가 사용되는 오로지 Controller의 호출 과정에서만 검증이 가능하다.

하지만 @Validated는 검증하는 과정에 사용되는 검증 기술만 쏙 빼서 AOP로 적용하는 개념이라고 생각하면 된다.

그래서 기술만 적용하는 것이기 때문에 검증이 필요한 어느곳이든 모두 적용 가능하다.


말만 들어서는 그게 어떻게 가능하지? 싶기 때문에 

간단하게 이 MethodValidationInterceptor가 내부적으로 어떻게 동작하는 지 알아 보자.



MethodValidationInterceptor는 invoke()메소드를 통해서 실제 method를 호출하기 전에 앞 뒤로 로직을 수행하고 결과값을 반환한다.

먼저, BeanFactory일 경우에는 바로 메소드를 호출해서 결과값을 반환한다.

# 이 부분은 이유를 잘 모르겠다. 나중에 BeanFactory를 배워봐야 알 듯.


그리고 BeanFactory가 아닐 경우에는 검증 대상이 되는 그룹을 정한다.

한 마디로 @Validated처럼 특정 검증 대상을 지정하는 것이다. 이 부분을 따로 분리해서 복잡하게 만들어 놨는데, 

@Validated 말고 다른 어노테이션을 커스터마이징 해서 사용할 수 있게 만들기 위함인 듯하다. 하여튼 default는 Validated이다.

# 이게 아마 ExcutablesValidator가 특정 클래스의 필드 위에 @Max,@NotNull 이렇게만 쓰이는 게 아니고 메소드 단위에도 쓰이나 봄

# 꼭 이렇게 MethodValidationInterceptor의 AOP적용일 때 뿐만 아니고, 단일로도 쓰이는 경우가 많은가 봄

# 그래서 막 메소드 단위에 @Min,@Size 이런 게 붙어서 return값에 대한 검증이나, 생성자 단위에도 붙을 수 있음

# 근데 이건 @Valid얘기임 @Validated는 클래스,메소드,인자에만 붙음


그 다음에는 Validator의 forExecutables()를 호출해서 ExecutablesValidator를 받는다.

이 객체는 인자와 리턴값에 대해서 검증을 수행하는 메소드들을 갖는 인터페이스다.

ExecutablesValidator의 validateParameters()를 호출해서 호출한 메소드의 인자들 중 @Validated가 붙은 인자의 검증을 수행한다.

return 값은 Set<ConstraintViolation<Object>>인데, 

여기에 값이 비어 있으면 무사히 통과된 것이고 값이 들어 있으면 검증에 문제가 발생한 것이다.

만약 Set<ConstraintViolation<Object>>이 비어있지 않을 경우 ConstraintViolationException 예외를 터트린다.


비어 있는 경우 실제로 호출 대상인 메소드를 호출한다.

호출하고 메소드 호출로부터 얻은 결과를 변수에 저장해 놓는다.

이 때 이 결과를 이용해서 이번에는 validateReturnValue()를 호출한다.

결과값의 검증을 하는 역할을 한다. 왜 필요한 지는 모르겠다..

하여튼 이 결과값은 위에서 Set<ConstraintViolation<Object>>를 저장했던 변수에 다시 초기화 하는데,

이번에도 그 변수가 비어 있다면 결과값을 그대로 출력하고 비어 있지 않으면 ConstraintViolationException 예외를 던진다.


@Validated와 @Valid의 차이점은 여기서도 나타난다. 

@Valid는 MethodArgumentNotValidException 예외를 던지지만

@Validated는 ConstraintViolationException 예외를 던진다는 것이다.

예외처리를 할 때에 도움이 될 수 있으니 알아 두자.






