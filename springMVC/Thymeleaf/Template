








Thymeleaf에도 Template기능이 존재한다.

사용법 자체는 크게 어렵지 않은데, 뭔가 간결하지는 않아서 ㅈ같다.

사용법에 대해 알아 보도록 하자.


먼저, 템플릿 조각에 대해 알아 보자.

이러한 템플릿 조각을 만드는 법은 간단하다.

특정 태그에 th:fragment="조각 이름" 을 달아 두면 다른 곳에서 이 조각을 가져다 쓸 수 있다.

이 때 단순히 태그로만 만드는 게 아니고 특정 parameter를 받아서 그 값이 나중에 치환되도록 만들 수도 있다.

예를 들어

<footer th:fragment="test (param1, param2)">
    <p th:text=${param1}></p>
    <p th:text=${param2}></p>
</footer>

이렇게 조각을 만들어 두면 가져다 쓰는 쪽에서 이 조각을 사용할 때 인자를 넣게되고,

그럼 그 인자값들이 ${}안에 치환되어 들어간다.


그럼 어떻게 가져다 쓰는 것일까?

템플릿 조각을 사용하는 방법은 두 가지가 있다.

insert, replace이다.

insert는 태그 안에 템플릿 조각이 들어가는 형태이고 replace는 태그를 말그대로 바꿔지기 하는 것이다.

먼저, 사용 형식은 th:insert, th:replace=~{템플릿 조각 경로 :: 템플릿 조각 이름} 이다.


위의 경우를 예시로 들면

<div th:insert="~{test/template/fragment :: test ('hi','hello')}">

라고 레이아웃에 작성하면 div태그 안에

<footer th:fragment="test (param1, param2)">
    <p th:text=${param1}></p>
    <p th:text=${param2}></p>
</footer>

위의 내용이 각각 인자들은 치환되고 들어가게 된다.

결과값은 이렇다.

<div>
    <footer>
        <p>hi</p>
        <p>hello</p>
    </footer>
</div>


insert가 아니고 아래처럼 replace를 쓴다면

<div th:replace="~{test/template/fragment :: test ('hi','hello')}">

div태그가 아예 치환되어 

<footer>
    <p>hi</p>
    <p>hello</p>
</footer>

이런 결과가 나올 것이다.





다음은 레이아웃에 대한 내용이다.

레이아웃 내용은 조금 헷갈릴 수 있다.

왜냐하면 타임리프에서 레이아웃은 replace와 insert의 특수한 문법을 이용해서

레이아웃에다가 디테일한 화면의 내용들을 끼우고, 다시 치환하는 과정을 거치기 때문이다.

즉, View를 이용해서 레이아웃을 완성시킨 다음 그 레이아웃을 View로 다시 치환해서 View를 출력하는 형식이다.


좀 복잡해 보이지만 쉽게 정리하면 일단 이렇게 생각할 수 있다.

먼저, 레이아웃에 View의 내용을 채운다고 생각하자. 이건 너무나도 당연한 내용이다.

레이아웃을 만들고, 공통 부분은 냅두고 View의 내용들로 나중에 치환될 부분을 replace,insert로 설정해 놓는다.


<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title th:replace="${title}">레이아웃 타이틀</title>

    <!-- 공통 -->
    <link rel="stylesheet" type="text/css" media="all" th:href="@{/css/awesomeapp.css}">
    <link rel="shortcut icon" th:href="@{/images/favicon.ico}">
    <script type="text/javascript" th:src="@{/sh/scripts/codebase.js}"></script>

    <!-- 추가 -->
    <th:block th:replace="${links}" />
</head>


위와 같은 모습이 될 수 있다.

그럼 나중에 replace와 insert부분은 실제 View부분의 내용으로 바뀔 것이고 공통 부분은 유지될 것이다.


하지만 잘 보면 뭔가 이상하다.

replace가 되려면 fragment가 있어야 한다. 그리고 잘 보면 replace에는 ~{}도 사용되지 않았다.

이제 여기서부터 조금 복잡해 진다.

위의 <head>태그를 fragment처리할 것이다.


<html xmlns:th="http://www.thymeleaf.org">
<head th:fragment="common_header(title,links)">
    <title th:replace="${title}">레이아웃 타이틀</title>

    <!-- 공통 -->
    <link rel="stylesheet" type="text/css" media="all" th:href="@{/css/awesomeapp.css}">
    <link rel="shortcut icon" th:href="@{/images/favicon.ico}">
    <script type="text/javascript" th:src="@{/sh/scripts/codebase.js}"></script>

    <!-- 추가 -->
    <th:block th:replace="${links}" />
</head>
</html>


이렇게 말이다.

잘 보면 title과 links를 인자로 받고 있고 아까 작성한 replace에는 title과 links가 있었다.

replace이므로 인자로 받은 값이 title과 link가 있는 태그를 완전히 치환할 것이라는 뜻이다.

그 말은 즉, 다른 thymeleaf파일에서 저 조각을 replace나 insert하고 인자를 넘기면 

레이아웃 파일에 title과 links는 인자로 완전히 치환되고 공통부분은 남은 상태로 그 파일에 완전히 치환된다는 것이다.

그리고 그 다른 thymeleaf파일이 View파일이 되는 것이다.


이렇게 말로 설명하면 조금 와닿지 않을테니 View파일을 보여 주겠다.


<html xmlns:th="http://www.thymeleaf.org">
<head th:replace="template/layout/base :: common_header(~{::title},~{::link})">
    <title>메인 타이틀</title>
    <link rel="stylesheet" th:href="@{/css/bootstrap.min.css}">
    <link rel="stylesheet" th:href="@{/themes/smoothness/jquery-ui.css}">
</head>
</html>


replace부분을 잘 보면 인자로 ~{::title},~{::link} 이런 값이 넘어가고 있다.

이것은 타임리프의 문법이다.

저렇게 인자로 값을 넘기면 현재 페이지의 저 태그가 그대로 넘어간다.(하위 태그 포함)

즉, replace를 사용하면 레이아웃에 title태그와 link태그들이 전부 넘어간다는 것이다.

그렇게 되면, 레이아웃에 있는 common_header라는 fragment내부의 ${title}과 ${links} 부분은 전부 저 태그들로 치환된다.


( 이 때 replace=""의 ""부분에 ~{::title}을 통해 받은 태그값이 그대로 들어가는 것 같지는 않다.

그렇게 되면 replace="<title>메인 타이틀</title>"가 되는데 문법적으로 작동할 수 없는 구조이다.

타임리프에서 제공하는 또 하나의 문법이라고 생각하는 게 낫다. 

그냥 ~{::}를 인자로 주고, 그걸 받아서 insert나 replace에 사용하면 내부적으로 알아서 태그 블록으로 치환될 수 있도록 만들어 둔 듯 하다.)


그렇게 치환되고난 레이아웃 파일의 fragment부분은 딱 우리가 원하는 상태일 것이다.

View파일에서 레이아웃에 치환되기를 원하던 부분만이 제대로 치환된 상태이다.

그리고 그 fragment를 replace로 치환하고 있기 때문에 그대로 실제 View에 덮어씌워질 것이다.


결과론적으로 따지고 보면 레이아웃을 채운다는 개념은 다른 템플릿과 크게 다르지 않다.

하지만 레이아웃을 채우고 그 레이아웃을 출력하는 개념이 아니고 채워진 레이아웃 부분을 View로 끌고와서 덮어씌우는 개념이다.


몇 가지 다른 사용법을 더 설명하면, 인자로 ~{}를 넣으면 그 인자를 사용하는 태그에는 아무값도 들어가지 않는다.

또 '_'를 사용하면 아예 레이아웃에서 기본으로 제공하는 값을 그대로 사용하도록 한다. 

<head th:replace="template/layout/base :: common_header(_, ~{})">

위와 같이 사용하면 


<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>레이아웃 타이틀</title>

    <!-- 공통 -->
    <link rel="stylesheet" type="text/css" media="all" th:href="@{/css/awesomeapp.css}">
    <link rel="shortcut icon" th:href="@{/images/favicon.ico}">
    <script type="text/javascript" th:src="@{/sh/scripts/codebase.js}"></script>

    <!-- 추가 -->
</head>
</html>


위와 같은 결과값이 나올 것이다.






타임리프의 템플릿은 왜 이렇게 복잡하게 해야 하는 지는 잘 모르겠는데,

레이아웃을 View로 사용하고 다른 디테일한 부분을 replace,insert로 치환하면 렌더링이 이뤄지지 않기 때문이 아닐까 한다.

만약 레이아웃에서 replace받은 부분이 Model로부터 데이터를 꺼내와 렌더링 되어야 하는 부분을 포함하는데,

replace되거나 insert된 내용들은 말 그대로 치환만 하고, 그 부분에 대해선 따로 렌더링을 안 하도록 설계되었다면 말이다.

이 부분은 나중에 따로 실험해 보자.


아니다. 다시 생각해 보니 그게 불가능하다.

레이아웃에서는 여러 가지 View를 가져다 써야 할 텐데, 레이아웃에 해당하는 파일이 호출될 때마다

필요한 View의 fragment를 가져다 쓰도록 작성하는 게 애초에 불가능한 것 같다.

jsp의 tiles의 경우는 동적으로 요청에 따라 jsp파일이 선택되어 삽입되었지만 

이 경우는 따로 xml파일과 같은 것을 이용해서 삽입해 주는 것이 아니니, 안 될 듯 하다.

위 방법이 맞는듯 ㅇㅇ





