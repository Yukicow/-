






타임리프에도 Spring의 Converter를 적용시킬 수 있다.

${{}} 이렇게 {}를 두 번 적어 주면 ConversionService를 동작하게 해서 특정 타입을 표현할 수 있다.

예를 들어 특정 객체에 필드로 객체가 있다고 해 보자.

우리가 단순히 ${}라고 써서 그 필드를 적어 주면 그 객체의 레퍼런스값이 출력된다.

그렇지 않게 하려면 객체의 getter를 ${}안에 적어 주면 된다.

하지만 그렇게 되면 그 객체의 특정 필드만 출력이 가능하다. 그 객체로부터 원하는 형식이 존재한다면

타임리프 내부에서 그 형식을 만들기 위해 드럽게 힘든 작업을 거쳐야 한다.


만약 객체에 대한 특정 출력형식을 지정하기 위해 Converter를 생성해서 등록한 적이 있다면

${{}}를 사용해서 ConversionService를 적용하고 그 출력형식을 바로 출력할 수 있다.

 

예를 들어 IpPort라는 객체가 필드로 존재한다고 해 보자.

IpPort에는 ip필드와 Port필드가 있다.

나는 타임리프에 IpPort가 'ip + : + port' 형식으로 출력되기를 바란다.

이걸 타임리프에서 직접 적용하기에는 너무 복잡하다. 

또 사용자 입력값이 서버로 보내졌을 때 IpPort객체를 binding하는 것도 쉽지 않다.

그래서 Converter를 만들었고 ${{객체.ipPort}} 이렇게 적었다고 해 보자.

그럼 어떤 객체의 필드인 ipPort는 ConversionService가 적용되어 'ip + : + port'가 적용된 값을 출력할 것이다.

만약 ${객체.ipPort}라고 적었다면 ipPort의 레퍼런스값이 출력될 것이다.