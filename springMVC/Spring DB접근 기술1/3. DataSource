






커넥션 풀은 애플리케이션 시작 시점에 커넥션을 미리 만들어서 풀에 저장하고 계속 유지하는 것이다.

커넥션은 요청에 의해 사용되고 나면 다시 풀에 반환되고 다시 사용할 수 있도록 한다.

DataSource는 이런 커넥션 풀에 대한 인터페이스라고 생각하면 된다.

커넥션 풀도 여러 라이브러리가 있고, 또는 커넥션풀 말고 DriverManager를 통해서 커넥션을 얻고 있는 경우가 있을 것이다. 

그럼 때에 따라서 커넥션 얻는 방법을 다른 방식으로 바꾸려고 하면, 코드를 바꿔야하는 경우가 생기는 것이다.

그래서 이런 단점을 보완하고자 인터페이스를 만들어서 인터페이스에 의존하도록 하는 것이다.

그럼 HikariCP 커넥션풀을 사용하다가 DBCP2를 사용하려하면 그냥 구현체만 빈으로 바꿔 넣고 

우리는 평소처럼 DataSource를 사용하면 된다는 것이다.


근데, DriverManager는 사실 DataSource를 구현하고 있지 않다.

그래서 DriverManager를 직접 사용해서 커넥션을 얻어오고 있느 경우는 어쩔 수 없이 코드를 변경해야 하는데

스프링은 그래서 DriverManager로 부터 커넥션을 얻어오면서, DataSource를 구현하는 DriverManagerDataSource를 제공한다.

그럼 우리는 DriverManager를 직접 사용하지 않고 애초에 코드를 짤 때 DriverManagerDataSource를 이용해서 커넥션을 얻어 오다가

나중에 필요해서 커넥션 풀을 사용하게 된다면, 그 때 DataSource를 구현하는 다른 커넥션 풀을 등록하기만 하면 똑같이 동작할 것이다.


그리고 DriverManagerDataSource의 장점은 또 있다.

그냥 DriverManager를 통해서 Connection을 가져올 때에는 커넥션을 획득할 때마다 연결 정보를 넘겨야 했다.

DB url정보, username, password 정보를 획득할 때마다 인자로 넘겨야 하는 것이다.

크게 어려운 것은 아니지만 좀 귀찮기도 하고 우리가 설정에 대한 것을 사용할 때마다 신경써야 한다는 것이다.

하지만 DriverManagerDataSource는 생성 시점에, 또는 property방식으로 정보를 setting하면

커넥션을 획득하는 메소드를 호출하기만 하면 알아서 커넥션을 생성해서 반환해 준다.

딱 보기에는 큰 차이가 없어 보이기는 하지만, 설정과 사용을 분리한다는 장점이 있다.

이러한 설정과 사용의 분리는 향후 변경에 더 유연하다는 장점이 있다.


각각의 DataSource 구현체들은 최대 커넥션 개수, 타임아웃과 같은 여러 정보들을 설정할 수 있도록 

자신들만의 설정 인터페이스를 구현 해서 제공하고 있다.

설정 가능한 것들은 거의 웬만하면 공통적인 내용들이겠지만, 

그 인터페이스는 각각의 라이브러리가 따로 생성한 것들이라는 것이다.

그래서 xml과 같은 설정파일을 통해 property방식으로 설정을 할 때에는 메소드 이름을 잘 보고 적용하자.

요즘은 어차피 다 HikariCP를 사용한다고 하니 그거 검색해서 쓰면 될 듯.

만들 때에는 구체 클래스로! 넘길 때에는 DataSource 인터페이스로 알죠?

DataSource인터페이스에는 설정에 대한 메소드는 없고 getConnection만 있어서 설정이 안 돼요~



그리고 참고로 위에서 DriverManagerDataSource가 있다고 했는데,

DataSource가 붙었다고 해서 얘를 커넥션 풀로 오해할 수 있는데, 얘는 커넥션 풀이 아니다.

그냥 DataSource만 구현한 클래스인 것이다. 

위에서 커넥션풀을 위한 설정은 각 라이브러리에서 따로 만든 인터페이스를 통해 만든다고 했는데

얘는 그래서 그런 인터페이스는 구현하지 않고, 딱 DataSource만 구현했다.

# 물론 기본 커넥션에도 설정이 필요한 내용을 위해서 javax진영의 CommonDataSource 정도는 구현하고 있다.

하여튼 얘는 그냥 스프링에서 DriverManager를 통해서 말 그대로 커넥션만 대신 전해 주고 

나중에 커넥션 풀을 사용할 때에 코드 변경 없이 구현체만 바꿔 끼우면 동작할 수 있도록 지원하는 녀석이라고 보면 된다.

그러니 DriverManagerDataSource를 사용하면 결국 커넥션 풀을 사용하는 거 아닌가? 이런 걱정하지 말고

그냥 DriverManager를 통해 커넥션을 얻고 싶으면 무조건 이거 써라.