





Connection과 Statement와 ResultSet은 모두 데이터베이스와 연결을 통해 사용되는 객체들이기 때문에

사용 후에는 꼭 닫아 주는 과정이 필요하다.

근데, 이 때 단순히 닫기만 하면 참 좋은데 조금 고려해야할 부분이 있다.

예외가 발생했을 때이다.

이러한 연결을 닫아 주는 로직을 일반 로직에 포함시키면 예외가 발생했을 때 닫는 로직까지 닿지 않고 끝나기 때문에

위의 3가지 연결이 유지된 상태로 예외만 WAS에 넘겨지게 될 것이다.

그래서 예외가 터졌을 때에도 꼭 닫을 수 있도록 위의 3가지를 사용할 때에는 꼭 try문으로 감싸서 

finally에 닫는 로직을 추가해야 한다.


근데, 아직도 끝나지 않은 문제가 있다.

이러한 3가지 연결이 이미 닫혀 있는 상태일 수도 있다.

또, 닫혀 있지 않더라도 닫는 과정에서 예외가 발생할 수 있다.

그래서 닫는 과정을 또 try문으로 감싸고 if문을 사용해서 null인 지 확인해야 한다.

if(rs != null){
    try{
        re.close;
    } catch{
        log.info("처리")
    }
}
if(pstmt != null){
    try{
        pstmt.close;
    } catch{
        log.info("처리")
    }
}
if(conn != null){
    try{
        conn.close;
    } catch{
        log.info("처리")
    }
}

이렇게 해 주어야 안전하다는 뜻이다.

# 물론 이것도 조금 부족하긴 함

JPA와 같은 ORM 기술이나 JDBC템플릿, MySql 등 모두 이러한 로직을 알아서 처리해 준다.


근데, 위와 같은 기술들을 사용하지 않을 경우 로직을 직접 적는 것은 좀 귀찮다.

그래서 이런 로직을 미리 짜 놓은 게 있는데, JdbcUtils이다.

JdbcUtils의 static 메소드인 closeResultSet(), closeStatement(), closeConnection()을 제공한다.

이녀석을은 위의 로직이랑 크게 다르진 않은데, 조금 더 경우의 수를 고려해서 안전하게 close를 지원하는 메소드이다.

인자로 각 연결 객체들을 넘기면 된다.

우리는 이렇게 자동으로 지원하는 메소드가 있으니 힘들게 로직짤 필요 없이 그걸 쓰면 된다.

close를 할 때에는 그냥 finally에 위의 3메소드를 사용하도록 하자.