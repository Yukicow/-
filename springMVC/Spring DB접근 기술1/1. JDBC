





우리가 WAS에서 데이터베이스에 접근하기 위해서는 커넥션을 연결하고 SQL을 전달해서 결과를 받아야 한다.

근데, 이 과정이 각각의 데이터베이스마다 방식이 다 다르다는 것이다.

당연하게도 데이터베이스를 만드는 회사가 다 다르기 때문에 이러한 데이터베이스와의 상호작용을 위한 사용방법도 다 달랐던 것이다.

그래서 이러한 방법을 개발자들이 데이터베이스가 바뀔 때마다 공부하고 인지하고 코드도 변경해야 했다.

이러한 불편함을 줄이기 위해 JAVA에서 데이터베이스 접근에 기술에 대한 인터페이스를 만들어 표준을 제공했고 그게 JDBC이다.


그리고 각각의 회사에서는 이러한 표준에 맞춰서 구현체를 구현하고 제공한다.

이렇게 되면 우리는 인터페이스를 통해서 구현체를 받고 사용하면 된다.

그럼 인터페이스의 사용법만 알면 모든 데이터베이스에 접근할 때 문제없이 사용할 수 있다.

그래도 SQL은 각각의 데이터베이스에 맞는 방식으로 작성해야 하긴 한다.

물론 나중에 JPA을 사용하게 되면 이것도 자동으로 해 준다.


JDBC를 이용하는 방식도 요즘은 사양되는 추세이다.

당연하게도 오래된 기술이기도 하고, 생각 보다 복잡해서 가독성도 떨어지고, 코드가 길어지는 문제가 있다.

그래서 요즘은 이러한 JDBC를 편리하게 사용할 수 있도록 도와 주는 기술들이 나왔다.

대표적으로 JdbcTemplate나 MyBatis, JPA가 있다.

이 기술들은 내부적으로 JDBC를 이용한다는 점은 똑같지만,

개발자 입장에서는 불필요한 반복과정을 줄이고 여러 추가 기능도 제공해 준다.



우리는 이러한 편리한 기술을 공부하기 전에 JDBC에 대해서 먼저 알아볼 것이다.

JDBC를 요즘 사용하지 않는다고 해서 안 해 보는 것은 솔직히 좀 안 좋은 것 같다.

JDBC를 해 보면서 데이터베이스와의 상호작용 과정에서 어떻게 동작하는 지 알아야

저런 편리한 기술을 사용할 때에도 문제를 해결하는 데에 도움을 얻을 수 있고, 

편리할 기술에서는 당연하게 동작하는 로직들이 실제는 어떻게 동작해야 하는데, 그걸 지원하는 구나~ 하고 이해할 수 있다.
