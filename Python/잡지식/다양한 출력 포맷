1.

print("{0: >10}".format(100))

{0: >10} 에서 0은 뒤에 받아 줄 숫자를 넣은 거라는 뜻. 
: >10 는 숫자 10만큼 자리를 확보하고 하고 '>'(오른쪽에) 0에 들어간 값을 정렬한다는 뜻.
그리고 남은 자리는 '>' 앞에 있는 문자로 대체.
반대로 : <10 이면 앞에 것을 숫자만큼 출력 후 값을 왼쪽에 정렬한다는 뜻. 

0이 받는 값도 자리를 차지한다.

ex) 
print("{0: >10}".format(100))
->       100
#총 10칸이고 뒤에 100이 있고 앞에 남은 7자리는 빈칸으로 채워짐

print("{0:_<10}".format(100))
->100_______



2.

여기서 format으로 받는 값을 양수와 음수로 표현하고 싶을 때
{0: >+10} 이렇게 +를 붙여주면 음수면 -가 양수면 +가 출력됨

ex)
print("{0: >+10}".format(100))
->      +100
print("{0: >+10}".format(-100))
->      -100



3.

3자리 수마다 , 찍어주는 법

{0:,} # 자리수 뒤에 붙여 줘야 함.

ex)
print("{0:,}".format(100000000))
->100.000,000


응용1

print("{0:_>+10,}".format(-100000000))
->-100,000,000

받아준 값이 확보한 자리보다 많으면 값은 제대로 출력이 되고

남은 자리가 없으니 '>','<' 앞에 있는 문자는 출력이 안됨.


4.

소수점 출력

{0:f}

f앞에 숫자를 붙이면 소수점 그 자리까지 만큼 출력

ex)
print("{0:f}".format(5/3))
-> 1.6666667
print("{0:2f}".format(5/3))
-> 1.67


모두 응용)

print("{0:_>+50,f}".format(35189/3))

출력.
____________________________________+11,729.666667

50칸 확보 빈칸 '_' 로 채우고 0에 대한 값 오른쪽 정렬 3자리 수 마다 ',' 달고 소수점 표현. 

