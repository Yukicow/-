

변수


변수는 데이터가 위치한 공간을 가리키는 이름이다.

변수 선언이란 이름을 가진 메모리 공간을 확보한다는 것이다.

데이터가 생성될 때 이 변수 선언을 해주면 그 데이터의 메모리상 공간을 변수가 할당받아 이름을 갖는 것이다.

데이터에 접근할 때 메모리 주소를 이용해 접근해야 하는데 메모리 주소의 대신 역할을 하는 거지.

원래라면 메모리 주소를 하나하나 직접 입력해서 데이터에 접근했다면 그 메모리 공간에 이름을 붙이고

이름을 찾아서 그 메모리에 접근하는 방식이라고 볼 수 있다.

근데 그럼 변수는 메모리 공간의 이름인데 공간의 이름이 어떻게

코딩할 때에는 안에 있는 데이터 값으로 계산이 알아서 되죠?

정확히는 메모리의 위치에 접근할 수 있게 도와주는 주소의 대리 이름 역할인 것이다.

메모리 위치에 접근만 했다면 이용하는 건 문제가 안 되지. 그 메모리 위치의 주소를 이용할 건지 데이터를 이용할 건지 이제

명령어에 따라서 갈릴 테니까. 어떤 명령을 수행하느냐에 따라 골라 쓰는 거지.

그리고 변수 선언이라는 것도 명령어 라는 것을 알아야 한다.

변수 선언도 결국은 사람이 알아 보기 쉽게 이름이라는 것을 붙이기 위해 만든 거니까.

즉, 변수 선언은 이름을 붙이라는 명령어로서의 역할을 하기 때문에 그에 대한 것은 프로세스가 알아서 처리할 거고

변수가 이러이러한 정보를 갖는다 라는 것을 데이터로 저장할 필요가 없는 거야.

'공간에 변수라는 걸로 마크 해 놔'라는 게 프로세서가 명령어로 받아 들이고 실행하게 되는 거지. 

한 마디로 변수 선언의 명령어는 실행 명령어 인 거임. 그 실행 명령이 공간에 이름 붙이기 인 거고.

한 번 이름이 붙여지면 '이 변수는 어떤 메모리 공간을 말하는 구나'라는 개념을 인지하고 기억하는 형태인 거지.

그렇게 기억해 놓았다가 나중에 변수를 사용하면 그 위치로 쏙 이동스.

만약 여기서 '아니 변수가 메모리 공간의 이름을 나타내는 건데 그 공간을 찾는 건 어떻게 하는거냐구요.' 라고 한다면

'메모리 주소값을 아는데 그걸 안다고 어떻게 메모리 위치에 접근하냐구요' 랑 같은 질문인 거임.

하나하나 찾아다니면서 이름이 같은 부분을 찾겠지 뭐... 약간 마크라고 보면 됨. 마크를 해 놓은 거야. 변수라는 마크를.

"야 변수 어디야" , "저 여긴데요", "ㅇㅋ 간다 ㄱㄷ" 이런거지

이름 보고 찾아가는 거지.

아니 그럼 포인터도 ㅅㅂ 그 주소에 마크 쳐 놓고 바로 접근하면 되는 거 아님? 왜 굳이 변수 선언해서 메모리 공간 차지함?

ㅄ아 그럼 이름이 같은 변수의 포인터는 어떻게 구분할 건데. 효율은 좋겠지만 구분은 해야지.

메모리는 고유한 주소를 갖기 때문에 메모리에 딱 하나 밖에 없는데 변수라는 건 사용자가 지정하기 때문에

같은 이름을 갖는 변수가 생길 수 있단 말이야. 잘 봐.

한 코드 내에 a = 10 a = 20 이 있어 네임 스페이스는 달라. 근데 포인터를 변수 선언이 아니고 그냥 이름 붙이기 식이면은

포인터를 나타낼 한 가지 규칙성을 가져야 하는데 그게 &라고 쳐 봐. 그럼 10에 대한 포인터도 &a 20에 대한 포인터도 &a이잖아

그걸 구별하려고 포인터가 있는 거지. 변수로 접근할 때 문제가 생기는 경우 고유한 메모리 주소를 이용하기 위해 생긴 게 포인터인 거야.

ㅇㅎ



물론 그 접근 과정에서도 각각 함수의 도움이 필요한 것 같기는 해.

값에 의한 호출이냐 참조에 의한 호출이냐 처럼 a는 공간을 의미하기 때문에

안에서 어떤 값을 넘겨줘야 할 지는 호출되는 함수에 따라 다른 거지.

print() 같은 경우 변수 a 안에 있는 문자열의 데이터를 받아서 넘기는 거지


+,- 등 도 마찬가지다.

 저 부호들 자체에 '변수 안에 있는 '값'으로'라는 말이 내포돼 있다고 생각하면 된다.


