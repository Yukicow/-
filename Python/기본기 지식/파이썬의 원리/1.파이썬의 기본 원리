

파이썬이 어떻게 돌아가고 있는 지 알아?

다른 언어와는 다르게 파이썬에 있는 모든 데이터들은 사실 

모두 오프젝트(클래스와 인스턴스)와 레퍼런스야.



cs적으로 접근하면 다른 언어와 근본적으로 다른데.

c언어의 'int a = 1;' 그리고 파이썬의 'a = 1'의 차이첨을 알아 보자.

다른 언어의 경우 정수형 a에 대해 메모리가 할당되고 그 안에 1이라는 값이

저장이 되는 형태야. a는 메모리 공간의 이름인 거지. 하지만 파이썬에서는

우선 1이라는 'int' object를 생성하여 특정 메모리 주소에 할당하고 그 다음에

그 메모리 공간에 대해 a라는 이름을 갖게 돼.

근데 여기서 불변객체와 가변객체에 따라 변수의 성격이 또 나뉘는데

불변객체일 때에는 값이 재할당 될 때 새롭게 객체가 생성되고 변수 a가 

원래 데이터가 있던 곳을 버리고 새롭게 생긴 그 공간의 이름을 가져. 

예를 들어 a = 1 이었는데 밑에서 a = 2 라고 다시 선언하면 

메모리에 2에 대한 정수 클래스가 다시 생성되고 다른 메모리에 저장이 된 다음에

그 공간의 이름을 다시 a라고 지정하는 거지.


다른 언어는 a에 대해서 자신의 공간을 할당해주기 때문에 뒤에 값이 재할당되어도 

a라는 공간 안에 있는 값이 바뀌는 형식인데 파이썬은 값이 새로운 메모리 공간을 차지하고

a를 그 공간의 이름으로 바꿔버리는 형식인 거지. 그리고 전에 있던 값을 가리키는

다른 변수가 없으면 메모리에서 지워버리는 형식인 거야.

근데 이건 불변객체에 한 해서만 그런 거고 가변객체에 대해서는

c언어 처럼 주소값이 유지가 된 상태에서 안에 있는 데이터가 바뀌어.

물론 처음 오브젝트 생성이 먼저 되고 메모리 주소가 할당되는 건 똑같지만 만들어진 후의 이야기야.



위의 내용을 좀 더 자세히 이해하기 위해 레퍼런스에 대해 알아 보자


파이썬에는 주소라는 개념이 없고 레퍼런스라는 개념이 있는데

c언어의 주소랑 비슷한 개념인데 좀 달라. 일단은 메모리 주소값이라는 건 맞아.


c언어는 변수에 대해 공간을 할당하고 a는 그 공간에 대해 절대적 힘을 가지는 거야.

근데 파이썬은 변수 a는 그냥 레퍼런스 값을 따라 이동하는 떠돌이야.

a가 가리켜야 할 값이 변경되면 a 안에 있는 값을 변형해서 저장하는 게 아니고

그 값이 있는 곳을 향해 떠나는 거지.



좀 예시를 들어 보면

다른 언어에서 int a = 1 있으면 a라는 공간에 1이라는 값을 넣고 a는 그에 대한 정보를 가져.

이런 느낌이면 파이썬은 a = 1 1이 있는 공간 있지? a야 너가 거기 담당이란다.

이런 느낌이야.

그래서 다른 언어에서 a = 1 b = 2 이 있으면 a = b 라고 재할당 했을 때.

a 라는 공간에 b의 값이 다시 들어가는 개념이지. 데이터가 변수의 주소를 따라가는 개념인 거지.

근데 파이썬은 a = b 라고 하면 오히려 변수 a가 b가 있는 주소를 따라가.

원래 있던 장소를 버리고 b가 있는 공간을 가리키는 거지.


가변객체도 위의 원리는 똑같이 적용 돼. 가변객체가 안에 있는 값이 변경될 수 있다고 해서

다른 언어와 같은 동작원리인 건 아니야. 가변객체에 대한 변수도 지정하는 객체가 바뀌면

바뀐 객체 주소를 따라 가니까. 그냥 안에 있는 값만 바뀔 수 있다? 느낌으로만 이해하면 돼.


이제 좀 이해가 되나?





오브젝트에 대해 알아 봤으니 다음으로는 함수를 알아 보자.


+,-,*,/ 등등은 모두 특정 변수의 클래스 안에 있는 함수들이야.

파이썬에 기본으로 내장된 클래스와 메소드들에 의해 연산되고 있는 거지.

그래서 자료형마다 연산 구조가 다른 거고.


예를 들어 볼 게.

3 + 5 를 실행하면 8이라는 값이 나오지?

여기서 3과 5는 파이썬이 내장한 int클래스에 속해.

int 클래스에서는 '+' 연산을 처리하는 __add__ 메소드를 정의하고 있고, '+' 기호가 들어왔을 때 이 메소드가 실행되는 구조다.

결국 우리가 3과 5를 + 를 통해 더하기를 시전한다고 하면

파이썬 내장의 int클래스에 내재된 더하기를 담당하는 __add__ 메소드를 불러오는 거지.

3 + 5는 파이썬 내에서 (3).__add__(5) 이 과정을 거치는 것과 같아.

3이라는 인트 클래스가 __add__라는 메소드를 실행하는데 메소드에서 받는 값에 5를 집어 넣는다.

여기서 숫자는 '(3)'처럼 ()로 감싸야 하는데 소수와 구별해야 하기 때문이다. 

함수를 호출할 때 '.'을 붙여 주는데 소수점과 혼동이 오니까 ()를 사용해 안에다 수를 집어넣는 것.


두 번째 예시로 

[1, 2, 3] + [4, 5, 6]  # 파이썬 내부적으로 밑 문장을 실행중

[1, 2, 3].__add__([4,5,6])

[1, 2, 3, 4, 5, 6]


이렇게 값이 출력될 텐데. 여기서 중요한 게 뭐냐.

같은 '+' 라도 클래스에 따라 다른 구현이 되어 있음을 보여주고 있는 것이야.

list 자료형은 '+' 연산에 대해 값을 더하는 것이 아닌 접합(concatenate)을 하고 새로 생성된 list를 반환하는 것이지.



그럼 이제 예전에 배운 예외처리에서 

class ero(Exception):
    def __init__(self, name):
        self.name = name
        
    
    def __str__(self):
        return self.name


이 부분이 이해가 될 것이다.

__str__은 객체 정보를 문자열로 변환해 주는 것이다.

객체에 저장된 정보가 문자열로 모두 변형되고 return을 통해 self.name에 저장하는 것.