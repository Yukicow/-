

1. 상속

상속이란 물려주는 것.

클래스를 만들 때 만약 전에 만든 클래스와 겹치는 내용이 많으면 
전에 있던 클래스의 정보를 불러와 상속해주고 나머지 내용은 새로 추가할 수 있음.

ex)

class pyshic_inform:
    
    def __init__(self, height, weight, age):
        self.height = height 
        self.weight = weight
        self.age = age
        
    def infor(self): 
        print("키 : {0} 몸무게 : {1} 나이 : {2} ".format(self.height, self.weight, self.age))
        

class all_inform(pyshic_inform): # 상속을 하기 전에는 '클래스(<-가 상속받을 클래스)' 형식을 취해야 함.
    
    def __init__(self, height, weight, age, friends): # 생성자에 friends 가 추가됨
        pyshic_inform.__init__(self, height, weight, age) # 원래 있던 정보는 '부모 함수.__init__(self, 원래 있던 정보들)'로 불러내기
        self.friends = friends
        
    def inf(self):
        print("키 : {0} 몸무게 : {1} 나이 : {2} 친구 수 : {3}".format(self.height, self.weight, self.age, self.friends))


a = pyshic_inform(float(input("키")),float(input("몸무게")),float(input("나이")) )
a.infor()

b = all_inform(float(input("키")),float(input("몸무게")),float(input("나이")), float(input("친구 수")) )
b.inf()


위 처럼 all_inform 에 pyshic_inform에 있는 정보를 엄마함수.__init__()을 통해 불러냈다.

(1.클래스) 파트에서 '클래스.함수()'형태로 함수를 호출할 수 있다고 했지? 

위에 pyshic_inform.__init__ 도 보면 '클래수.함수()'의 형태이다.

self를 써준 이유는 함수에 self를 사용했기 때문. 그리고 이 때 이 self는 all_infrom 클래스의 __init__함수 self에 저장된 인스턴스임.

예를 들면 a = all_inform() 이라고 하면 a가 인스턴스가 되는데 self는 인스턴스 그 자체라고 했죠? 

따라서 a는 all_inform 클래스에서 __init__함수가 호출될 때 self에 들어가게 되고 바로 밑에 

'부모 클래스'의 함수를 호출할 때에도 self에도 a가 들어가게 되는 것.


결론)

상속이란 것은 따로 정해진게 아니고 함수를 호출하는 과정과 같다. 

그러나 상속하기 전에는 상속을 받을 클래스는 옆에 '()'를 쓰고 안에 '부모 클래스'를 써주어야 함.




2. 다중 상속

상속을 여러개 받는 거.

그냥 똑같이 

class all_inform(pyshic_inform, 클래스):
    def __init__(self, height, weight, age, 더 받을 정보들): 
        pyshic_inform.__init__(self, height, weight, age) 
        클래스.__init__(self, 정보~~) 

','를 통해 클래스를 여러개 적어주고 그에 대한 정보도 같이 밑에 써주면 됨
