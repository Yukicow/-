

1. 클래스(class)

클래스는 같은 변수 정보를 갖는 변수와 반복되는 함수를 양산해 이용하기 위한 틀 같은 것.

예를 들어 '신체 정보'라는 변수에는 키,체중,나이 정보가 공통적으로 요구된다면
키,체중,나이 정보를 받을 class를 만들면 그 값만 다른 객체를 양산할 수 있음.

조금 더 쉽게 말하면

클래스는 반복되는 변수나 메소드를 쉽게 쓰거나 만들어낼 수 있게 정해놓은 것이라고 이해하면 쉽다.

ex)

리나의 신체 정보
키 = 160
체중 = 45
나이 = 22

소연의 신체 정보
키 = 165
체중 = 50
나이 = 25

아람의 신체 정보
키 = 168
체중 = 55
나이 = 25

이런 식으로 하나 하나 정의 하지 말고

class pyshic_imform: #뒤에 :를 꼭 붙여 주기.
    def __init__(self, hegiht, weight, age):
    self.height = height
    self.weight = weight
    self.age = age

클래스를 만들어 원하는 틀에 맞게 계속 만들어 내면 편하다.

그래서 이 클래스라는 것이 어디에 좋느냐.

어떤 공통 변수 정보를 가지는 변수들을 자주 만들어야 되고 
또 그 변수들이 어떤 함수에서 자주 사용된다고 하자

그러면 클래스 내에서 자주 쓰이는 변수들을 양산할 틀을 만들고 함수는 메소드로 저장을 하는 거야.

그럼 저장된 변수들의 정보랑 메소드를 이용해서 쉽게 뭔가 값을 도출해 내거나 이용하는 거지

위에 신체 정보로 예시를 들어볼 게.

class pyshic_imform:
    def __init__(self, hegiht, weight, age):
    self.height = height
    self.weight = weight
    self.age = age

신체 정보는 자주 쓰이니까 그냥 아예 클래스로 만들었어.

근데 이 신체 정보들이 평균체중을 구하고 비교하는 데에 계속 쓰인다네?

그래서 평균체중을 구하는 함수를 클래스에 저장했어


class pyshic_inform:

    def __init__(self, height, weight, age):
        self.height = height
        self.weight = weight
        self.age = age
        


    def avw(self): #self만 써주면 인스턴스에 저장된 값을 알아서 가져오는 것
        av_weight = (self.height/100) * (self.height/100) * 22 #실수끼리만 계산 가능
        biman = self.weight - av_weight
        print(round(biman,2))
        if biman >= float(5):
            print("돼지입니다.")
        elif (biman < float(5)) & (biman > float(-5)): 
            print("정상입니다.")
        else:
            print("멸치입니다.")
    
        
a = pyshic_inform(float(input("키")),float(input("몸무게")),float(input("나이")) )
a.avw()


이렇게 해 놓으면 객체를 만들 때마다 변수 입력과 표준체중 구하기가 편하게 가능하다.



2.객체(Object)


일단은 확실하게 정리가 안돼서 메모리에 저장되는 모든 정보 변수를 객체 

그 중에서도 클래스에 속한 객체를 인스턴스라고 합시다.

클래스에 의해 만들어진 객체는 서로 간에 영향을 주지 않음.


정리)

여기서 다시 변수 선언 개념을 좀 확실히 잡고 가자면

class power:

    def __init__(self, 변수):
        ~~~


a = power()

여기서 객체는 power()임 power클래스의 객체가 어딘가에 만들어졌다는 뜻임.

하지만 이 객체들이 모두 같진 않음 power() 는 객체를 만들었다는 것만 의미하기 때문.

예를 들어 'power(변수)' 이렇게 power클래스 변수를 만들어 보자. 

그럼 이 변수는 어디에 있고 어떻게 갖다 쓰지? 모른다.

그래서 각 객체마다 이름을 붙여주기 위해 변수 선언을 하는 거임.

한 마디로 변수 선언은 이름을 가진 메모리 공간을 만든다는 것이다.

a = power()  b = power() 둘다 power 클래스의 인스턴스이지만 변수 선언을 안 해주면 어디에 생성 됐는 지 모름.

su = 10 이라고 하면 10은 메모리 어딘가에 값이 저장되는 거고 su는 10이 담긴 곳의 이름이라고 보면 됨.

su를 10의 별명으로 지정하는 느낌으로 생각하면 편함.

그래야 포인터가 su의 값을 받았을 때 10이 나오는 게 설명이 될 거임.

10이 있고 그거를 su라고 부르기로 한다. 그러니 10을 부를 때에는 su를 통하라는 것.

이렇게 하는 이유.

a = 10 , b = 10 , c = 10 포인터 a , b , c는 모두 같은 10을 나타내 

다행히 여기서는 10이 특정 숫자이니까 굳이 변수 선언을 안 하고 10을 써도 괜찮은데 

클래스처럼 자기가 불특정 객체를 쳐 만들어서 어딘가에 멋대로 저장되면 변수 선언 없이 사용은 불가능 함.

함수도 마찬가지 함수를 만들어 내면 함수식이 어딘가에 저장되지만 그게 어딨는 지느 모름 

그래서 함수도 선언을 해서 이름을 할당하는 거임

한 마디로 변수와 변수가 가리키는 객체는 엄연히 다른 것이다. ㅇㅋ?

= 라고 해서 같다라는 의미가 아니야.




*사용자 지정 예외처리와 연결되는 내용)


클래스도 함수처럼 쓰일 수가 있는데. 변수 선언을 통해 클래스를 실행하면 인스턴스가 만들어지지만

그냥 클래스만 실행하면 클래스가 실행될 때 자동으로 호출되는 __init__있지? 

이거를 함수처럼 사용할 수도 있다 이말이여.

변수 = 클래스() 는 객체를 만든 거지?

여기서 클래스()를 사용자 지정 예외처리에 쓸 건데

class OveNumError(Exception):
    def __init__(self, msg)
