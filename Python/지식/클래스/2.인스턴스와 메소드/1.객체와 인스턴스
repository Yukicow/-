

1.객체(Object)


일단은 확실하게 정리가 안돼서 메모리에 저장되는 모든 정보 변수를 객체 

그 중에서도 클래스에 속한 객체를 인스턴스라고 합시다.

클래스에 의해 만들어진 객체는 서로 간에 영향을 주지 않음.


정리)

여기서 다시 변수 선언 개념을 좀 확실히 잡고 가자면

class power:

    def __init__:
        ~~~


a = power()
b = power()

여기서 객체는 power()임 power()에 의해서 power라는 클래스의 객체가 만들어지겠지?

하지만 power()는 모두 같진 않음 power()는 power에 의해 만들어진 객체라는 것만 의미하기 때문.

그래서 각 객체마다 이름을 붙여주기 위해 변수 선언을 하는 거임.

a = power()  b = power() 둘다 power클래스의 인스턴스이지만 변수 선언을 안 해주면 어디에 power()들이 저장 됐는 지 모름.

su = 10 이라고 하면 10은 메모리 어딘가에 값이 저장되는 거고 a에 그것을 대입하여 사용하는 것처럼.

정확히는 대입한다는 표현 보다는 su를 10의 별명으로 지정하는 느낌으로 생각하는 게 맞음.

그래야 포인터가 su의 값을 받았을 때 10이 나오는 게 설명이 될 거임.

10이 있고 그거를 su라고 부르기로 한다. 그러니 10을 부를 때에는 su를 통하라는 것.

a = 10 , b = 10 , c = 10 포인터 a , b , c는 모두 같은 10을 나타냄.

다행히 여기서는 10이 특정 수이니까 굳이 변수 선언을 안 하고 10을 써도 괜찮은데 

'클래스()'처럼 자기가 불특정 객체를 쳐 만들어 내면 변수 선언 없이 사용은 불가능 함.

함수도 마찬가지 함수를 만들어 내면 함수식이 어딘가에 저장되지만 그게 어딨는 지느 모름 

그래서 함수도 선언을 해서 이름을 할당하는 거임

그 이름을 통해 변수의 위치와 정보 등을 바로 알 수 있는 거지.


결론)

변수와 변수가 가리키는 객체는 엄연히 다른 것이다. ㅇㅋ?

'='로 선언 한다고 해서 같다라는 의미가 아니야.



2. 인스턴스


인스턴스는 클래스 내에서 메소드를 통해 생성된 객체를 말한다.