
문자열에 대해 여러 가지 처리하는 함수들.

1. 변수.lower() 변수 소문자로 출력
2. 변수.upper() 변수 대문자로 출력

ex)

a = "Apple"

print(a.lower())
print(a.upper())

-> apple
-> APPLE


3. 변수[범위].islower() 변수.isupper() 변수[범위]에 대해 소문자와 대문자가 맞는 지.

ex)
print(a[0].isupper())
-> True

4. len(변수) 변수의 전체 길이.

ex) 

print(len(a))

-> 5

5. 변수.replace("바꿀 문자열", "대체 문자열") 바꿀 문자열을 대체 문자열로 바꿔주는 것.

ex)

print(a.replace("A", "Pinea"))

-> Pineapple

6. 변수.index("위치를 찾을 문자", 시작점, 종료지점) # "" 안에 문장을 넣으면 맨 앞 문자를 찾음.

시작점과 종료지점을 따로 써주지 않으면 처음 부터 끝까지로 인식.

ex)

print(a.index("A))
print(a.index("Apple))
print(a.index("p", 0,3))

-> 0
-> 0
-> 1

만약 여기서 Apple에 p가 두 개인데 두 번째 p위치를 찾고 싶으면

index = a.index("p")

첫번 째 p에 대한 변수를 지정해주고 

index = a.index("p", index+1)

print(index)

-> 2

찾아 첫 번째 p의 위치 그 다음자리 부터 다시 p를 찾게 하면 됨.


7. .find()  .index()랑 비슷함.

find( ), index( ) 차이점


find()

1. 찾는 문자가 없는 경우에 -1을 출력한다.

# -1을 출력하고 할 거 함.

2. 문자열을 찾을 수 있는 변수는 문자열만 사용이 가능하다.  

리스트, 튜플, 딕셔너리 자료형에서는 find 함수를 사용할 수 없다. 

만일 사용하게 되면 AttributeError 에러가 발생한다.


index( )

1. 찾는 문자가 없는 경우에 ValueError 에러가 발생한다.

# 에러가 발생하기 때문에 뒤에 있는 다른 것들도 실행 안되고 종료됨.

2. 문자열, 리스트, 튜플 자료형에서 사용 가능하고 

딕셔너리 자료형에는 사용할 수 없어 AttributeError 에러가 발생한다


결론)

그냥 내장함수에서 find()는 -1을 반환하고 index()는 오류를 반환하게 설계해 놓은 듯.



8. .count("개수 샐 문자") 안에 있는 문자가 몇 개 있는 지 새어줌.

ex)

print(a.count("p"))

-> 2