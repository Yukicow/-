
포맷팅이란.


문자열 포매팅이란 문자열을 이쁘게 만드는 방법을 이야기 한다.

문자열 중간 중간에 특정 변수의 값을 넣어주기 위해서 사용하는 것.


예를 들어 우리가 구구단 프로그램을 만들다 보면

print('2 x 3 = 6') 이런식으로 노가다성으로 문자열을 만들지 않는다.

2도 변수, 1도 변수, 결과값인 6도 변수로 사용되고 있을텐데, 

이런 형태의 문자열을 포매팅 해서 문자열을 예쁘게 재사용하도록 하는 것을 말한다.

print('{0} x {1} = 6'.format(a, b, a * b)) 이것 처럼.


방법은 여러 가지가 있다.


방법1)

'+' 와 ',' 사용하기.

a = 23

print("코미는" + str(a) + "살 이에요") 

문자열과 숫자는 더할 수 없기 때문에 str()로 문자형으로 변형시켜야 한다.

print("코미는", a, "살 이에요") 

','를 사용할 때에는 더하기가 아니기 때문에 문자형으로 바꿀 필요는 없음.

단 ',' 를 사용하면 한 번 띄어 쓰기가 됨.

방법2)

'%' 이용하기.

a = 23

print("코미는 %d살 이에요." %23) 또는 print("코미는 %d살 이에요." %a)

이런 식으로 뒤에 %를 이용해 직접 수나 문자를 넣어 주거나 변수를 넣어줄 수 있음.

단 %를 사용할 때에는 자료형에 주의해야 함.

%d 는 정수형 %s 는 문자열형 %c 캐릭터(한 글자만 받음)

%s는 변수를 문자열로 변형시켜 주기 때문에 아무거나 갖다 넣어도 잘 작동 됨.

하지만 %d 에 문자형을 넣으면 오류가 남.


방법 3)

{}과 .format() 이용하기.

a = 23

print("코미는 {0}살 이에요.".format(23)) 또는 print("코미는 {0}살 이에요.".format(a))

{}를 통해 받고자 하는 변수나 자료형을 0부터 시작해서 자유롭게 사용하고

뒤에 .format()의 괄호 안에 0부터 순서대로 변수나 자료형을 넣어주면 됨.


.format()을 이용해 초기화도 해줄 수 있다.

print("코미는 {age}살 이에요.".format(age = 23))

이렇게 하면 변수 선언 되듯이 정의가 되기 때문에 .format() 뒤 변수 순서가 상관이 없다.

print("{name}는 {age}살 이에요.".format(age = 23, name = "코미"))

단 주의할 점)

여기서 선언된 변수는 밖에서 따로 사용할 수 없음.

ex)

print("{name}는 {age}살 이에요.".format(age = 23, name = "코미"))

print(age) 

라고 하면 오류남. age에 대해 정의된 것이 없기 때문.

age = 50

print("{name}는 {age}살 이에요.".format(age = 23, name = "코미"))

print(age)

여기서 밑에 age는 위의 print문 age가 아니고 위에서 선언한 변수 age를 받음.



방법 4)

f-string 사용하기.

변수를 바로 집어 넣어 쓰는 것

문자열 앞에 f 하나만 붙여주면 끝!

ex)

a = 23

name = "코미"

print(f"{name}는 {age}살 이에요.")

or

a = 23

name = "코미"

result = f"{name}는 {age}살 이에요."

print(result)

이렇게 문자열 맨 앞에 f만 붙여주면 그 동안 선언된 모든 변수를 바로 불러와서 넣을 수 있음.


*포맷 사용시 매우 중요한 사항)

"" 안에 ""가 또 사용되는 경우가 있을 수 있는데

이런 경우 오류가 날 수 있다.


f-string 을 예시로 들어보자

f"a.count("e")" 앞에 처럼 e의 개수를 새는 함수를 넣으면 오류가 난다.

왜 오류가 날까?

그건 바로 ""가 함수 안에 있는 ' " '를 f 뒤의 ' " '가 닫힌 것으로 이해하기 때문이다.

-> f"a.count(" 라고 오해한 것.


따라서 이런 경우 ""를 구분하기 위해 ''를 사용해 주어야 함.

f"a.count('e')" 이러면 ""와 ''가 확실하게 구분 돼 파이썬이 인식할 수 있음.