



파이썬을 보면 리스트가 참 편하고 좋은 기능을 해 준다.

근데 C언어를 공부하다가 파이썬의 리스트를 보면 어떻게 저렇게 구현해 놓은 거지? 궁금할 수 있다.

그래서 그 궁금증을 파헤쳐 보자.



리스트는 아래의 PyListObject라는 구조체로 구현되어있다.


PyObject_VAR_HEAD : 인스턴스마다 길이가 변하는 객체를 선언할때 사용되는 Pyobject의 확장판

**ob_item : 이중 포인터 (리스트 원소들의 포인터 배열에 대한 포인터)

allocated : 리스트의 할당된 크기를 저장한다. 리스트에 담긴 원소의 수, 

즉 리스트의 길이는 ob_size에 저장되므로 ob_size는 allocated보다 항상 작거나 같다.



리스트 오브젝트 내부


ob_item은 리스트 원소들의 주소 값을 저장한 C언어의 배열을 가리킨다.

그리고 이 배열에 저장된 주소값을 통해 실제 원소 값에 접근할 수 있다.

내부적으로 배열을 이용하여 리스트를 구성하는 것이다.

주소값을 이용한 배열을 통해 순서를 가질 수 있고 각 원소의 자료형이 무엇이든 상관없다. 

따라서 초기 선언시 자료형을 지정하지 않아도 되고, 하나의 리스트 안에 서로 다른 자료형을 저장할 수 있는 것이다.

하지만 이중 포인터를 사용하기 때문에 특정 값을 찾기 위해 두 번의 탐색 과정을 거치게 되므로 C언어의 배열보다 속도가 느리다.



리스트의 메모리 할당

C언어의 배열과 달리 파이썬의 리스트는 동적 배열이기 때문에 초기 선언시 리스트의 크기를 지정하지 않아도 된다. 

동적 배열은 초깃값을 작게 잡아 배열을 생성하고, 리스트가 꽉 채워지면 크기를 늘려주는 방식(더블링) 으로 동작한다. 

파이썬 리스트의 메모리 할당은 list_resize 메소드를 통해 이뤄진다.