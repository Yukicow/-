





밑은 ANSI SQL에 해당하는 JOIN문

ANSI SQL 모든 SQL에서 통용되는 표준 SQL문이라고 할 수 있다.



INNER와 OUTER

테이블의 관계에 있어서 서로 관계가 있는 속성값을 갖는 레코드들에 대해서는 INNER

관계된 속성값이 없어 연결될 레코드가 없는 녀석들을 OUTER라고 한다.



1. INNER JOIN

INNER JOIN은 즉, 관계가 있는 녀석들끼리만 결합하여 레코드를 생성하는 것이다.

그렇기 때문에 ON에는 그 관계에 대한 정의가 필요하다.

ON은 JOIN문에서의 WHERE라고 생각하면 편할 듯 하다. 

오라클에서는 제공하는 JOIN문에서는 ON 없이 그냥 WHERE문에 조건이 함께 사용된다.

# 그냥 WHERE에 JOIN에 대한 조건이 함께 붙으면 보기가 안 좋아서 따로 ON이라는 걸 만든 게 아닐까 함. 사실상 WHERE와 같음

각 테이블에서 관계성을 갖는 속성의 값이 같음을 명시하여 INNER 레코드끼리 합쳐진다.

INNER는 생략이 가능하다.



2. OUTER JOIN

OUTER JOIN은 INNER JOIN에서 버려진 OUTER에 해당하는 녀석들도 포함하여 결합시키는 JOIN이다.

종류로는 LEFT,RIGHT,FULL OUTER JOIN이 있다.

LEFT는 왼쪽에 있는 테이블의 OUTER를 포함 RIGHT은 오른쪽에 있는 OUTER를 포함하여 다른 테이블의 레코드를 NULL로 해서 결합한다.

FULL은 모든 테이블 RIGHT과 LEFT OUTER 결과를 포함한 것과 같다.




3. SELF JOIN

테이블의 속성이 자신의 테이블의 속성을 참조하는 관계를 갖고 있는 경우

자신의 테이블을 서로 JOIN해서 출력한다.


이게 언제 쓰이느냐 생각할 수 있는데 의외로 많이 쓰인다.

단순히 테이블의 속성이 같은 테이블의 다른 속성값을 참조하는 경우

예를 들어 사원에 대한 테이블이 있고 김민우,박창수,김재준,정경용,김기윤이 있다고 해 보자.

김민우는 박창수와 김재준은 정경용과 짝꿍이고 김기윤은 짝꿍이 없다고 하고 레코드에는 서로의 짝꿍에 대한 정보가 속성으로 담겨 있다.

내가 '김민우'를 검색할 때 짝꿍의 대학교에 대한 정보를 같이 출력하고 싶은 경우 어떻게 해야 할까?

단순히 '김민우'를 통해 짝꿍인 '박창수'라는 값을 얻고 그 값으로 WHERE 절을 이용해 한 번 더 SELECT를 써서

김민우의 짝꿍인 박창수의 대학교 정보를 얻을 수 있다.


하지만 이렇게 할 경우는 박창수의 대학교 정보만을 얻을 수 있다.

우리는 '김민우'를 검색할 때 박창수의 대학교 정보도 같이 얻고 싶은 것이다.

물론 서브쿼리 SELECT문을 사용한 다음 INNER JOIN이나 OUTER 조인을 사용해도 상관은 없다.

하지만 그렇게 복잡하게 하지 않고 자기 자신이 자신을 참조해서 검색하는 방법도 있는 것이다.


우리들의 정보가 담긴 MEMBER 테이블을 SELF JOIN해서 하는 방식으로 하면 이런 식으로 사용 가능하다.

SELECT M.*, N.US_INF FROM MEMBER M LEFT OUTER JOIN MEMBER N ON M.FRIEND_NAME = N.NAME

이렇게 해서 MEMBER M에 대해서 친구의 레코드를 참조할 MEMBER N을 연결하고

짝꿍이 없는 친구들에 대해서는 NULL값을 출력하도록 M에 대해 LEFT OUTER JOIN을 사용한다.

그리고 만약 짝꿍 정보가 있다면 그 짝꿍의 US_INF가 M의 모든 정보와 함께 출력되도록 하는 쿼리이다.


이 때 주의할 점은 FROM 다음 자신의 테이블을 작성할 때 별명을 꼭 붙여야 한다.

우리는 같은 테이블의 내용을 서로 다른 테이블로 보고 구분해서 참조하는 것이기 때문에 

별명이 없을 경우 같은 테이블로 인지해서 오류가 발생한다.




4. CROSS JOIN

두 테이블의 참조 관계에 상관없이 모든 레코드에 레코드가 붙어 출력된다.

이건 사실상 FROM 테이블1,테이블2 를 적고 아무 조건도 안 붙인 것과 같다고 할 수 있다. 

많이 쓰이진 않는다고 한다.





ORACLE에서 제공하는 JOIN


1. OLD JOIN

INNER JOIN과 같다.

하지만 ORACLE에서 제공하는 OLD JOIN은 ON이 아니고 WHERE 절에서 ON에 해당하는 조건을 사용한다.

그리고 WHERE 절에 사용되는 그 조건 자체가 애초에 JOIN의 역할로서 작용하기 때문에

JOIN의 명시는 필요가 없고 FROM에 테이블을 ','로 구분해서 작성한다.




2. OUTER JOIN

오라클에서는 JOIN을 사용하지 않기 때문에 LEFT와 RIGHT의 역할을 해 주는 녀석이 (+)이다.

이 때 (+)는 WHERE의 속성옆에 붙여서 적어주는데, JOIN과 다르게 NULL값으로 붙어질 테이블에게 붙여줘야 한다.

만약 MEMBER를 기준으로 잡고 싶다면 JOIN의 경우 MEMBER의 위치에 맞춰서 LEFT RIGHT를 써주었지만

(+)는 MEMBER가 아닌 반대쪽 테이블에 (+)를 붙인다.


EX) SELECT N.*, M.NAME FROM MEMBER M,NOTICE N WHERE M.ID = N.WRITER_ID(+)

이렇게 하면 MEMBER가 기준이 되고 관계가 없는 OUTER의 경우 M의 레코드에 N의 NULL레코드가 붙어 결합된다.



3. CROSS JOIN

FROM 테이블1,테이블2  의 형태로 작성하면 된다.




FULL OUTER는 지원하지 않는다.




사실상 ORACLE에서 제공하는 기능이라기 보다는 원래 기능을 이용한 JOIN의 구현이라고 보는 게맞다.

그리고 그런 기능을 ANSI에서는 JOIN이라는 절로 확실하게 구분해서 사용하도록 하는 듯 하다.