






우리가 ROWNUM을 붙일 때 ROWNUM은 WHERE 절이 수행될 때 붙기 때문에

정렬한 값에 ROWNUM을 붙이려면 서브쿼리를 사용해 SELECT문을 두 번 사용하는 방법으로 진행했다.

하지만 그렇게 어렵게 하지 않고 ROWNUM 함수를 이용하면 조금 더 간단하게 ROWNUM을 붙일 수 있다.



1. ROW_NUMBER() OVER (PARTITION BY 속성 ORDER BY 속성 [DECS | ACS])

SELECT의 앞, 속성을 사용하는 곳에 함께 작성하면 된다.

'ORDER BY 속성'에 적힌 속성 정렬 순으로 미리 정렬을 한 후에 ROWNUM을 붙이게 하는 함수이다.


PARTITION BY는 특정 속성에 대해 ROWNUM을 구분하여 붙이는 것이다.

예를 들어 PARTITION BY WRITER_ID 라고 작성하면 ROWNUM이 WRITER_ID마다 개별적으로 부여되는 것이다.

SELECT ROW_NUMBER() OVER (PARTITION BY WRITER_ID ORDER BY HIT DECS)

이렇게 쿼리문을 작성하면 작성자에 따라 작성한 글의 조회수를 내림차 순 기준으로 해서 ROWNUM을 1부터 부여 한다는 것이다.

작성자가 comi,dragon이 있다고 하고 각자 글을 세 개씩 썼다면 그 글의 조회수가 높은 순서부터 ROWNUM이 부여된다.

그리고 작성자 별로 따로 ROWNUM이 구분되기 때문에 comi에 대한 레코드에 ROWNUM이 1~3까지 적용되고

dragon이라는 작성자에 대한 레코드에 ROWNUM이 또 1~3까지 적용될 것이다.

PARTITION BY가 없이 SELECT ROW_NUMBER() OVER (ORDER BY HIT DECS) 이렇게 쿼리문이 작성되었다면

모든 글 중 조회수가 가장 높은 순으로 해서 ROWNUM이 1~6까지 부여되었을 것이다.




2. RANK() OVER (PARTITION BY 속성 ORDER BY 속성 [DECS | ACS])

랭크는 ROWNUM과 조금 다르다. 함수의 사용방식과 원리는 똑같지만 

부여되는 값이 ROWNUM이 아니고 RANK형식이다.

즉, 만약에 정렬 중에 속성의 값이 같을 경우 같은 ROWNUM(RANK)를 부여 받는다.

SELECT RANK() OVER (ORDER BY HIT DECS) 쿼리문을 통해 조회수가 가장 높은 순으로 레코드를 조회하는데

조회수가 같은 것들이 있을 경우 순차적으로 연속적인 값을 부여하는 게 아니고 같은 ROWNUM(RANK)을 갖게 된다.

이 때 RANK는 같은 값을 갖게 되는데 낮은 값을 기준으로 한다.

즉, 1다음에 2가 와야 하는데 조회수가 같은 레코드가 2개가 있어서 똑같이 2를 부여해 주어야 하는 상황이라면

공동 2위로 보고 2를 부여한다. 하지만 다음 랭크를 부여 받는 레코드는 공동2위의 레코드 수만큼 밀려 4가 된다. 

순위(랭크)도 그만큼 밀리는 것이다. 즉, 가장 마지막에 부여되는 RANK값이 ROWNUM일 때와 같은 값을 가지게 된다. 


SELECT RANK() OVER (PARTITION BY WRITER_ID ORDER BY HIT DECS)

이렇게 하면 조회수가 가장 높은 순으로 WRITER_ID에 따라 RANK가 각각 1부터 부여된다.





3. DENSE_RANK() OVER (PARTITION BY 속성 ORDER BY 속성 [DECS | ACS])

RANK()와 똑같다. 다만 얘는 공동 순위가 있을 경우 순위(RANK)가 밀리지 않는다.

공동 2위가 5명이었다면 일반 RANK()라면 다음 RANK는 7이 되겠지만 DENSE_RANK()는 그대로 연결되어 3이 된다.  

 


