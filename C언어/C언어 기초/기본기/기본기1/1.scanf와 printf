


1. scanf 와 scanf_s

scanf의 약점을 보완해서 나온 것이 scanf_s라고 할 수 있다.

scanf는 문자열의 실제 크기 보다 큰 문자를 넣을수 있다는 취약점(버퍼오버플로우)이 있었다.

그것을 보안하기 위해 scanf_s라는 함수를 만들었고 scanf_s는 () 안에 문자열의 크기를 받아

입력을 받을 때 입력 받는 문자 수를 제한하는 기능을 포함하는 것이다.

그래서 scanf_s를 사용해서 문자열을 받을 때에는 


scanf_s("%s", &a, sizeof(a));


이런 식으로 문자열의 크기에 대한 값을 넣어줘야 한다.

숫자로 넣어도 되는데 저렇게 넣는 게 가장 확실하긴 하지.

하지만 scanf_s는 vscode에는 없고 vs에 내장되어 있는 함수이다.


scanf의 특징

scanf()는 문자열이나 정수를 입력 버퍼에서 가져올 때에는 그에 맞는 형식의 데이터를 받을 전까지

공백문자를 무시한다('',\t,\n). 원하는 형식이 나온 후에 공백문자를 만나면 공백문자 전까지의 데이터를 받아간다.

// 무시한 공백문자는 제외하고 받아감

문자형 데이터를 가져올 때에는 아무거나 가져오기 때문에 공백문자가 있어오 가져온다.


이게 왜 중요하느냐.

scanf는 이런 특징 때문에 \n아 입력 버퍼에 남아 있어도 문자형 데이터를 받을 때를 제외하고는

입력버퍼로 인해 문제가 될 일이 없다. 문자형 데이터를 받을 때와 scanf와 비슷한 gets를 사용할 때 문제가 된다.

gets함수는 입력 버퍼가 차있는 경우 첫번째 글자를 출력 또는 

입력 버퍼가 비어 있는 경우 입력을 요구하고 입력 받은 글자의 첫 번째 글자를 출력한다



1. scanf() 함수로 문자열을 입력시 엔터 전까지 OOOOO 문자열을 가져오고 마지막에 \0 (문자열의 끝을 알려주는 널문자)을 가져온다.

OOOOO(엔터) ------------> OOOOO\0 

또한 scanf 함수는 공백이 나오면 공백이전까지 저장되고 마지막에 \0문자를 붙여준다.

그래서 엔터에 대한 \n이 입력 버퍼에 남는다.



2. gets() 함수는 OOOOO(엔터) 줄바꿈 문자열까지 갖고 온다. 그 후에 \n(줄바꿈문자)를 \0(널문자)로 바꾸어준다.

OOOOO(엔터) ---------> OOOOO(엔터) ------------> OOOOO\0 

그래서 \n이 입력 버퍼에 남지 않는다. 전부 가져오고 나서 \n을 \0으로 반환하기 때문.



3. fgets() 함수도 gets()와 마찬가지로 OOOOO(엔터) 까지 가지고 온다. 그 후에 \0(널문자)를 추가로 마지막에 덧붙인다.

OOOOO(엔터) ------------> OOOOO(엔터)\0

이 녀석도 마찬가지로 \n이 남지 않는다. 전부 가져오고 \0을 덧붙이기 때문. 

위의 3가지 함수에서 \n과 \0도 다른 문자처럼 그냥 배열 요소 중 하나이다.


*주의)

주의할 점이 있다. 

fgets()는 뒤에 \n 부분과 \0 부분을 둘 다 가져야 하기 때문에 배열에서 2개의 자리를 차지한다.

그리고 fgets()도 마찬가지로 배열의 요소 보다 크게 값을 집어 넣으면 값이 덮어 씌워진다.

[4]크기의 배열 문자열을 만들었는데 2개의 자리를 비워 놓고 hi라는 문자를 넣으면 hi가 출력되고 

줄바꿈이 한 번 일어난 다음에 \0 NULL 즉 빈 공간이 출력될 것이다.

근데 만약 him 이라고 문자열 요소에 3개의 값을 넣으면 \n에 대한 부분은 m으로 덮어 씌워진다.

hello를 넣으면 \n과 \0 부분 심지어는 뒤에 있는 메모리 주소 안까지 침범해서 값이 들어간다. 

NULL은 문자열의 마지막에 추가되므로 그 뒤에 \0이 다시 덧붙여진다.

이걸 조금 응용이라면 응용이고 편법이라면 편법인데 fgets()는 \n을 가져와서 맘대로 줄바꿈 되는 게 좀 맘에 안 드는데

문자열 배열 요소를 두 개 남겨 놓은 상태에서 띄어쓰기를 한 번 해 주면 \n이 띄워쓰기로 덮어지며 \n이 없어진다.

다른 scanf()나 gets()도 마찬가지이다. 배열 보다 큰 값을 넣으면 덮어 씌어지니 조심할 것.




2. printf


printf()에서 ()안의 ""는 안에 있는 문자열의 시작 주소를 가져오는 역할을 한다.

그렇게 ""를 통해 전달 받은 메모리 주소로부터 printf 함수는 NULL문자(\0)이 나올 때 까지 출력한다.

이게 왜 중요하냐. 나중에 배울 배열에서 문제가 되는데 


배열은 다른 배열 그리고 지역변수들과 나란한 메모리 주소에 저장된다.

그래서 지정된 배열의 크기 보다 더 큰 값을 넣으면 다른 배열이나 지역변수에 지장이 간다.

그래서 배열의 색인에 대해 유효성을 항상 체크해야 한다.


문자열을 예로 말해 보면 printf() 함수는 전달 받은 메모리 주소로부터 NULL문자(\0)이 나올 때 까지 출력한다.

문자열 a[3]와 b[3]를 만들었다고 해 보자. 이 둘의 메모리 주소는 연결되어 있을 것이다.

a가 앞일 수도 있고 b가 앞일 수도 있는데 a의 메모리 주소가 100이고 b가 103이라고 가정하자.

이 때 문자열을 입력 받아 변수에 집어넣도록 했는데 사용자가 배열의 크기 보다 긴 문자열을 적었다.

a에 "hello"를 적고 b에 "comi"라고 적었다고 하면 a의 메모리 주소가 100인데 hello를 적었기 때문에

NULL 포함 102까지만 들어가야 할 데이터가 지금 h100,e101,l102,l103,o104,NULL,105 105까지 침범했다.

만약 순서가 a의 값을 먼저 입력 받는다면 b가 입력되고 나면 103부터 제대로 다시 덮어 씌워질 것이다.

하지만 b가 먼저 입력을 받았다면 103부터 105 부분까지는 a의 l,o,NULL로 덮어질 것이다.

a가 먼저 입력 받았다고 해서 제대로 동작하느냐 그건 또 아니다. a는 원래 102 부분에 NULL값을 가져야 하는데

102에는 l이 들어가 있고 NULL은 105에 있었다. 하지만 b가 들어오면서 105도 덮어 씌워졌다.

만약 prinf()함수를 이용해 a를 호출하면 NULL이 있는 부분까지 출력되므로 b의 NULL부분이 있는 곳까지 출력될 것이다.

printf("%s", a) 하나만 호출해도 hellocomi가 출력된다는 말이다.

배열은 메모리의 주소를 가리키기 때문에 컴파일러는 배열의 크기에 대한 유효성을 따지지 못 한다.

인덱스의 유효성에 대해 사용자가 직접 따져야 한다는 것이다.

그러니 배열을 사용할 때에 조심하도록 하자. 운이 좋아 제대로 실행되는 경우도 있겠지만

계속 방치하다가는 큰 버그로 이어지고 나중에 고치기 힘들어진다.