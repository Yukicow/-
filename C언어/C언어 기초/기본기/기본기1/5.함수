



함수


1. 함수


함수는 인자를 받아 인자를 이용해 어떤 작업을 취하고 그 작업의 결과값을 반환하는 명령어 모음이다.

c언어에서 함수를 이용할 때에는 함수가 반환하는 값에 대해 정의를 해줘야 한다.

함수의 반환 자료형이 아무 것도 없다면 void 정수형이라면 int 실수라면 float,double 등등

예를 들어 printf()를 실행하는 함수가 있다면 그 함수는 void의 형태를 가질 것이다.

ex) 

void print(){
    printf("프린트 함수입니다.");
}

반환값이 있는 함수는 마지막에 return으로 반환해주는 값을 정의해 주어야 한다.

ex)

int num(){
    printf("넘버 함수입니다.");
    return 10;
}

int a = num();

printf("%d", a);

-> 10




2. 인자(인수)


인자는 함수에 넘겨 주는 데이터를 말한다.

함수는 넘겨 받은 인자를 바탕으로 어떤 작업을 수행하기도 한다.

인자의 자료형은 원하는 자료형으로 정의해 주어야 하며.

값에 의한 호출과 참조에 의한 호출이 있는데 값에 의한 호출은 변수에 저장된 데이터만 복사해 사용하는 것.

참조에 의한 호출은 메모리 주소를 받아 안에 저장된 그 데이터 자체를 이용하는 것이다.

참조에 의한 호출은 데이터 자체를 이용하기 때문에 값이 변할 경우 데이터에 영향을 미친다

ex)

void num_print(int num1, int num2){
    printf("넘겨 받은 인자의 값은 %d와 %d 입니다.", num1, num2);
}



3. return 

return은 함수가 반환하는 값이다.

return을 사용하면 함수가 종료되고 바로 값을 출력한다.

예를 들어 함수 내에서 어떤 조건을 걸고 return값을 정해주면

함수 마지막에 return이 있더라고 그 조건에 해당하는 return값을 출력하고

함수는 종료하게 된다.


return은 함수 뿐만 아니라 if문 for문 while문 등등에서도 빠져나오는데에 사용할 수 있다.

https://www.youtube.com/watch?v=KkAnpk26L_o

이를 이용하여 가독성이 훨씬 좋은 문장을 만드는 영상이다.

앞으로 자주 써먹어도 될 듯 하다.




4. 함수 선언과 정의


함수 선언은 함수가 어떤 형태의 함수인 지를 알려주는 것이고 

정의는 함수 안의 구조를 정의하는 것이다.

함수 선언은 main함수가 실행되기 전에 함수가 정의되지 않았을 때에는

main 함수가 실행되기 전 해주는 작업이다. 미리 이런 함수가 있다고 컴퓨터에 알리는 것이다.

만약 함수가 main함수보다 위에 정의가 되어있다면 선언은 필요 없다.

그럼 무조건 메인함수 위에다 정의하면 되는 거 아님?ㅋ

자 이제 다른 소스코드에 있는 함수를 이용할 때에 우리는 함수를 선언할 필요가 있다.

소스코드는 내가 쓰고 있는 코드에 포함되는 코드들 즉 컴파일 할 때 같이 진행되는 것들이고

헤더파일은 다른 이미 작성된 소스코드 파일들이다. 그래서 그 코드들을 현재 소스코드 내에 포함시킬 때

include를 이용하는 것이다. 같은 소스코드 내에서 여러 파일을 만들면 컴파일 과정에서 컴파일 된다.

이 때 왜 선언이 필요하느냐. 함수가 너무 많아서 보기 안 좋아 내가 다른 소스코드 파일을 만들고

그 안에 함수들을 정의했다고 해 보자. 함수를 작성한 소스코드 말고 다른 소스코드에서 그 함수들을 쓰려면

함수들이 있다는 걸 알려야 하지 않겠는가. 이 함수들을 다른 헤더파일로 만들어서 include를 하는 방법도 있겠지만

굳이? 그렇게 귀찮게 할 이유가 없다. 그냥 main함수 위에 쓸 함수들을 선언해 주기만 하면 된다.



5. 함수 선언이 필요한 이유.


함수 원형은 컴파일러에게 함수의 인터페이스를 알려준다.


1. 만약 프로그램이 매개변수를 제공하는데 실패한다면 함수가 선언되어 있다면 그 선언된 함수의 모습을 보고

에러를 검출해 줄 수 있다. 선언이 안 되어 있다면 프로그램이 정의된 부분을 컴파일러가 직접 찾아다니고

찾은 다음에도 어떤 형태를 가지는 지 인지하고 다시 확인 후 에러를 출력해야 한다.

하지만 미리 인터페이스를 제공함으로써 어떤 부분에 오류가 있는 지 컴파일러가 쉽게 알아낼 수 있게 하는 것이다.

한 마디로 시간 단축이 된다는 것이다.


2. 함수가 계산을 끝내면 레지스터나 특정 메모리에 그 반환값을 저장하는데 선언을 해 놓으면 리턴값의 형태를 알기 때문에

컴파일러는 그 메모리 위치에서 몇 바이트를 꺼내고 어떻게 처리해야 하는지 알고 있다.


3. 이건 좀 확실하게 이해가 될 것 같은데.

함수를 미리 선언하면 컴파일러가 잘못된 인자를 넘겼을 때 알아서 변환을 시켜 준다.

예를 들어 함수 선언을 안 하고 실수형 매개변수로 갖는 함수를 사용했다고 해 보자.

int a = 10;

void print(a);

void pirint(double a){
    printf("%f", a);
}

이렇게 되면 print라는 함수에 대해 알지 못 하는 상태이기 때문에

a가 인자를 전달되는 과정에서 함수로 데이터가 이동한 다음에서야 double형태의 인자가 필요하다는 걸 알 것이다.

이미 보낸 a의 데이터는 필요가 없다. double형태가 아니기 때문이다.

하지만 미리 선언을 해두면 double의 매개변수가 필요하다는 걸 알기 때문에

함수에 값을 보내기 전에 a를 double에 해당하는 실수값으로 변환하여 보낸다.

이미 함수가 어떤 형태를 갖는 지 알기 때문에 인자를 잘못 입력받아도 알아서 맞게 변환해 주는 것이다.

이렇게 함수 선언은 컴파일러에게 많은 도움을 준다.


결론)

함수 선언이 안돼도 일단 진행을 하고 운이 좋아서 맞아 떨어지면 함수가 제대로 작동하긴 할 것이다.

하지만 미리 함수를 선언하면 그 함수에 필요한 인자나 반환값을 컴파일러가 미리 인지하고

발생할 오류에 대해 미리 알 수 있으며 또는 알맞는 형태로 변환을 도와줄 수 있다는 것이다.



6. C와 C++의 함수 선언 차이점.


double cube(double num); 이라는 함수가 있다고 가정했을 때 

만약에 함수 원형을 사용하지 않는 경우에 double z = cube();라고 선언하면 컴파일러는 이것을 통과시킨다.

이 함수가 호출되었을 때 컴파일러는 cube()의 리턴 값이 놓이는 위치를 찾아 보고 

그 곳에 어떤 수가 있든지 간에 그 수를 사용한다. 이것이 C에서 사용하던 방식이다. 

C에서는 함수 원형의 사용이 선택적이기 때문에 함수 원형이 없는 C프로그램도 여전히 작동한다. 

하지만 C++에서는 함수 원형의 사용이 필수이기 때문에 이러한 에러를 범하지 않도록 컴파일러가 사용자를 보호한다.

쉽게 말하면 C++은 조금이라도 발생할 에러를 줄이기 위해 필수적으로 선언을 하도록 만든 것이다.


또한 매개변수의 개수는 맞지만 데이터 형이 불일치 하는 경우

C에서는 매개변수로 int형(16비트) 값을 기대하는 함수에 double형(64비트) 매개변수를 전달하면 

그 함수는 double 형의 64비트 중 앞부분 16비트만 참조해서 그것을 int형 값으로 처리한다. 따라서 이상한 에러가 발생한다. 

그러나 C++에서는 잘못된 산술 데이터 형이 전달되면 함수 원형에 정의되어 있는 데이터 형으로 자동 변환시켜 준다. 

하지만 발생할 수 있는 모든 에러를 자동 데이터 형 변환이 막아주는 것은 아니다. 

값을 바르게 변환할 수 없거나 또는 정수를 구조체나 포인터 형으로 변환하는 일은 하지 않는다.