





1. 파일 입출력


파일 입출력은 파일을 열고 데이터를 출력 또는 입력하는 것이다.

파일을 여는 형식은 r,w,a 읽기,쓰기(덮어쓰기),추가하기가 있다. 

바이너리 형식의 파일을 불러들일 때에는 뒤에 b를 붙여야 한다

ex) rb,wb,ab



2. 파일 여는 방법


File* 파일 포인터 변수 이름 = fopen("파일위치(보통 c:\\를 이용함) 파일이름.형식" 또는 하드웨어,"모드");

File 형의 포인터를 만들어 파일의 메모리 주소를 받아 저장하는 것으로 사료된다.



3. 파일 열고 활용


3-1 파일 내용 추가


1. char 내용 출력

fputc를 이용한다. 표준 입출력 putchar의 파일 입출력 버전이다. 

fputc('문자', 파일 포인터 변수 이름 또는 하드웨어); 형태로 사용할 수 있다.


2. string 내용 출력

fputs를 이용한다. 표준 입출력 putstring의 파일 입출력 버전이다.

fputs("내용", 파일 포인터 변수 이름 또는 하드웨어); 의 형태로 사용할 수 있다.


3. fprintf 

표준 입출력 printf의 파일 입출력 버전이다.

일반적으로 printf처럼 정형화된 포멧에 대해 파일을 출력할 때 fprintf를 사용한다.

위의 char나 string에 해당하는 것 모두 fprintf를 통해 쓰는 것이 가능하다.

fprintf(파일 포인터 변수 이름 또는 하드웨어 ,"문자열 또는 포멧", 포멧에 대한 파싱(포멧에 변수)); 형태로 사용할 수 있다.



3-2 파일 내용 불러오기


1. char 내용 불러오기

fgetc를 이용한다. 표준 입출력 getchar의 파일 입출력 버전이다.

fgetc(파일 포인터 변수 이름 또는 하드웨어);의 형태로 사용할 수 있다.

// getchar()는 엔터키를 getch()는 키 아무거나 입력시 동작한다.


2. string 내용 불러오기

fgets를 이용한다. 표준 입출력 gets의 파일 입출력 버전이다.

fgets(값을 저장할 변수, 저장할 변수의 크기, 파일 포인터 변수 이름 또는 하드웨어); 형태로 사용할 수 있다.

// 최신 vs에서는 gets는 표준에서 빠지고 get_s를 권장한다고 한다. 변수의 크기를 지정하는 식이 없기 때문이다.

// 비교적 안정적인 저장할 변수의 크기를 지정해야 하는 get_s를 이용하라는 것이다.



3. fscanf 

표준 입출력 scanf의 파일 입출력 버전이다.

fscanf(파일 포인터 변수 이름 또는 하드웨어 ,"문자열 또는 포멧", 포멧에 대한 파싱(포멧 내용을 저장할 변수))

위의 형태로 사용할 수 있다.



4. 파일 닫기

파일을 연 후에 작업이 끝나면 무조건 닫아 줘야 한다.

코드가 작동될 때 파일이 열려있는 상태가 유지되기 때문에 

데이터 손실이나 이상한 정보가 담길 수도 있다. 

fclose(변수이름); 으로 파일을 닫을 수 있다.



5. 기본적인 파일 열고 닫는 형태

기본적으로 파일을 열고 닫을 때 많이 사용하는 구조가 있는데

FILE* file = fopen("~~,"");

if(file == NULL){
    printf("오픈 실패");
}

파일이 제대로 실행됐는 지 확인하기 위해서

위와 같은 조건문을 사용한다.


while(변수 == EOF){

    ~~
    ~~
}

파일에 불러올 데이터가 더 없을 때 까지 반복할 때

위의 형태로 많이 사용 된다.

EOF는 End Of File의 약자로 파일이 끝남을 의미하며

-1이 EOF로 typedef된 것이라서 -1과 같다.