




어셈블리어



어셈블리어는 사용자가 이해하기 어려운 기계어 대신에 

명령 기능을 쉽게 연상할 수 있는 기호를 기계어와 1:1로 대응시켜 코드화한 기호 언어이다.

어셈블리어로 짜여진 코드들은 어셈블러를 통해 기계어로 변환된다.




어셈블러



어셈블리어로 작성된 코드를 읽어드린 후 프로세서가 이해할 수 있는 기계어로 바꾼다.


어셈블러에는 세 가지 종류가 있는데 두 가지만 알아두자.


1. 단일 패스 어셈블러 : 원시 프로그램을 하나의 명령문씩 읽는 즉시 

기계어로 번역하여 목적 프로그램으로 만듭니다.



2. 이중 패스 어셈블러 : 원시 프로그램을 앞에서부터 끝까지 읽어서 1단계의 작업을 수행한 후 

다시 처음부터 읽으면서 1단계에서 수행한 결과를 사용하여 완전한 목적 프로그램을 만듭니다.



3. 크로스 어셈블러 : 현재 사용하는 컴퓨터와는 다른 명령 형태로 동작하는 컴퓨터에서 사용할 

프로그램을 어셈블 할 때 사용되는 어셈블러를 말합니다. 

현재 어셈블하는 컴퓨터가 아닌 어셈블된 프로그램을 실행시킬 컴퓨터에 맞게 목적 프로그램을 생성합니다.




어셈블



어셈블러는 어셈블리어로 작성된 코드를 읽어 들인 후

해당 ISA의 명령어로 이뤄진 오브젝트 모듈을 생성한다. 

이러한 번역 과정을 '어셈블'이라고 부른다.



*중요)


컴파일이란 특정 언어를 다른 언어로 바꿔주는 것이다.

보통 고급 언어를 기계어로 바꿔주는 기능을 한다.

그 과정 중에 어셈블리 코드로 변환되는 과정이 있는데 이 때 문제가 좀 생겨.

ISA라는 개념을 좀 알아야 하는데. 

ISA는 프로세서가 실행할 수 있는 지원되는 명령 또는 커맨드의 집합을 뜻한다.

만들어진 어셈블리 코드가 바이너리 코드로 바뀔 때 

이 ISA에서 규정하는 메뉴얼 대로 변환이 된다 말이지. 근데 이 ISA구조가 프로세서별로 다 달라서

어셈블리 코드도 프로세서 별 ISA 메뉴얼에 맞게 다르게 작성돼야 하는데.

컴파일을 할 때는 당연히 현재 사용되고 있는 프로세서에 맞는 어셈블리어의 형태로 변환이 된다.

그러니 이 컴파일된 어셈블리어를 다른 프로세서에서 어셈블하려 하면 안 된다.


한 마디로 어셈블리어는 정형화 된 것이 없어 프로세서마다 다르다는 것이다.

비슷한 다른 언어라고 보는 게 맞는 수준이다.




여기 부터는 조금 부가적인 지식? 딱히 중요한 건 아님.


프로세서 별로 ISA의 명령체제가 다르다는 건 이해했지? 

근데 다른 건 명령 뿐만이 아니야.

'구조'도 달라 intel 이나 AMD로 유명한 x86는 CISC구조를 사용하고

ARM 프로세서는 RISC 구조를 사용해

CISC는 (Complex Instruction Set Computing) RISC는 (Reduced Instruction Set Computing) 이다.


프로세서는 실행할 수 있는 일정량의 '지시사항'이나 '명령'을 이해할 수 있다.

이는 해당 프로세서의 디자이너에 따라 결정 된다. 

CISC는 RISC보다 이해할 수 있는 지시사항이 많다

RISC의 기본 개념은 '프로세서가 많은 작업을 수행하면 안 된다!' 라는 것이야.

많은 작업을 수행하는 것보다 기본 작업을 빠르게 하는 것이 중요한 거지.

가장 자주 사용되는 명령어만으로 개수를 줄임으로써 대부분의 활용업무 면에서 

소요되는 시간을 줄일 수 있는 방법이 고안되었는데 그게 RISC 이다.


반대로 CISC는 복잡한 작업을 수행할 수 있지만 좀 느릴 수 있고.

하지만 아주 먼 옛날에 어셈블리 코드를 직접 써가야 했던 시대에는

코드를 짧게 쓸 수 있는 CISC가 더 적합했겠지. 메모리도 부족했을 테니까.


하지만 이제는 컴파일러도 있고 메모리 양도 충분한 시대잖아.

그래서 요즘 신경 쓰는 부분은 배터리 수명이야.

프로세서가 수행할 게 복잡해 질 수록 에너지 요구량도 높아져.

RISC는 CISC처럼 기능도 많지 않아서 필요한 트렌지스터도 적어서 가격도 싸고 크기도 작아.

그래서 RISC가 모바일 기기에서 각광받는 이유야.


그럼에도 왜 아직 CISC가 많이 사용될까?

최근에는 서로의 장점을 배우면서 RICS 와 CISC의 경계가 좀 희미해 졌다고 해.

근데 역호환성에 대해서도 생각을 해야 하는 게 CISC는 오랫동안 사용되어 왔어.

x86에서 ARM 으로 전환하는 게 쉬운 일이 아니야.

아직도 애플이 컴퓨터에서 호환이 ㅈ같은 이유도 이거 때문이야.

애플 제품이 특정 부분에서 빠르게 작동하는 것도 이것 때문이고.

하지만 빠르게 변화가 일어나고 있는데 ARM 회사가 갖는 비즈니스 모델 덕분이야.

ARM 회사는 칩을 직접 생산하지 않아. 걔네는 IP 라이선스를 하지.

그래서 다른 ARM 회사에서 돈을 내고 가져와서 맞춤형으로 제작이 가능해.

하여튼 요즘 대기업들이 ARM을 기반으로 뭔가 만들기 시작했다.

근데 어쨋든 경계가 모호해지고 있긴 하다.