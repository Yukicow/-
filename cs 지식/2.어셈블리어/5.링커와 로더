



어셈블러가 두 번의 스캔 과정을 거치면 0과 1로 이뤄진 오브젝트 모듈(Object Module)을 생성한다. 

해당 오브젝트 모듈에는 프로그램의 기계어 코드와 데이터뿐 아니라 

프로그램의 시작 주소(.ORIG로 명시)와 심볼 테이블도 담긴다. 

그러나 이렇게 생성된 오브젝트 모듈은 하나의 완전한 실행 가능한 파일이라고 보장할 수 없다.

하나의 프로그램이 여러 개의 오브젝트 모듈로 구성되었을 수도 있기 때문이다. 

가령 시스템이 제공하는 라이브러리 모듈이나 다른 프로그래머가 작성한 모듈이 사용됐을 수도 있으니까.



그래서 필요한 과정이 링커이다.



1. 링커(Linker)


한 프로그램을 구성하는 여러 오브젝트 모듈을 합쳐서 

하나의 실행 가능한 파일(Executable Image)을 만들어주는 프로그램이 바로 링커(Linker)이다.

그리고 그 과정을 링킹(Linking)이라고 부른다. 다음과 같은 상황을 가정해보자. 


모듈 A에 정의되어 있는 레이블 LABEL1을 모듈 B에서 사용한다면, 

모듈 B에는 ".EXTERNAL LABEL1"(LABEL1은 외부에 있다)와 같은 코드를 작성하여 어셈블러에게 

모듈 B의 심볼 테이블에는 LABEL1에 대한 정보가 없다는 메시지를 전달해야 한다. 

그러면 어셈블러는 모듈 B를 어셈블 할 때 

우선 LABEL1의 값을 0으로 채워 넣어서 오브젝트 모듈을 생성하게 된다. 

그리고 나중에 링커가 모듈 A와 모듈 B를 링킹 할 때

모듈 A의 심볼 테이블에서 LABEL1의 메모리 주소를 알아내어 

모듈 B에서 0으로 채워 넣었던 부분을 수정함으로써 실행 가능한 파일 하나를 만들게 되는 것이다.




로더 (Loader)


실행 가능한 파일을 실행시키는 운영체제의 프로그램이 바로 로더(Loader)이다. 

하드디스크에 존재하는 실행 가능한 파일의 코드와 데이터를 메모리에 올리고

CPU의 제어를 해당 프로그램의 시작 주소로 옮겨줌으로써 프로그램을 실행하게 된다.


실행 파일이 실행되는 원리죠? cpu의 제어를 프로그램 시작주소로 옮기면 그 프로그램이 

처음 부터 끝까지 싸악~ 진행 되는 거지.