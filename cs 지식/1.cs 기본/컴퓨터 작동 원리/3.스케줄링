


스케줄링


CPU를 사용하려고 하는 프로세스들 사이의 우선순위를 관리하는 작업.

자원을 어떤 프로세스에 얼마나 할당하는지 정책을 만드는 것.


프로세스가 작업을 수행하려면 스케줄러로부터 cpu를 할당 받아야 한다. # 스케줄러는 *os에 포함된다.

할당을 받는 건 순서에 의해 받을 수 있고, 처리하게 되는 '시간'을 배정을 받는다

그리고 그런 스케줄러는 프로세스에 대해서 어떤 것을 먼저 수행할 지에 대한 관리를 하는데

이것을 스케줄링이라고 한다. 


스케줄링의 방식에는 preemptive scheduling(선점 스케줄링)과 non-preemptive scheduling(비선점 스케줄링)가 있는데

현재 많은 os에서 채택하고 있는 것이 preemptive scheduling(선점 스케줄링)으로

높은 우선 순위 프로세스가 발생 되었음을 알았을 때, 

현 실행 프로세스로부터 강제로 CPU를 회수하는 것을 말한다.

non-preemptive scheduling(비선점 스케줄링)은

이미 사용되는 cpu를 빼았지는 못하고 사용이 끝날 때 까지 기다리는 스케줄링 기법이다.

할당 받은 cpu는 끝날 때 까지 사용한다.

두 스케줄링 안에도 여러 종류가 존재한다.



스케줄링이 필요한 이유


라면을 끓일 때, 물이 끓을 때까지 멍하니 기다리지는 않을 것이다. 

라면 봉투를 미리 뜯어 놓기, 스프 미리넣기, 각종 재료를 미리 준비하기 등을 물이 끓는 것을 기다리면서 할 것이다. 

이것은 예로 CPU스케줄링을  이해할 수 있다.

프로세스는 작업(Job)을 완료할 때까지 다양한 상태가 되는데, 우리가 주목해야할 것은 'Waiting'이다. 

 
프로세스가 CPU를 점유하여 작업을 수행하는 도중 I/O(입출력 = 마우스,키보드,모니터) 또는 *Interrupt(밑에 용어 정리)가 발생하면 
 
일시적으로 프로세스는 CPU를 사용하지 않게 된다. 하지만 계속 점유하고 있다. 
 

이러한 상황을 줄여, CPU를 최대한 활용하면 시스템의 성능 개선을 꾀할 수 있다. 

결국, "어떻게 프로세스들이 CPU를 효율적으로 사용하게 할 것인가?" 라는 고민에서 CPU 스케줄링이 출발한다고 할 수 있다.



스케줄링이라는 것을 배웠으니 이제 스레드와 프로세스가 좀 더 이해가 될 것인데.

결론적으로 말하면 하나의 cpu는 한 가지 프로세서만 처리할 수 있고 이 때 발생하는 비효율을

효율적으로 사용하기 위해 중간중간 짬나는 시간을 다른 프로세스를 실행하는데 사용하는 방안이 나왔고

이것을 순서를 관리하는 것이 스케줄러이다. 그리고 이런 현상 덕분에 한 번에 여러 프로세스가 돌아가고 있는 것처럼

보여지고 있는것 뿐이다. 코어가 많다는 것은 cpu의 수를 의미하기도 하기 때문에 

한 번에 병행 가능한 프로세스 수가 그만큼 증가한다는 것이다. 그리고 늘어난 코어수 만큼

그 코어들 내에서도 스케줄링이 일어나고 여러 프로세스가 동시에 일어날 수 있고.

한 마디로 코어의 증가는 컴퓨터가 받아들일 수 있는 최대 프로세스의 총 수가 늘어난 것이라고 볼 수 있다.

멀티 프로세싱과 멀티 스레딩은 그저 프로세스의 과정을 

여러 프로세스를 이용할 것이냐 여러 스레드를 이용할 것이냐 하는 방식일 뿐이다.

예를 들어 게임 프로그램을 하나 실행한다고 하면 그 게임 프로그램이 여러 프로세스로 

실행될 지 여러 스레드로 실행될 지의 차이일 뿐이다. 

그 게임 프로그램이 하나의 cpu코어나 스레드를 독점하는 형식이 아니고 

계속 스케줄러에 의해 실행됐다 안 됐다 하는 것. cpu와 스레드는 여러 프로세스가 공유한다.


문제는 이 과정이 어떻게 일어나느냐 인데.

이 원리를 알아 보도록 하자.





ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ용어 정리ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ



인터럽트



CPU의 정상적인 프로그램 실행 을 방해했다는 의미다.

내부 인터럽트

하드웨어 고장(Hardware Interrupt)

컴퓨터 고장

데이터 전달 과정에서의 비트 오류

전원이 나간 경우

실행할 수 없는 명령어 : 기억장치에서 인출한 명령어의 비트 패턴이 정의되어 있지 않은 경우

명령어 실행 오류 : 나누기 0을 하는 경우

사용 권한 위배 : 사용자가 운영체제만 사용할 수 있는 자원에 액세스하는 경우



외부 인터럽트

외부 인터럽트는 주로 입출력장치 에 의해 발생된다.

타이머 인터럽트 : 타이머가 일정한 시간 간격으로 중앙처리장치에게 인터럽트를 요청

입출력 인터럽트 : 속도가 느린 입출력장치가 입출력 준비가 완료되었음을 알리기 위해 인터럽트를 요청