

저급 언어(low level language)

저급 언어는 기계 중심의 언어이다

종류로는 기계어와 어셈블리어가 있다. # 두 개가 다임

기계어는 말 그대로 기계어 그 자체이고

어셈블리어는 사용자가 이해하기 어려운 기계어 대신에 

명령 기능을 쉽게 연상할 수 있는 기호를 기계어와 1:1로 대응시켜 코드화한 기호 언어이다.

어셈블리어로 짜여진 코드들은 어셈블러를 통해 기계어로 변환된다.


그리고 기계어는 CPU가 채택한 ISA에 따라 다 다르기 때문에 

어셈블리어의 명령어 역시 통일된 규격이 없다.


어셈블러는 타 컴파일러와는 다른 취급을 한다. 

그러나 이것만 구현하게 되면 다양한 종류의 어셈블러가 나올리는 당연히 없고, 

실제로는 어셈블러마다 다른 문법을 지원한다. 

크게는 Intel, AT&T로 나뉘고 매크로 등의 기능을 지원하는가/어떤 형식인가 등으로 나뉜다.



어셈블리어도 결국은 기계어를 사람이 보기 편하게 만들기 위해 만들어진 언어이기 때문에

기계어의 단점을 보완한 언어라서 저급과 고급 사이라는 게 좀 더 맞지만 기계어와

아주 가까운 언어라서 저급 언어 취급을 받는 것 같다.





고급 언어(high level language)


사람 중심의 언어이다.

실행을 위해서는 번역하는 과정이 필요한 언어라고 할 수 있다.

상이한 기계에서 소스 수정 없이 실행이 가능함





객체 지향 언어

객체 지향 언어도 고급 언어 안에 포함되는 것들이다.


객체 지향 언어란 현실 세계의 현상을 컴퓨터상에 객체(Object)로 모델화함으로써

컴퓨터를 자연스러운 형태를 사용하여 여러 가지 문제를 해결할 수 있는 언어이다.



객체지향 언어의 주요 특징


캡슐화 (Encapsulation) : 데이터와 메소드를 클래스 하나로 묶어 

객체 내부에서 필요로 하는 정보를 외부로부터 은닉시키고, 매소드를 통한 접근을 제공한다.



추상화 (Abstraction) : 자료 추상화는 불필요한 정보는 숨기고 중요한 정보만을 표현함으로써 

프로그램을 간단히 만드는 것이다.



상속 (Inheritance) : 이미 정의되어 있는 상위 클래스와 메소드를 비롯한 

모든 속성을 하위 클래스가 물려받는 것이다.



다형성(Polimorphism) :다형성 개념이란 어떤 한 요소에 여러 개념을 넣어 놓는 것으로 

일반적으로 오버라이딩(같은 이름의 메소드가 여러 클래스에서 다른 기능을 하는 것)이나 

오버로딩(같은 이름의 메소드가 인자의 갯수나 자료형에 따라서 다른 기능을 하는 것)을 의미한다.

다형성 개념을 통해서 프로그램 안의 객체 간의 관계를 조직적으로 나타낼 수 있다.