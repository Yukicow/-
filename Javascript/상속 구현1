




prototype을 이용해 자바스크립트 상속을 직접 구현해 보기 위해서는

선행되어야 하는 지식이 있는데, prototype과 [[Prototype]], __proto__이다.



우리가 function을 새로 정의해서 function 객체를 생성하면 함께 생성되는 객체가 있는데 그게 바로 Prototype객체이다. 

즉, function을 정의하면 function에 대한 객체 하나와 그와 함께 만들어지는 Prototype객체 하나, 총 두 개가 생성되는 것이다.

function객체에는 prototype이라는 프로퍼티가 기본으로 존재하는데, 이 프로퍼티는 함께 생성된 Prototype객체를 가리킨다.

반대로 함께 생성된 Prototype객체에는 기본으로 constructor라는 프로퍼티가 존재한다.

constructor는 자신과 함께 만들어진 function을 가리키는 Prototype객체의 프로퍼티이다.

두 객체 모두 서로를 참조하는 속성을 갖고 있는 것이다.

이렇게 서로 prototype과 constructor로 참조하고 있는 상태를 앞으로 '연결된' 상태라고 표현하겠다.


Prototype객체가 만들어지는 이유는 이 function객체들을 이용해서 상속을 구현할 때 

부모 객체에 대한 정보를 담고 있는 객체가 필요한데, 그게 바로 Prototype객체이기 때문이다.

Prototype객체에 우리가 부모 객체로 지정하고 싶은 객체의 정보를 추가하면 

자식 객체가 생성될 때 그 정보들을 추가하도록 하는 것이다.


위의 내용에서 prototype에 대한 내용은 나왔다.

prototype은 function객체에서 함께 생성된 Prototype객체를 참조하기 위한 프로퍼티이다.


그럼 [[Prototype]]은 무엇일까?

[[Prototype]]은 쉽게 특정 객체를 만들어낸 function객체와 연결된 Prototype객체를 가리키는 것이라고 보면 된다.

여기서 __proto__라는 개념도 함께 짚고 가면, 녀석은 [[Prototype]]에 접근할 수 있도록 해 주는 프로퍼티이다.


예시를 들어 보면 

function A() {

}

const a = new A();

에서 A라는 함수를 통해서 만들어진 a라는 객체는 __proto__라는 프로퍼티를 갖는다.

사실 모든 객체(함수도 포함)는 __proto__라는 프로퍼티를 갖는다. 다만 가리키는 대상이 다를 뿐이다.

여기서 a의 __proto__가 가리키는 대상은 자신을 만들어낸 생성자 함수인 A의 prototype인 것이다.


개념적으로 보면 prototype과 __proto__는 약간의 차이는 있지만 

사실상 동작은 "생성자.prototype === 생성된객체.__proto__" 라고 볼 수 있다.

그러니 그냥 "생성자.prototype === 생성된객체.__proto__"라고 이해하는 게 훨씬 효율적이다.


prototype 프로퍼티에 초기화 되어 있는 Prototype 객체에 값을 추가하거나 새롭게 재초기화 하면

해당 객체에 있는 프로퍼티들은 prototype chaining이라는 원리에 의해 참조될 수 있기 때문에

마치 상속이라는 개념을 구현할 것처럼 동작하게 할 수 있다.



예를 들어 

function Parent() {
    name = "hello";
}

function Child() {
}

위 두 개의 함수를 정의 했을 때, Chlid가 Parent를 상속받게 하기 위해서는

Child.prototype.name = "hello" 이런식으로 기존의 Prototype객체에 직접 값을 추가해도 되고

Parent라는 함수처럼 특정 형태의 객체를 생성할 수 있는 생성자 함수를 미리 만들고 

Child.prototype = new Parent() 이런 식으로 새로운 객체를 초기화 하는 방법이 있다.


사실 두 번째 방법에는 문제점이 하나 있다.

우리가 prototype에 new Parent()를 통해서 부모를 직접 지정해 주었는데

이렇게 되면 기존에 prototype에 존재하는 Prototype객체가 완전히 덮어씌어진다는 것이다.

프로퍼티에 값을 재초기화를 하는 것이기 때문에 당연하다.

근데, new Parent()로 생성되어 있는 객체는 일반 객체이기 때문에 

Prototype객체에 기본으로 존재하는 constructor라는 프로퍼티가 없다.

위에서 function객체와 Prototype객체가 서로를 참조하고 형태인 '연결된' 상태에서 

Prototype객체가 function객체를 참조하는 부분이 없어진 것이다.

즉, 연결이 끊어졌다고 볼 수 있다.


연결이 끊어지면 어떤 문제가 발생하는 지는 constructor의 쓰임을 보면 알 수 있다.

constructor는 어떤 자식 객체가 A가 있을 때 A의 부모 객체를 생성한 생성자를 나타낼 때 참조되는 값이기도 하다.

어떻게 보면 타입과 비슷한 개념이라고도 볼 수 있다.

자바스크립트에는 타입이라는 개념은 없지만 생성자를 명시한다는 것은 어떤 생성자로부터 만들어진 객체인 지를 명시하는 개념이기 때문에 

사실상 타입과 비슷하다고 볼 수 있다.


위의 예시에서 Parent는 Child의 부모이다.

const child = new Child() 로 자식 객체를 하나 생성해 보자.

child라는 객체의 부모 객체는 [[Prototype]]가 가리키고 있는데 child.__proto__로 접근 가능하다.

여기서 [[Prototype]]이 나타내고 있는 정보에 문제가 생길 수 있다.

부모 객체가 어떤 생성자로부터 생성되었는 지를 알아내기 위해서는 

자식 객체의 Prototype객체의 __proto__의 constructor를 찾으면 된다.

말이 조금 복잡하니 조금 풀어서 설명하면 

부모 객체를 나타내는 Prototype객체의 constructor는 자식 객체의 생성자를 가리키는 것과 같기 때문에

이 원리를 적용하면 부모 객체의 Prototype 객체의 constructor가 부모 객체의 생성자가 되는 것이다.


하지만 우리는 위에서 Child.prototype = new Parent()로 Prototype객체를 완전 덮어씌워 버렸고

new Parent()로 생성된 객체에는 constructor 프로퍼티는 존재하지 않는다.

그럼 이것은 존재하지 않는 프로퍼티에 접근하는 것과 같다.

이렇게 되면 prototype chaining이 동작하면서, 

Prototype 객체의 __proto__를 계속 참조해 나가는 식으로 constructor 프로퍼티를 찾을 것이다.


__proto__는 모든 객체에 존재하니 당연히 기존에 생성되었던 Prototype 객체에도 있고 new Parent()로 생성된 객체에도 있다.

여기서는 new Parent()로 생성된 객체가 Prototype객체가 되었으니 이 객체의 __proto__가 chain의 대상이 된다.

그럼 new Parent()의 __proto__는 누구를 가리키고 있을까?

바로 Object이다.

Parent은 따로 부모를 설정해 주지 않았기 때문에 Parent의 Prototype객체는 

Parent와 함께 생성된 기본으로 제공되는 Prototype객체일 것이다. 

즉, new Parent()를 통해 생성된 객체의 __proto__ 프로퍼티가 가리키는 대상은 기본 Prototype객체이고 이는 Object이다.

기본으로 생성되는 Prototype객체의 constructor프로퍼티는 함께 만들어진 함수를 가리키니 Parent를 가리키고 있을 것이다.

그럼 constructor가 가리키는 대상을 부모 객체의 생성자로 한다고 했으니 Parent라는 함수가 child의 부모 객체의 생성자인 것이다.


[[Prototype]]은 자식 객체의 부모 객체를 나타내는 것이니 위의 경우 

child의 부모 객체인 [[Prototype]]은 Parent가 되고 Child.prototype에는 new Parent()를 초기화 해 놓았기 때문에

name이라는 값도 chain에 의해서 제대로 접근이 가능할 것이다.

즉, 상속이 제대로 이루어졌다고 볼 수 있다.

"뭐예요 문제 없네요" 라고 할 수 있다.

맞다. 위의 경우는 문제가 없다.

하지만 여기서 중간에 상속 대상을 하나만 더 추가해 보도록 하자.



이번에는 하나의 함수를 더 추가하자.

function KingParent() {
}

function Parent() {
    name = "hello";
}

function Child() {
}


Parent.prototype = new KingParent()로 설정하고

Child.prototype = new Parent()로 설정한다.

const child = new Child();

그럼 마치 Parent의 부모는 KingParent이고 Child의 부모는 Parent처럼 보인다.

실제로 new Child를 통해 객체를 생성하고 로그로 찍으면 어떻게 보일까?

정답은 Child의 [[Prototype]]은 모두 KingParent로 나온다.


위의 원리를 다시 순차적으로 적용해 보면,

먼저, Parent의 Prototype객체로는 new KingParent()로 새롭게 덮어 씌워졌고

Child의 Prototype객체도 new Parent()로 새롭게 덮어 씌워졌다.

그럼 Child와 Parent의 Prototype객체들에는 모두 constructor 프로퍼티가 없다.

[[Prototype]]에서 부모 객체의 생성자를 나타낼 때에는 부모 객체의 Prototype객체의 constructor를 찾는다고 했다.

그럼 Child에 있어서 부모 객체는 new Parent()이고 new Parent()로 생성된 객체의 Prototype 객체는 현재 new KingParent()이다.

그럼 new KingParent() 객체의 constructor 프로퍼티를 참조하면 child라는 객체의 부모 객체가 어떤 생성자에서 나타났는 지 알 수 있다.

의도대로라면 Parent가 나와야 한다.

하지만 new KingParent() 객체에는 constructor 프로퍼티가 없다고 했다.

그럼 결국 다시 chain에 의해서 new KingParent()의 __proto__를 참조하고 그 객체의 constructor를 찾게 된다.

KingParent는 부모가 없기 때문에 new KingParent()의 __proto__는 Object이다.

기본으로 생성된 Prototype객체라는 것이다.

그리고 위와 같은 원리로 이 Prototype객체의 constructor프로퍼티는 함께 생성되었던 KingParent라는 함수를 가리킨다.

그럼 child객체의 부모의 생성자가 Parent가 아니고 KingParent가 되어버린다.

이런 원리는 계속해서 적용되기 때문에 중간에 상속의 주체가 늘어나도 가장 최초에 상속을 시작한 생성자가 

모든 객체에 대해서 [[Prototype]]의 생성자가 되어 버린다.


물론 동작에서 보면 크게 문제는 없을 것이다.

[[Prototype]]이 나타내는 생성자의 종류만 엉뚱해지는 것이지, 

prototype이라는 프로퍼티에 부모 객체와 똑같은 형태의 객체 자체는 제대로 초기화되어 있고

chaining이 일어날 때는 __proto__를 참조하기 때문에 문제없이 프로퍼티에 접근은 가능하다.

말 그대로 생성자 타입에만 문제가 발생하는 것이다.

하지만 이러한 생성자 타입 명시의 오류는 크게 위험한 경우가 있을 수도 있다.

예를 들어 객체의 constructor함수를 이용해서 객체를 생성하려할 때이다.

constructor가 제대로 정의되어 있지 않으면 예상과 다른 객체가 생성될 수 있다.

child.constructor()을 통해서 객체를 생성했더니 KingParent가 나오는 문제가 발생할 수 있다는 것이다.

[[Prototype]]에 명시된 생성자는 constructor로부터 얻어오는 것이니 자식 객체의 constructor를 호출했을 때 생성되는 객체는

[[Prototype]]에 명시된 생성자 함수로부터 생성되는 객체와 같아져 버린다.

객체를 사용하는 사람 입장에서 당황스러울 수 있으니 꼭 constructor함수를 적절하게 초기화하도록 하자.



위처럼 javascript는 함수 객체와 Prototype객체의 연결성을 보장해 주지 않는다.

이것을 다루는 것은 완전한 개발자의 몫이다. javascript의 자유도에서 생길 수 있는 문제이기도 하다.

그러니 우리는 자바스크립트의 Prototype개념을 사용할 때 적절하게 constructor와 prototype을 활용할 줄 알아야 한다.

위에서 말한 문제점을 해결하기 위해서는 Prototype객체에 적절하게 constructor를 다시 초기화해 주면 된다.

위의 원리를 이해했다면 다루는데 문제는 없을 것이다.


어차피 최근에는 class라는 것이 생겨서 그걸 쓰면 된다.

사실 위의 내용은 class가 나오면서 몰라도 되는 부분이긴 하지만 

class가 실제로 어떤 식으로 구현되어 있는 지 원리를 알면, 또 그렇지 않더라고 javascript를 제대로 다룸에 있어서

prototype의 개념을 정확히 알고 가는 것은 중요할 것이다.


슬프게도 아직도 끝나지 않은 문제가 있다.

그것은 다음 내용에서 이어서 하도록 하자.







