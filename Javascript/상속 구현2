



자바스크립트는 객체가 갖고 있지 않는 프로퍼티에 접근할 경우, 해당 객체를 생성한 생성자의 prototype을 참조한다. 

어떤 객체가 있을 때 해당 객체에 없는 프로퍼티에 접근하면 

해당 객체를 만들어낸 생성자의 prototype(= __proto__)에 접근해서 프로퍼티를 찾아 본다는 것이다.

그리고 이러한 과정은 계속해서 chain형식으로 이어진다.

예를 들어 특정 prototype에서도 찾지 못 했다면, 그 prototype에 초기화되어 있는 값도 객체이기 때문에

__proto__ 프로퍼티를 갖고 있을 것이고 그 프로퍼티를 통해 다시 Prototype객체를 참조하는 형태를 계속 반복하는 것이다.

이러한 체인을 이용해서 prototype을 이용해서 마치 상속을 받은 것처럼 객체를 만들 수 있는 것이다.


위까지가 전 내용에서 배운 것을 정리한 것이다.

이 때 만약 위의 내용을 보자마자 이런 생각이 들었다면 당신은 나와 같은 고수일 확률이 높다.

"그럼 객체를 상속받으면 다 같은 부모객체를 참조하게 되는 거 아니에요!?"

맞다.

그래서 prototype에 부모에 해당하는 객체를 단순 초기화 하는 방식으로는 상속 구현에 한계가 분명히 존재한다.


위의 말이 이해가 안 된 사람을 위해 예시를 들어 보면

위의 Parent와 Child를 보면 알겠지만 Child가 Parent를 상속받게될 경우

모든 Child의 name프로퍼티의 값은 "Parent"가 되어 버린다.

왜냐하면 모든 Child객체들은 name이라는 프로퍼티를 갖고 있지 않기 때문에 

체인에 의해 Child의 prototype에 있는 name값을 참조하기 때문이다.


Parent생성자를 조금 변형해 보자.

function Parent(name) {
    this.name = name;
}

이제는 name을 매개변수로 갖는 생성자이다.

그리고 name은 this.name에 초기화되는 형태이다.


new의 동작원리를 적용해 보면

function Parent(name) {
  // this = {};  (빈 객체가 암시적으로 만들어짐)
    this.name = name;
  // return this;  (this가 암시적으로 반환됨)
}

this라는 객체의 name이라는 프로퍼티가 생성되고 인자로 받은 name값이 초기화된다.

그리고 반환된 this객체는 Child.prototype에 초기화되는 것이다.

new Child()로 생성된 객체들은 name이라는 프로퍼티가 없기 때문에 

name에 접근하면 모두 Child.prototype.name으로 접근하게 되는 것이다.

즉, 각 객체에 대한 name을 갖는 게 아니라 prototype에 초기화되는 부모 객체가 name이라는 프로퍼티를 가질 뿐이다.


물론 각 객체마다 name의 속성값을 다르게 주고 싶다면 "Child객체.name = ~~" 이런식으로 초기화하면 된다.

여기서 또 의문이 드는 사람이 있을 수 있다.

"아니 Child객체.name = ~~ 으로 값을 초기화하면 'Parent'가 바뀌는 거니까 모든 Child객체의 name값이 함께 바뀌잖아요!"

이렇게 헷갈려 할 수 있지만 실제론 그렇지 않다.

위의 내용을 제대로 이해했다면 조금만 생각해 보면 쉽게 이해가 될 내용이지만 조금 설명을 더해 보도록 하겠다.


위에서 Child 생성자를 통해 생성된 객체의 프로퍼티에 name이 없으면 

각 객체의 __proto__를 통해서 Child 생성자의 prototype의 name을 참조한다고 했다.

Child.prototype은 현재 new Parent()로 초기화된 상태이기 때문에 Child.prototype.name은 쉽게 생각해서 new Parent()의 name이다.

하지만 우리가 Child객체.name을 통해서 값을 초기화하는 것은 Child객체에 새롭게 name이라는 프로퍼티를 정의하고 값을 초기화하는 것이다.


Object를 예시로 들면 

const obj = {}

obj.name = "name"

위와 같은 맥락이라는 것이다.

그러니 Child객체.name은 Child객체에는 없는 name프로퍼티가 새로 생기고 값이 초기화되는 것이다.

그럼 이제 Child객체에는 name이라는 프로퍼티가 생겼기 때문에 Child.prototype에 정의된 name을 참조할 이유가 없어졌다.

Child객체.name을 통해 name값에 접근하게 되면 Child객체에 있는 name프로퍼티에 접근하게 된다.


위처럼 직접 name프로퍼티를 각 객체마다 생성해 주어도 되겠지만

이런 형태로 상속을 구현하게 되면 이건 완전한 상속이라고 볼 수 없다.

Prototype객체를 이용해서 추가한 값들은 결국 객체들이 함께 공유하는 공통분모가 되어버리는 것이기 때문에 

객체를 생성할 때마다 객체마다 고유한 값을 갖게하려면 객체를 생성할 때 마다 name값을 직접 코드로 짜서 변경해야 된다.

그리고 이것은 우리가 진정으로 원하는 객체지향의 상속이 아니라는 것이다.

정말 고정적으로 사용되는 값이나, 메소드 등은 괜찮겠지만 고유한 값을 가질 프로퍼티 등을 정의하고 싶다면 좋은 방법이 될 수 없다.


그렇다면 자바스크립트에서는 완전한 객체지향에서의 상속을 구현할 수 없는 것일까?

이런 문제점은 자바스크립트의 함수호출 메소드를 통해서 해결할 수 있다.

함수를 호출하는 메소드에는 call(), apply()라는 것이 존재하는데 이를 이용하면 위의 문제점을 해결할 수 있다.


가볍게 call과 apply에 대해 짚고 넘어가면

함수를 호출하는 방법에는 단순히 ()를 붙여 호출하는 방법도 있지만,

함수.call()과 함수.apply()를 이용하는 방법도 있다.

이 방식은 함수의 소속을 지정하고 함수를 호출할 때 사용하는 메소드이다.

즉, this의 주체가 되는 객체를 직접 명시하는 형태로 함수를 호출할 때 사용한다는 것이다.


예를 들어 

function Parent(name) {
    this.name = name;
}

라는 함수에서 this는 누군지 알 수 없다.

new를 사용할 경우에는 

function Parent(name) {
  // this = {};  (빈 객체가 암시적으로 만들어짐)
    this.name = name;
  // return this;  (this가 암시적으로 반환됨)
}

가 되기 때문에 this가 내부적으로 생성되어 주체가 되는 형태이지만 

그냥 Parent()만 호출한다면 this의 주체가 누구인 지 알 수가 없다는 것이다.

이럴 때를 위해서 this의 주체를 직접 지정하여 함수를 호출하는 방법이 필요한데

그럴 때 사용하는게 call()과 apply()이다.


이것을 이용한다면 마치 객체지향의 상속처럼 동작하게 하는데에 도움을 받을 수 있을 것 같다.

위에서 말한대로 Prototype에 정의한 내용들은 공통분모로 사용할 수 있으니 일단 상속할 객체를 Prototype에 정의한다.

그리고 생성자 함수를 조금만 변형하면 된다.


위의 Child를 예시로 들면

function Child(name){
  Parent.call(this, name);
}

이런 식으로 상속받을 생성자를 직접 호출하는 형태로 바꾸는 것이다.

그럼 new 연산자를 사용해 Child를 생성하게 되면 

function Child(name) {
  // this = {};  (빈 객체가 암시적으로 만들어짐)
      Parent.call(this, name);
  // return this;  (this가 암시적으로 반환됨)
}

이렇게 동작하는 것과 다름이 없다.

이는 this라는 변수가 Parent함수의 this의 주체가 되고 name값이 초기화가 되어올 것이다.

Paren라는 함수는 return값이 없지만 this가 직접 넘어갔기 때문에 함수가 수행되면서 this라는 객체에 여러 값이 초기화가되고

레퍼런스가 같으니 굳이 return 받을 필요 없이 Child함수의 this에도 변화가 똑같이 적용되었을 것이다.


이렇게 하면 이제 new Child를 통해 만든 객체들은 우리가 인자로 넘긴 name이라는 값을 가지는 객체가 된다.

완전한 상속을 구현한 것이다.



지금까지의 모든 내용을 적용해서 상속을 구현해 보면


function Parent(name){
  this.name = name;
}

// 이 로직은 여기에 있으면 안 됨
Parent.prototype.printName = function print(){
  console.log(this.name);
}

Child.prototype = new Parent();
Child.prototype.constructor = Child;

// 여기에 있어야 함
Parent.prototype.printName = function print(){
  console.log(this.name);
}

function Child(name){
  Parent.call(this, name);
}

이런 형태가 되면 Child는 완전히 Paretn를 상속받은 것처럼 동작하게 된다.

우리는 new Chlid(name) 을 통해서 객체를 생성하면 그 객체는 Parent를 완전히 상속받는 형태를 갖는다.


여기서 의문이 들 수 있는데, Child.prototype으로 new Parent()를 준 이유가 조금 신경쓰일 수 있다.

왜냐하면 사실 Child함수에서 Parent를 call하고 있기 때문에 

굳이 new Parent()를 prototype에 초기화 시키지 않아도 name은 사용할 수 있기 때문이다.

오히려 new Paretn()를 prototype에 둠으로써 prototype에 불필요하게 name이라는 프로퍼티만 추가되는 것이 된다.

또 괜히 없어도 되는 Child.prototype.constructor = Child 까지 추가해야 한다.

사실 이 부분은 위에서 말한 것처럼 불필요한 부분에 해당한다. 따라서 없어도 되는 부분이다. 


그냥 저렇게 prototype을 직접 지정하면 constructor를 까먹지 말고 넣어야 한다는 것을 알려 주기 위해서 적은 것이다.

또 하나의 예시를 더 들기 위해 작성한 것인데, 위에서 보면 

Parent.prototype.printName = function print(){
  console.log(this.name);
}

이 코드의 위치가 Child.prototype = new Parent() 이 코드 보다 위에 있다.

이렇게 되면 위험한 게 Parent.prototype.printName은 Parent.prototype에 새롭게 정의한 것인데

그 뒤에 Child.prototype = new Parent()가 실행되면 Child.prototype이 new Parent()로 완전히 덮히기 때문에

기존의 printName이라는 값은 없어진다.

이렇게 코드의 위치도 중요하다는 것을 알려 주기 위해 작성한 것이다.