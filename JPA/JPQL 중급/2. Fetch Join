





JPQL에는 페치 조인(Fetch Join)이라는 문법이 존재한다.

SQL의 조인 문법이 아니고 JPQL에서 성능 최적화를 위해 제공하는 JPQL종속적 기능이다.

이 기능은 연관된 Entity와 컬렉션을 한 번에 조회하는 기능이다.

약간 한방쿼리 기능이라고도 볼 수 있다.


엥? 그거 그냥 즉시 로딩이랑 다를 거 없지 않나요?

여기서 조심해야 한다. 즉시로딩, 지연로딩은 JPQL과 상관이 없는 내용이다.

즉시 로딩과, 지연 로딩이라는 것은 EntityManager를 통해서 Entity를 조회할 때, 즉, find()를 사용할 때

조회하는 대상을 join쿼리를 이용해서 함께 즉시 로딩할 지, 

아니면 추후에 사용이 될 때 쿼리를 보내서 조회할 지를 결정하는 옵션이다.

즉, EntityManager를 통한 조회 시의 최적화를 담당하는 옵션이라고 볼 수 있다.


JPQL은 JPQL쿼리가 그대로 SQL로 번역되어 실행되기 때문에 이 옵션에 따라 join을 하고 말고가 정해지는 개념이 아니다.

그렇다고 JPQL과 완전히 연관이 없는 것은 아니다.

즉시, 지연 로딩 옵션은 결과론적으로는 Entity를 조회할 때 보장을 받아야 한다.

예를 들어 즉시 로딩 옵션이 적용되어 있다면, JPQL을 통해 Entity를 조회하더라도 당연히 연관관계 필드도 초기화되어 있어야 한다. 

하지만 위에서 말했듯 JPQL은 쿼리 자체가 옵션에 의해 따로 달라지지는 않기 때문에,

JPQL을 통해서 쿼리를 보내고 난 후, Entity가 생성되고 만약에 즉시 로딩으로 옵션이 되어 있다면

필요한 필드에 대해서 다시 쿼리문을 수행하고 그 결과를 받아 초기화 하는 것이다.


이런 식으로 JPQL은 연관관계에 있는 필드를 초기화 하기 위해서 쿼리를 재전송하는 식으로 동작한다.

결국 지연, 즉시 로딩의 옵션에 따라 Entity 조회 이후에 바로 N + 1 쿼리를 바로 보내느냐 나중에 보내느냐 차이일 뿐이고,

JPQL에서는 모든 조회 쿼리가 N + 1로 일어날 수 밖에 없다.

딱 봐도 이 방식은 비효율적이다.

JPQL을 통해서 조회를 하는데, 연관관계를 갖는 Entity필드가 필요한 경우를 예로 들어 보자.

즉시 로딩을 사용했다고 하더라도 결국 Entity의 연관관계 필드를 초기화 하기 위해서는 N + 1 문제가 발생한다.

이럴 때에는 그냥 처음 Entity를 조회할 때 부터 연관관계와 관련된 데이터들도 한 번에 조회하고 초기화하는 것이 성능면에서 더 좋을 것이다.

그래서 이것을 지원하는 게 Fetch Join이다.


Fetch Join은 즉, JPQL에서 Entity 조회 후 N + 1 문제가 발생하는 것을 막기 위해 

처음부터 join으로 Entity와 연관관계에 있는 데이터를 함께 조회하고 초기화해 주는 기능이다.

우리가 지연 로딩으로 설정을 해 놔도 페치 조인을 사용하면 페치 조인에 의해 join쿼리로 한 방에 조회가 되기 때문에

해당 join의 대상이 되는 필드에 한해서는 join을 통한 최적화된 즉시 로딩이 일어난다는 것이다.

기본 전략을 지연 로딩으로 가져가고 필요한 때에만 Fetch Join을 하면 N + 1을 없애고 성능적으로 좋은 JPQL 즉시 로딩을 구현할 수 있다.

이게 진짜 성능적으로 써먹기 좋은 전략이기 때문에 실무에서도 자주 사용한다고 한다.




사실 Fetch Join은 그냥 일반 join으로도 구현이 가능하다.

join의 select 대상으로 Entity로 지정하면, 사실상 join 후에 join대상까지 조회되도록 할 수 있기 때문에

Fetch Join으로 연관관계에 있는 Entity를 함께 조회하고 영속성 컨텍스트에 담는 것을 구현할 수 있다.


예를 들면 이렇다.

Order, Member, Delivery가 있고 Order는 Member와 Delivery를 각각 @ManyToOne, @OneToOne으로 참조하고 있다고 하자.

이 때 Fetch Join을 사용하면 "SELECT o FROM Order o JOIN FETCH o.member JOIN FETCH o.delivery" 이런 식으로

Order를 조회하며 그와 연관된 Member와 Delivery Entity를 함께 조회하고 초기화할 수 있다.

일반 조인으로도 이게 가능하다는 것인데

"SELECT o, m, d FROM Order o JOIN o.member m JOIN o.delivery d" 이렇게 일반 조인을 사용하고 

조회 대상에 Entity들을 추가하면 조회된 row를 통해 관련 Entity를 함께 조회할 수 있다.

이는 Fetch Join과 같은 효과를 낸다.


하지만 이런 식으로 일반 조인을 사용해서 조회하는 대상이 늘어나게 되면,

배열에 Entity를 반환하는 형태로 동작하기 때문에 Entity를 꺼내 사용하기가 조금 불편하기는 하다.

그러니 일반적으로 한 번에 같이 조회해야 하는 경우는 Fetch Join을 통해서 바로 Entity를 받아 사용하는 형태를 취하고

다른 ON과 같은 옵션이 필요하거나 한 번에 다른 Entity를 같이 조회하는 게 아니고 

연관관계 Entity들이 '조회 조건으로만' 쓰일 때에 일반 조인을 사용해서 조회하는 형태를 이용하는 게 좋다.


아니면 Entity를 함께 조회하기는 하는데, Entity 전체가 아니라 Entity의 몇몇 필드만 출력해서

JPQL에서 생성자를 형태를 통해 DTO를 바로 반환하는 형태로 사용할 때에는

일반 조인을 사용하는 것도 더 좋은 방법이 될 수 있다.


이런 경우는 Fetch Join과 일반 조인에 트레이드 오프가 발생한다.

일반 조인은 Entity에서 필요로하는 부분만 골라서 실제 쿼리 작성 형태로 원하는 것만 골라 조회가 가능해 성능에서 약간 더 장점이 있지만

반대로 다른 곳에서는 다시 사용하기가 애매한 재사용성의 문제와 코드 가독성의 문제가 있다.

또 API 스펙을 직접 사용하는 형태이기 때문에 나중에 API스펙이 바뀌면 코드를 바꿔야 하는 문제도 있다.

Fetch Join은 재사용성에서 좋다는 장점이 있고, 사실 일반 조인 보다 성능이 조금 밀릴 수는 있지만

이미 N + 1 문제가 없다는 것에서 이미 일반 조인이든 Fetch Join이든 크게 성능 개선이 일어난 방식이기는 하다.

그래서 일반 조인이 미비하게 성능이 더 좋기는 하지만 Fetch Join의 장점들도 메리트가 너무 크기 때문에

일반적으로는 Fetch Join을 사용하는 게 편하고 좋다.

그래서 정말 Table의 컬럼이 너무 많아서 성능상에 큰 차이를 보이는 경우가 아니라면 보통은 Fetch Join을 사용하자.