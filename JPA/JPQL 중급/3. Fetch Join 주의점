









Fetch Join을 사용할 때에는 조심할 게 몇 가지 있다.



1. 조회되는 Entity 수의 뻥튀기

첫 번째는 페치 조인이든 일반 조인이든 모두 조심해야 할 내용이다.

바로 @OneToMany나 @ManyToMany처럼 컬렉션 값 연관 필드를 갖는 Entity List를 조회할 때이다.

예를 들어 이런 상황을 가정해 보자.

Team1이라는 팀이 하나 있고, Member는 3명이다. Member 3명은 모두 Team1 소속이다.

이 때 "SELECT t FROM Team join t.members m" 이렇게 Team과 연관 있는 Member에 대해서 내부 조인을 해서 조회했다고 하자.

그럼 이 때 Team은 몇 개가 조회될까?

정답은 3개이다.


DB에서는 join을 사용하면 이렇게 서로의 row가 모두 합쳐지면서, 서로 다른 row가 되어 row수에 뻥튀기가 일어난다.

이게 DB입장에서는 의도적으로 우리가 3개의 row를 모두 필요로 하는 경우면 괜찮은데, 

application으로 넘어오면서 문제가 생긴다.

application에서도 당연히 조회된 Team의 개수에 맞춰서 3개의 Team Entity를 조회 결과 List에 넣는다.

3개의 개별적인 Team Entity객체를 만들어서 보관하는 개념은 아니다.

Team Entity는 모두 같은 형태이기 때문에 하나만 있어도 되고, 실제로 한 개만 만들어서 영속성 컨텍스에 보관한다.

하지만 문제는 getResultList()로 반환되는 List에 이 같은 Team Entity를 참조하는 변수 3개가 추가된다는 것이다.

즉, 같은 값에 대하여 list.add()가 여러번 발생하는 것이다.


그래도 정말 고맙게 Team Entity를 3개 만들어서 관리하는 형태는 아닌 것이 정말 좋다.

하지만 결과로 반환된 list에 같은 Entity를 참조하는 값이 여러개 들어가 있기 때문에

우리가 이 결과를 이용해서 뭔가를 수행할 때 좀 귀찮을 수도 있다.

# 특히 api통신할 때에 같은 데이터가 중복으로 ㅈㄴ게 보내질 수 있음

정말 이게 의도적으로 개수만큼 필요한 경우도 있을 수 있지만 그렇지 않은 경우라면 있는게 독이 된다.


예를 들어 Member들에 대한 Team을 조회하고 Team의 이름을 출력하고자 한다.

근데, 이 때 반환되는 List에 같은 Team을 참조하는 값이 여러개여서 Team이름이 자꾸 여러번 출력되는 현상이 발생했다.

이런 경우에는 굳이 List에 같은 Team을 참조하는 값이 여러개 필요하지 않다. 즉, Member에 대한 Team의 중복이 없어도 된다는 것이다.

하지만 이렇게 중복이 필요하지 않은 경우도 있을 수 있지만 반대로 필요한 경우도 있을 수 있다.

그래서 JPA에서는 이것을 개발자의 선택사항으로 만들어 두었다.

바로 DISTINCT 기능을 이용해서 이것을 줄이는 선택을 할 수도 있다.


일단 기본은 중복을 허용하는 형태로 사용하는 것이다.

당연하게도 이게 DB와의 관계를 생각해 보면 맞는 것이다.

결과값에 매핑되도록 결과의 개수를 가져오는 것이니까.

하지만 중복이 필요하지 않는 경우를 위해서 DISTINCT 기능을 제공함으로써 양쪽 모두를 만족시키는 것이다.


DISTINCT를 사용하면 두 가지 효과를 볼 수 있다.

하나는 실제 DB예도 SELECT 뒤에 DISTINCT가 붙어서 실제 조회되는 데이터에 중복사항이 있으면 없애는 것이고,

두 번째는 application으로 넘어왔을 때 같은 값이 있으면 제거를 해서 제공해 주는 형태이다.

이 두 가지가 DISTINCT를 사용하면 모두 일어나기 때문에 확실하게 중복을 제거할 수 있다.

사실상 DB에 DISTINCT가 적용되는 것은 제대로 동작을 안 하는 경우가 많다.

아무래도 DB에는 row가 합쳐져서 출력이 될 텐데, 이 때에는 테이블 간의 row가 합쳐진 값이기 때문에 거의 중복이 일어날 수가 없다.

하지만 application단으로 넘어오면서 걸러지는 방식은 값이 같은 Entity에 대해서는 List에서 제거해 주기 때문에 아주 좋다.


이 DISTINCT의 동작은 아마 List에 같은 reference를 가지는 값이 있으면 제거해 주는 방식으로 동작하는 것 같다.

그래서 따로 Entity에 equals와 hash같은 메소드를 만들 필요가 없다.

어차피 reference를 보고 동작하기 때문에 '==' 비교로 하는 듯 하다.

실험해 봤는데, equals와 hash같은 메소드가 없어도 동작했다.


하여튼 이런 DISTINCT를 뒤에 배울 @BatchSize와 함께 사용하면 

FETCH JOIN을 이용해서 컬렉션을 조회하면서, N + 1도 없애고, 중복도 없앨 수 있다.

사실상 @BatchSize와 DISTINCT를 사용한 FETCH JOIN은 Entity 조회에서 최고 성능이다.




2. FETCH JOIN의 대상은 alias 이용 지양

Fetch Join의 대상의 alias를 사용해서는 안 된다이다.

사실 무조건 안 되는 건 아니다.

그냥 상식적인 선에서 얘기를 하면 간단하다.


예를 들어 Member와 Team이 있다고 해 보자.

이 때 Team은 Member에 대해 단방향으로 연관관계로 @OneToMany를 걸었다.

이런 경우 관계의 변경 주체는 Team의 Member를 참조하는 컬렉션 값 연관 필드가 된다. 

근데, 이 상황에서 우리가 JPQL을 통해 "SELECT t FROM Team t JOIN FETCH t.members m ON m.name = 'comi'" 라고 조회했다.

사실상 지금은 INNER JOIN에 해당하기 때문에 "SELECT t FROM Team t JOIN FETCH t.members m WHERE m.name = 'comi'"과 똑같다.

회원 이름이 'comi'인 Member테이블 row와 Team의 row만이 join이 발생할 것이다. 

어려우면 모든 Team과 Member 테이블이 합쳐진 것 중에 회원 이름이 'comi'인 것만 반환한다고 생각하자.

그럼 Team Entity의 컬렉션 값 연관 필드에는 List에 회원 이름이 'comi'인 Member만 담긴다.

단방향 연관관계이기 때문에 여러 팀에 여러 회원이 속할 수 없으니 TeamA에 'comi'라는 사람이 소속되어 있었다고 해 보자.

원래는 TeamA에는 여러 회원이 있는데 Entity에는 여러 회원이 아닌 'comi'라는 사람만 간추려져서 1명만 조회됐다.

근데, 여기서 '맞아 난 'comi'만 조회된 TeamA Entity가 필요했어.' 라면서 그대로 트랜잭션을 마치고 commit을 했다고 해 보자.

무슨 일이 발생할까?


데이터베이스에 TeamA를 참조하는 회원에는 'comi'만이 남게 된다.

@OneToMany 단방향 연관관계이기 때문에 컬렉션의 값이 그대로 DB에 반영되어 버린 것이다.

컬렉션이 연관관계를 변경시키는 주체이기 때문에 조회한 컬렉션이 그대로 DB에 영향을 줘 버린 것이다.

이런 말도 안 되는 상황이 발생해서는 안 된다.

물론 @ManyToOne의 경우였다면 이런 일은 발생하지 않는다.

예를 들어 "SELECT m FROM Member JOIN FETCH m.team t ON t.name = 'TeamA'"라고 조회했다면

TeamA의 소속인 Member들이 모두 조회될 것이다.

하지만 이 조회된 Member들은 바로 DB에 영향을 주지 않는다. 

왜냐면 DB에 영향을 주려면 Member의 Team 필드를 직접 바꿔야 하기 때문이다.

이런 식으로 때에 따라서는 영향이 안 가는 경우가 있다.


영향만 안 가는 것이 아니고 DB일관성도 지켜진다. 

@OneToMany에서는 조회된 컬렉션은 조회된 순간부터 이미 실제 DB의 Team의 회원 목록과 다른 상태이기 때문에

DB와의 일관성이 깨지고 시작했다. 그리고 이러한 일관성이 깨짐으로써 DB에 값이 이상하게 반영되는 현상도 생겼다.

하지만 @ManyToOne의 경우는 일관성도 유지되고 값의 변경도 일어나지 않는다. 

조회된 대상 그 자체로는 DB에 영향이 가지 않고, 따로 setting을 해야 DB에 반영되는 형태이기 때문이다.



그래서 이러한 이유 때문에 기본 JPA스펙에서는 FETCH JOIN 대상의 alias를 애초에 못 쓰게 해놨다.

하지만 Hibernate에서는 사용은 가능하기는 한데, 제한적이다. 

일단 ON에는 사용할 수 없게 해 놓았다. 

그러니 위에서 사용한 "SELECT m FROM Member JOIN FETCH m.team t ON t.name = 'TeamA'"는 사실 못 쓰는 JPQL쿼리이다.

하지만 WHERE에는 alias의 사용이 가능하다. "SELECT m FROM Member JOIN FETCH m.team t WHERE t.name = 'TeamA'"이렇게 대체 가능하다.

INNER JOIN의 경우는 ON과 WHERE의 동작 결과가 같으니 WHERE를 잘 활용하면 좋을 것이다.


Hibernate는 기본적으로 alias의 사용은 가능하게 해 놓았는데, 그 이유는 잘 사용하면 유용한 곳도 많기 때문이다.

하지만 잘못 사용하면 진짜 크게 문제가 터질 수도 있기 때문에 정말 잘 알고 써야 한다.

위에서 말한 것처럼 데이터의 정합성, DB와의 일관성을 벗어나지 않는 선에서 사용해야 한다.

아니면 정말 딱 조회 용도로만 사용하면 생각 보다 유용할 수 있다. 

조회를 한 다음에 DB에 절대 반영이 안 되도록 em.clear() 한 번 싸악~ 처리해 주면

alias 이용해서 조회하는 데에 기깔나게 써먹고, DB에는 영향을 안 가게 할 수 있다.

그것 데이터를 변경하는 것도 위험한 부분만 detach()해 주면 되는 거 아닌가요?

그게 말이 쉽지 막상 코드 작성하다 보면 쉽지 않다. 그래도 사용하고 싶다면 사용법이 어려우니 조심해서 사용하자.




3. FETCH JOIN의 대상은 조회 불가

두 번째 내용처럼 alias를 못 쓰는 특징이 있어서 FETCH JOIN은 일반 INNER나 OUTER JOIN과 다르게 FETCH JOIN의 대상을 조회할 수 없다.

INNER나 OUTER JOIN은 JOIN의 양쪽의 아무나 조회가 가능하다.

그리고 조회한 값은 모두 영속성 컨텍스트에 담기며 관리된다. 

조회한 Entity의 값을 바꾸면 그 값이 적용이 된다는 것이다.

# 조회를 할 때에 ON의 조건에 따라서 List에 null이 포함될 수 있기 때문에 조심해야 한다. 특히 OUTER join은 null이 거의 무조건 생긴다.

# 조회한 List에서 foreach문을 돌려서 뭔가 값을 세팅하고 싶으면 if(값 != null) 조건을 사용해서 null이 아닐 때에만 값을 변경하도록 하자.


하지만 FETCH JOIN은 애초에 alias를 쓰지 못 하는 게 기본 스펙이라 조회를 막아 두었다.

Hibernate에서도 막아 놓았다. 

그리고 FETCH JOIN의 의미를 생각해 보면 사실 맞는 동작이기도 하다.

FETCH JOIN은 검색하려는 대상에 필요한 필드를 함께 검색해서 바로 즉시 초기화하기 위한 용도이기 때문에

사실상 이미 조회의 대상은 정해 놓고 시작하는 거다. FETCH JOIN의 대상은 부가적인 녀석일 뿐이다.






