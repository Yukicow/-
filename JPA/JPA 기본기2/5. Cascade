





JPA에서 cascade옵션은 아주 간단하다.



먼저, JPA에서 Entity의 상태(생명주기)에는 4가지가 있는데, 그걸 알아야 한다.


1. Transient 

아무것도 아닌 상태. 즉, Entity 객체가 생성되고 JPA와 아무 연관이 없는 상태라고 할 수 있다.


2. Persistent

영속성 컨텍스트에 저장되어 관리의 대상에 포함된 상태


3. Detached

관리에서 벗어난 상태. Transient와 다르게 관리를 받던 것이 벗어난 상태이다.


4. Removed

Entity를 삭제 요청한 상태이다. commit시점에 DB의 row가 삭제된다.




cascade를 설정하면 해당 필드의 Entity를 자신과 옵션에 설정한 생명주기에 맞추는 것이다.

말로하면 좀 어려우니 직접 보여 주면,


Member와 Team이 있다고 하자. 각각은 mappedBy를 사용해서 양방향 연관관계로 설정되어 있다.

이 때 Team Entity에 Member List를 갖는 필드의 @OneToMany 옵션에 cascade = CascadeType.ALL을 설정했다.

그럼 이제 Team의 생명주기와 Member의 생명주기는 서로 똑같아진 것이다.

Team이 Persistent상태가 되면 Team의 List안에 있는 Member들도 모두 Persistent 상태가 되고,

Team Entity가 삭제되면 그와 매핑된 모든 Member Entity들도 함께 삭제된다.

이는 CascadeType.ALL을 설정했기 때문에 생명주기가 완전히 같아진 것이고 특정 생명주기만 매핑할 수도 있다.


예를 들어 CascadeType.PERSIST를 주면 Team이 Persistent상태가 될 때 Member List안의 Member들도 모두 Persistent상태가 된다.

Team이 삭제가 되어도 그와 매핑되어 있던 Member들은 DB에서 삭제되지 않는다.

반대로 CascadeType.REMOVE를 주면 Team이 Persistent상태가 될 때 함께 Persistent상태가 되지 않기 때문에

각 Member들을 Persistent 상태로 만들기 위해서는 em.persist로 직접 하나하나 설정해 주어야 한다.

Team이 삭제되면 그와 매핑된 모든 Member row들도 DB에서 함께 삭제된다.


Cascade는 보면 알겠지만 Entity 생명주기의 관리를 한 쪽에 맞추도록 해 주는 편리기능일 뿐이다.

너무 어렵게 생각할 필요가 없다.

나야 처음부터 이렇게 배웠는데 뭔가 복잡하게 연관관계와 관련 있는 무언가로 생각하는 사람들이 있다고 한다.

전혀 아니다.


하지만 주의할 점은 있다.

이러한 생명주기를 맞춰 주는 기능은 딱 봐도 잘못 사용하면 문제가 될 것 같은 느낌이 든다.

그렇다.


예를 들어 이런 경우가 있을 수 있다.

Member와 Team이 있는데, 그 뿐만 아니라 Group이라는 Entity도 있다고 해 보자.

이 때 Member는 Team에서만 사용되는 게 아니라, Group에서도 사용하는 Entity라고 해 보자.

이럴 때 Team에서는 Member의 생명주기를 자신이 관리하기 위해 CascadeType.ALL을 설정했다.

Team과 관련된 트랜잭션이 잘 끝나고 Team을 detach했다고 하자.

그리고 그 이후 로직에서 Group이 Member를 사용할 일이 생겼다.

Member를 사용하려 했더니 영속성 컨텍스트에서 빠져 있는 불상사가 발생하는 것이다.

예상치 못한 오류가 발생해서 기능이 동작하지 않을 수 있다.


위의 내용이 어려우면 이렇게 생각해 보자.

Team이 갑자기 해제되서 Team을 삭제했다.

그리고나서 Group에서 Member를 사용하려 했더니 Team이 삭제되면서 Member도 전부 삭제된 것이다.

이런 경우가 발생할 수 있기 때문에 cascade옵션은 하나의 Entity에서만 관리되는 Entity에 사용하는 게 좋다.


그럼 CascadeType.PERSIST 정도만 사용하면 문제 없지 않나요?

솔직히 이 부분은 나는 CascadeType.PERSIST 까지는 크게 문제 없다고 생각한다.

내가 이론적으로 생각했을 때 그렇다는 거고 다른 분들은 어떻게 생각하실 지 모르겠다.


하여튼 조심해야 할 것은 CascadeType.ALL과 CascadeType.REMOVE는 두 가지 조건을 만족할 때만 써야한다는 것이다.

1. 생명주기가 정말 같을 때

2. 하나의 Entity에서만 해당 Entity를 참조하고 있을 때

이 두 조건이 만족해야 CascadeType.ALL과 CascadeType.REMOVE를 사용할 만하다고 생각하다.


참고로 이 cascade옵션은 단방향 연관관계를 만들어 주는 어노테이션 모든 곳에서 사용 가능하다.

예를 들어 @OneToMany에서 CascadeType.REMOVE를 사용하면 Team이 없어지면 Member들이 없어지는 형태이지만

@ManyToOne에서 CascadeType.REMOVE를 사용하면 Member 하나만 없어져도 Team이 사라지는 것이다.

그러니 사용에 주의하자. 보통은 @OneToMany에서 많이 사용하는 듯 하다.











