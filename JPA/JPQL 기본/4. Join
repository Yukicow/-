






JPQL에서도 SQL의 Join을 지원한다.

하지만 사용 방법이 아주아주 약간 신기한다.

JPQL에서의 내부 조인을 할 때에는 두 테이블을 조인하고 on으로 조건을 넣어서 조인하는 형태가 아니다.

on을 사용하지 않는 형태로 조인을 하는데, 그렇기 때문에 사용 방법도 두 Entity로 조인하는 게 아니고 

하나의 Entity에서 그와 연관관계가 매핑되어 있는 필드를 조인하는 형태로 사용한다.





1. 내부 조인

"SELECT m FROM Member m [INNER] JOIN m.team t"

보면 알겠지만 on이 사용되지 않고 조인의 대상은 Team 이런식으로 Entity를 바로 조인하는 게 아닌

Member Entity의 연관관계에 있는 team을 명시해서 조인하는 형태이다.

아무래도 on이 없기 때문에 연관관계에 있는 Entity 필드를 나타내 묵시적으로 fk를 명시하고 join하는 방식으로 동작하는 것이다.




2. 외부 조인

외부 JOIN도 내부 조인과 똑같다.

"SELECT m FROM Member m LEFT or RIGHT [OUTER] JOIN m.team t"

이런 형태로 내부 조인처럼 연관관계에 있는 필드와 조인을 하는 형태로 동작한다.


외부 조인을 할 때에는 조심할 점이 한 가지 있다.

스칼라 타입이나 임베디드 타입이 아닌 Entity의 형태로 바로 조회할 때이다.

INNER JOIN의 경우는 SELECT의 대상이 두 Entity중에 아무나여도 상관이 없다.

SELECT 되는 Entity에 맞춰서 반환값을 받기만 하면 된다.

근데 OUTER JOIN의 경우에는 LEFT나 RIGHT의 JOIN대상이 되는 녀석으로만 조회가 가능하다.

아무래도 기준이라는 개념이 있다 보니, OUTER JOIN을 통해 하나의 Entity만을 조회할 거라면 기준이 되는 녀석만 조회할 수 있는 듯 하다.

그래서 OUTER JOIN을 통해 모든 컬럼을 다 출력하고 싶으면 스칼라로 타입으로 DTO랑 매핑시켜 하든지 해야할 듯 하다.

더 쉬운 방법이 있을 지도 모르지만 당장은 그 방법밖에 생각이 나지 않는다.





3. 세타 조인

일단 join이라는 것은 테이블을 하나로 묶어 주는 기능이라고 볼 수 있다.

둘 이상의 테이블을 연결해서 데이터를 검색하는 방법이다.

보통은 fk를 통해서 연관관계를 가진 테이블끼리 조인을 하지만, 꼭 그래야만 하는 것은 아니다.

서로 관련 없는 테이블도 조인이 가능하다.

그냥 on절에 조건을 넣으면 테이블간의 그 조건에 일치하는 row끼리만 조인이 된다.


이렇게 on을 사용해서 연관관계가 없는 테이블도 조건을 줘서 join을 할 수가 있다.

이 때, INNER JOIN과 OUTER JOIN은 ON절을 무조건 필요로 하기 때문에 주의해야 한다.

꼼수기는 하지만 ON에 '1 = 1'과 같은 무조건 true인 조건을 넣는 식으로 동작하게 할 수는 있다.

사실 이 방식은 cross join과 똑같이 동작한다.


inner와 outer를 사용하지 않고 연관관계가 없는 join을 하는 방법에는 cross join이 있다.

"SELECT * FROM member, team" 과 같은 쿼리는 두 관계 없는 테이블 간에 아무 조건 없이 조회를 하는 형태이기 때문에

cross join을 통해 자동으로 두 테이블을 묶어서 출력한다.

cross join을 사용할 경우 기본적으로 Cartesian Product(카르시안 곱)이 발생한다.

카르시안 곱이란 각 테이블의 행이 모두 곱해져 출력되는 현상을 말한다. N * M

이 현상은 조인 조건을 생략한 경우이거나 조인 조건이 부적합할 경우 발생하는데, 이 때 크로스 조인이 수행되기 때문이다.


세타 조인은 조인에 참여하는 두 릴레이션(테이블)의 속성값을 비교하여 조건을 만족하는 row만 반환하는 조인이다.

조인에서 on의 조건으로 =, !=, <=, >=, <, > 의 연산자 중 하나를 사용하면 모두 세타 조인에 해당한다.

이 중에서 = 연산자를 사용한 세타 조인을 동등 조인이라고도 한다.

즉, Inner 조인이나 Outer조인에서도 '=' 연산자를 사용하면 동등조인이 되는 것이다.

보통 INNER 조인이 '='를 많이 사용하기 때문에 거의 동등 조인으로 동작한다.


그래서 지금 배우는 내용은 세타 조인이라고는 표현하지만 사실 위의 세타 조인과는 조금 내용이 다르다.

그냥 김영한님이 서로 연관이 없는 Entity 상에서의 조인을 하는 방법을 알려 줘야 하는데 적당한 용어가 없어서 사용한 것 같다.

INNER JOIN과 OUTER JOIN에서도 서로 연관이 없는 테이블들을 충분히 JOIN 할 수 있다.

사실상 cross join에서 세타 조인을 사용하는 방법이라고 생각하면 편하다.



김영한님께서는 

" JPQL은 위 예제에서 처럼 서로 연관관계가 있으면 연관관계가 있는 것으로 조인하는 것이 기본인데, 

만약 서로 연관관계가 없다면, 그 때 사용하는 방법 중에 세타조인에서 보여드린 예제가 있다고 이해하시면 됩니다. "

라고 말하셨다.

그러니 그냥 연관관계가 없는 경우에 cross join과 세타 조인을 이용해 테이블을 묶는 방법을

JPQL에서는 어떻게 사용하는 지를 '세타 조인'이라고 좁혀서 표현한 것으로 보인다.



세타 조인을 하는 방법은 일반 쿼리랑 크게 다르지 않다.

"SELECT m FROM Member m, Team t" 의 형태로 사용하면 된다.

이렇게 하면 기본적인 cross join이 이루어지고 여기세 세타 조인으로 연산자 조건을 주면

"SELECT m FROM Member m, Team t WHERE m.username = t.name" 이런 식으로 김영한님이 설명하는 세타 조인이 된다.

그냥 쉽게 "SELECT * FROM member, team"과 같은 연관관계가 없는 테이블끼리의 join을 JPA에서 사용하는 방법이라고 생각하면 된다.





4. ON


JPA 2.1부터는 JOIN에 on을 지원하기 시작했다.

on이 굳이 필요한가요? where랑 다른 게 없지 않나?

이런 의문이 들었다면 DB를 잘못 공부한 것이다.

on은 join이 되기 전의 조건이기 때문에 join의 대상이 되는 컬럼을 선별할 때 도움이 된다. 

where는 모든 컬럼이 조회되고 나서 거기서 조건으로 추려내는 형태이다.

사실 INNER JOIN의 경우는 WHERE를 쓰나 ON을 쓰나 똑같다.

어차피 값을 조회하기 전에 거르든 조회하고 거르든 조회되는 조건을 만족한 값들만 남기 때문이다.


하지만 OUTER JOIN에서 ON과 WHERE의 차이가 중요해 진다.

OUTER JOIN의 경우는 ON의 조건과 맞지 않아 JOIN할 대상이 없어도 OUTER JOIN의 기준이 되는 쪽의 데이터는 무조건 조회되기 때문이다.

이 때 OUTER JOIN에서 오해하는 게 있는데, OUTER JOIN의 주체는 다른 테이블의 모든 row와 합쳐지는 개념이 아니다.

OUTER JOIN도 ON의 조건에 맞는 row와만 조인이 이루어진다.

ON이 사용하지 않고 OUTER JOIN만 사용할 경우에야 모든 row가 조건을 충족한다고 보기 때문에 마치 cross join처럼 합쳐지지만

ON에 조건이 있다면 그 조건을 만족하는 row들 끼리만 JOIN이 일어난다. 

그리고 하나도 Join이 일어나지 않는 row에 대해서 null을 채우고 조회하는 것 뿐이다.

조건이 안 맞는 row들끼리는 JOIN을 시키고 null을 채우는 게 아니라, 

아무 조건도 맞지 않아서 아예 출력될 게 없는 애를 null로 채워 주는 것이다.

이걸 인지하고 OUTER JOIN을 사용하길바란다. 

즉, INNER JOIN과 똑같은데, INNER JOIN이었다면 아예 조회가 안 될 애를 null로 채워 그냥 출력시켜 주는 기능이다.


그래서 JPQL에서 Entity관계를 이용해 OUTER JOIN을 할 경우(ex = SELECT m FROM Member m LEFT JOIN m.team <<이런 형태)

ON으로 서로의 fk를 '=' 연산을 사용한 것과 같다. -> (SELECT m FROM Member m LEFT JOIN Team t ON m.team_id = t.team_id)

위와 같은 조회 쿼리문의 경우 조회되는 Member의 수는 그냥 "SELECT m FROM Member m"한 것과 똑같다.

@ToOne 관계에서는 OUTER JOIN을 사용해도 조회되는 주체의 수가 달라지지 않는다.

ToOne 관계이니 Member 입장에서 어차피 조인되는 대상은 하나의 row밖에 없고 그 하나의 row가 없는 Member는 null로 채워져 조회되기 때문이다.

하지만 @ToMany 관계에서는 조회되는 주체의 수가 뻥튀기 되기 때문에 주의하자.

이 내용은 나중에 Spring Data JPA를 사용할 때 도움이 된다.




하여튼 지금은 ON이 OUTER JOIN에서 INNER와 달리 어떻게 다른 지 얘기하고 있다.

예를 들어 Client와 Money라는 테이블이 있다고 해 보자.

Client A,B,C는 각각 10000,20000,30000원을 가지고 있다.

여기서 "SELECT * FROM client c LEFT JOIN money m ON c.fk = m.fk WHERE m.money >= 20000"라고 조회를 해 보자.

그럼 결과는 B와 C 클라이언트만 조회된다.

조인의 결과는 A,B,C와 money정보가 합쳐진 컬럼 모두 조회되겠지만, WHERE 조건에서 20000을 만족하지 못한 A는 사라진다.

하지만 ON을 사용할 경우 이렇게 된다. "SELECT * FROM client c LEFT JOIN money ON c.fk = m.fk AND m.money >= 20000"

이러면 JOIN되는 시점에 A와 연관된 money테이블의 money는 조건을 만족하지 못해서 조회되지 않겠지만 

OUTER JOIN이기 때문에 조건을 만족하지 못할 경우 컬럼에는 null을 채워서 JOIN결과에 반영된다.

그럼 최종적으로 JOIN된 결과에는 A,B,C 모두 포함되어 있다. 다만 A의 money가 null일 뿐이다.

이런 식으로 OUTER JOIN에서는 ON과 WHERE의 차이가 매우 중요하다.


하여튼 이렇게 중요한 OUTER JOIN에서의 ON을 2.1부터 지원하기 시작했다고 한다.

Hibernate는 그에 맞춰 ON을 지원하기 시작한 듯 하다.

사실상 JPQL에서는 JOIN문에서 ON을 생략하고 바로 Entity의 연관관계 필드를 JOIN하기 때문에

ON이라는 개념이 없어서 WHERE 조건만 사용 가능했었는데, 달라진 것이다.


하지만 문제가 하나 있었는데, OUTER JOIN에서 연관관계가 없는 Entity끼리의 ON을 지원하지 않았었다고 한다.

그래도 Hibernate 5.1버전부터 가능해졌다고 한다.

이게 좋은 점이, 그 전에는 INNER JOIN에 대해서만 연관관계가 없는 Entity끼리의 ON을 지원했기 때문에

연관관계가 없는 Entity간의 OUTER JOIN시에 네이티브 쿼리로 작성했어야 한다고 한다.

이런 불편사항이 개선이 된 것이다.


ON의 사용법은 간단하다.

위의 일반적인 내부 조인 외부 조인의 방식에 그냥 ON을 붙이고 원하는 조건만 넣으면 된다.

그럼 조인 시에 ON에 있는 조건을 추가적으로 적용하여 조인의 대상을 조건 처리한다.

"SELECT m FROM Member m JOIN m.team t ON ~~", "SELECT m FROM Member m LEFT or RIGHT [OUTER] JOIN m.team t ON ~~"

이런 식으로 사용 가능하다.

위의 방식은 서로 연관관계가 있는 Entity 사이에서의 ON 사용 방법이고,

이번에는 연관관계가 없는 Entity간의 ON 사용법에 대해 알아 보자.


위의 쿼리의 경우는 JOIN이 특정 Entity와 연관관계에 있는 필드를 직접 JOIN의 대상에 사용해서 

연관관계에 있는 것을 묵시적으로 나타내기 때문에 ON을 생략하고 JOIN이 가능했다.

하지만 이번에는 서로 연관관계가 없는 상태이다. 명시해 줄 수 있는 필드가 없다는 것이다.

그러니 당연히 일반적인 JOIN을 사용하듯이 Entity간의 JOIN을 직접 사용하면 된다.

"SELECT m FROM Member m LEFT or RIGHT [OUTER] JOIN Team t ON ~~"

이런 식으로 사용 가능하다.

이제는 Member의 team필드가 아닌 Team Entity를 그대로 조인하는 것이다.

그리고 그 조인 조건을 ON에 명시하는 형태로 연관관계가 없는 Entity끼리 조인을 할 수 있다.




그런데, 만약에 cross join에서 ON조건을 사용하고 싶을 때에는 어떻게 해야 할까?

사실 JPQL에서 cross join을 직접적으로 지원하는 지는 모르겠다.

근데 DB의 SQL문법적으로 생각해 봤을 때, 연관관계가 없는 INNER JOIN을 사용하면 사실상 cross join과 똑같이 동작하는 것으로 예상된다.

그러니 만약 그런 기능을 구현하고 싶으면 연관관계 없는 Entity간에 INNER JOIN에 ON을 사용하면 될 것 같다.

# 물론 이론적으로 생각해 봣을 때고 뭔가 문제가 있을 지도 모른다. 잘 생각해 보고 사용하자.