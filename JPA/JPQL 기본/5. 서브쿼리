







JPQL에서도 일반 SQL처럼 서브쿼리를 제공한다.

서브쿼리란 하나의 쿼리 문장 내에 포함된 또 하나의 쿼리 문장이라고 할 수 있다.

비교연산자의 오른쪽에 기술해야 하고 반드시 괄호 안에 넣어야 한다.

서브쿼리의 종류에는 스칼라 서브쿼리, 인라인뷰 서브쿼리, 중첩 서브쿼리가 있다.



1. 스칼라 서브쿼리

스칼라 서브쿼리는 SELECT 절에 서브쿼리가 사용되는 경우를 말한다.

이 때 서브쿼리의 결과는 반드시 단일 행이나, 집계 함수를 거친 단일 값으로 리턴되어야 한다.

단일행이란 말은 행이라고 되어 있지만 그냥 쉽게 하나의 값(단일 값)이라고 보면 된다.



2. 인라인뷰 서브쿼리

FROM절 안에 서브쿼리가 사용된 형태이다.

서브쿼리는 반드시 하나의 테이블로 리턴되어야 한다.



3. 중첩 서브쿼리

WHERE 절에 사용된 서브쿼리를 말한다.

가장 대중적인 서브쿼리이며, 단일행과 복수행을 리턴할 수 있다.

복수행은 여러개의 단일값이라고 볼 수 있다. 행이라고 해서 컬럼이 여러개인 행을 말하는 것이 아니다. 그냥 여러개의 값이다.

이 때 리턴된 복수행과 복수행 비교연산자라는 것을 이용여 조건을 비교할 수 있다.


- [NOT] IN

메인쿼리의 비교 조건이 서브쿼리로 반환된 복수행 중 하나라도 일치하면 참


- ALL

메인 쿼리의 비교 조건이 서브쿼리의 검색 결과와 완전히 일치하면 참

ALL에는 <와 >와 같은 연산자들을 사용할 수 있는데, 

'='는 서브쿼리로 반환된 값과 모두 일치하면 참이다. 사실상 default라고 볼 수 있다.

나머지는 서브쿼리로 반환된 값 중 최소값이나 최대값과 연산을 하는 형태이다.

정확히 해석하면 서브쿼리에서 반환하는 모든 값에 대해 '>'연산이나 '<'연산을 만족해야 참이되어 출력되는 조건이다.

근데, '>'와 '<'의 특성상 최대값이나 최소값이 존재하기 때문에 사실 최대값이나 최소값에 대해 연산을 만족하면

다른 값들에 대해서는 모두 만족하는 형태라, 그냥 최소값이나 최대값에 대한 비교 연산한다고 해석할 수 있다.

SELECT sal
FROM member
WHERE sal > ALL (SELECT sal FROM member where team = 1);

이 경우 1번 팀에서 급여가 가장 높은 한 사람에 대해서 그 보다 높은 급여를 받는 member는 모두 출력된다.


- ANY , SOME

서브쿼리로 검색된 데이터중 하나라도 조건을 만족하면 참이 되어 출력된다.

이 복수행 비교 연산자에도 일반 연산자들을 사용할 수 있다. 사실상 '='를 제외하면 ALL과 동작은 같다.

'='의 경우는 ANY와 SOME의 기본 동작이라고 볼 수 있고, 일치하는 게 하나라도 있으면 참인 것이다.


- [NOT] EXIST

값이 존재하면 참이다.

IN, ANY, SOME과 다르게 특정 컬럼에 대해 비교하는 게 아니고 서브쿼리의 결과가 존재하면 참 아니면 거짓이다.

그래서 특정 row만 조회하는 게 아니고 서브쿼리의 결과가 존재하면 모든 메인 쿼리의 row를 검색하는 형태이다.




JPQL의 서브쿼리는 일반 SQL문 처럼 사용하면 된다.

서브쿼리의 조회 형식도 JPQL의 SELECT문과 동일하게 사용하면 된다.

JPA표준에는 SELECT절에는 서브쿼리를 사용할 수 없도록 되어 있는데, Hibernate는 SELECT절에도 제공한다.

또, FROM절에는 서브쿼리를 사용할 수 없었는데

Hibernate 6.1부터는 FROM 절에 서브쿼리를 지원한다고 한다. 앙기모찌!


예전에는 이 기능이 지원을 안 해서 정말 복잡하게 다뤘어야 했다.

JOIN을 통해서 간접적으로 접근하거나, 뭐 네이티브를 사용하거나 application에 로직상으로 해결하거나

하여튼 잘은 모르지만 그런 식으로 해결했다고 한다.