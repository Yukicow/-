







JPQL은 객체지향 쿼리 언어이다.

Entity들을 이용해서 DB의 쿼리문을 작성할 수 있도록 돕는 기술이라고 보면 된다.

이러한 JPQL을 이용하면 우리는 특정 DB의 쿼리문법에 의존하지 않고 JPQL에 의존하여 쿼리를 작성하면

각각의 DB에 맞는 형태로 쿼리를 작성할 수 있고, 컴파일러가 문제점을 잡아 주기 때문에

단순히 String을 이용해서 sql쿼리를 직접 짜는 형태 보다 안정적으로 쿼리를 작성할 수 있다.



JPQL은 일반 SQL문법과 크게 다르지는 않기 때문에 배우는 게 어렵진 않다.

기본적인 내용에 대해 알아 보자.


먼저, JPQL은 Entity와 속성(필드)는 대소문자를 구분한다.

@Entity(name = "")이렇게 설정한 값이 있다면 name으로 지정한 값을 그대로 사용해야 한다.

하지만 보통 Entity의 이름은 클래스 이름을 따라가기 때문에 name값을 따로 지정한 Entity를 사용할 때에 조심하자.

Entity는 대소문자를 구분하지만 일반 SQL문처럼 JPQL구문의 키워드는 대소문자를 구문하지 않는다.


또, Entity 뒤에는 항상 별칭을 적어 주어야 한다.

예를 들어 "SELECT m FROM Member m" 이런 식으로 Member라는 Entity를 사용할 때에는 뒤에 별칭을 정해야 한다.

그래야만 다른 곳에서 이 Entity에 대해서 별칭으로 접근이 가능하다.

일반적인 DB SQL처럼 테이블명으로 접근하듯 Entity명으로 데이터에 접근이 불가능하기 때문이다.



JPQL을 이용해서 쿼리를 만드는 방법은 EntityManager의 em.createQuery()메소드를 사용하는 것이다.

이 메소드의 인자로 JPQL쿼리를 넘기면, 그 쿼리를 토대로 Query객체를 만들어 준다.

이 Query 객체에는 두 가지 종류가 있다. TypedQuery와 그냥 Query이다.

하나는 em.createQuery()를 호출할 때 결과로 반환 되는 타입을 함께 명시한 경우에 반환하는 값이고

하나는 반환되는 결과가 어떤 타입인 지를 명시하지 않았을 때, 즉 모를 때 반환되는 타입이다.


이렇게 받은 Query 객체에는 여러 기능이 존재한다. 

JPQL에 작성한 인자를 세팅하는 setParameter()메소드나, 

JPQL을 SQL구문으로 해석해서 DB에 보내고 결과를 반환하는 getResultList(), getSingleResult() 메소드가 있다.



setParameter는 JPQL에 순서 기반의 인자나 이름 기반의 인자를 남겨 놓았을 경우 그 부분을 치환해 주는 메소드이다.

순서 기반의 인자는 ?1, ?2 이런 식으로 '?'와 숫자를 입력해서 순서를 지정하는 형태로 인자를 세팅하는 방식이고

이름 기반 인자는 :username, :userId 이런 식으로 특정 문자와 매핑되도록 인자를 세팅하는 방식이다.

후자가 더 좋은 쪽이다.

아무래도 순서 기반은 순서가 꼬이면 문제가 발생할 수 있고, 순서를 인지하고 인자값을 넘겨야 하기 때문에 번거롭다.

하지만 이름 기반은 이름과 매핑되도록 값을 넘길 수 있어서 값 세팅에 문제가 발생할 일이 거의 없다.




getResultList()는 쿼리를 실행하고 나온 결과를 List에 담아 반환하는 메소드이고,

getSingleResult()는 하나의 결과만을 반환하는 메소드이다.

이 때 주의할 것은 getSingleResult()이다.

getResultList()의 경우는 값이 없으면 빈 List를 반환하기 때문에 문제될 것이 없는데,

getSingleResult()는 값이 없거나 두 개 이상인 경우 Exception을 터트린다.

이게 조심할 점이 Spring Data JPA에서는 값이 없는 경우에는 null을 반환한다.

# 최신 버전은 Optional을 반환하는 듯?

그런데, 그것과 혼동해서 값이 없으면 null이 반환되는 것으로 오해하고 사용할 수가 있는 것이다.

그렇지 않으니 그걸 인지하고 만약에 값이 없으면 null을 반환하고 싶으면 Spring Data JPA처럼

try catch문에서 catch로 Exception을 잡고 return으로 null을 반환하게 하면 된다.