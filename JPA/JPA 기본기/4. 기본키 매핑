






@Entity 객체에서 기본키를 지정하고 그에 사용할 수 있는 여러가지 옵션에 대해 알아 보자.



1. @Id

해당 필드를 기본키(PK)로 지정한다.

@Id만 사용할 경우 직접 값을 할당하여 기본키를 지정한다.



2. @GeneratedValue

기본키값이 자동 할당되도록 할 때 사용한다.

옵션으로 strategy값을 줄 수 있으며, GenerationType.옵션 형태로 값을 지정할 수 있다.

옵션에는 AUTO, IDENTITY, SEQUENCE, TABLE이 있다.


- AUTO

AUTO는 위의 AUTO를 제외한 3가지 옵션 중 데이터베이스에 맞는 전략이 선택된다.

MySql의 경우 IDENTITY, Oracle의 경우 SEQUENCE가 될 것이다.

요즘은 좀 달라지는 경우가 있다고 하니 확인해 보고 사용하자.


- IDENTITY

기본키값의 생성을 DB에게 위임하는 것이다.

SEQUENCE와 크게 다를 건 없지만 개념적으로 다르다.

IDENTITY 전략을 사용할 경우에는 시퀀스와 다르게 데이터가 저장되는 시점에 기본키 값이 자동 생성되고 삽입되기 때문에

미리 다음 기본키값을 얻어오는 게 불가능하다. 


그래서 이런 경우 EntityManager를 통해 데이터를 삽입할 경우 캐시에 pk값과 함께 엔티티를 저장해야 하는데

저장할 pk값이 없는 상황이 발생하여 문제가 된다.

이런 경우 때문에 IDENTITY 전략을 사용할 경우에는 persist()메소드를 사용하면

바로 그 삽입 쿼리를 DB에 보내서 실행하고 id값을 가져온다.

flush와는 다르다. 삽입 쿼리만을 보내서 실행하는 것이기 때문에 flush하는 것은 아니다.


그리고 이 때 SELECT쿼리가 수행되지 않는데 그 이유가 의문일 수 있다.

그건 JDBC에서 내부적으로 INSERT 후에 return으로 INSERT된 값을 받을 수 있도록 설계되어 있어서 그렇다고 한다.




- SEQUENCE

시퀀스를 이용해서 기본키값을 할당하도록 지정한다.

SEQUENCE 전략의 경우는 IDENTITY와는 다르게 INSERT를 수행해서 PK값을 가져오는 것이 아니고

SEQUENCE로부터 다음 키값을 가져와서 사용한다. 따라서 INSERT쿼리가 바로 수행되지 않는다.


그럼 결국 얘도 시퀀스로부터 데이터를 가져와야 되니까 사실상 INSERT를 수행하는 거랑 다를 게 없지 않나요?

물론 매번 시퀀스로부터 가져오는 것은 생각한 것처럼 성능상 크게 다를 게 없을 것이다.

그래서 JPA는 똑똑하게 이걸 해결했는데, 바로 SEQUENCE로부터 특정 값만큼을 미리 받아와서 사용하는 것이다.

시퀀스를 생성할 때에 allocationSize라는 것을 지정할 수가 있다.

시퀀스의 증가값을 지정하는 것인데 default는 50이다.


엥..그럼 50씩 증가한 값을 받는 건가요? 맞다.

실제 DB의 시퀀스는 한 번 next가 호출될 때마다 50씩 증가된다.

하지만 이 때 JPA는 그 값을 받아서 미리 현재값 포함하여 이후의 50개 숫자를 메모리에 저장해 둔다.

그리고 SEQUENCE전략이 사용된 그 테이블의 기본키에 값을 할당해야 할 때가 오면 메모리에 저장된 값을 순차적으로 할당한다.

그리고 50개의 값이 모두 할당되고 나면 다시 next call을 수행하고 다시 50개를 저장한다.

이렇게 하면 DB와의 연결을 할 필요 없이 미리 할당받은 값을 사용하므로 성능에 문제가 없을 것이다.


그럼 동시성 문제가 생길 수도 있는 거 아닌가요?

그것도 동시성 문제가 생기지 않도록 잘 해결해 놓은 듯 하다.

단, 문제점이라고 하면 이게 영속성 컨텍스트 단위로 시퀀스를 사용하는 것 같은데

영속성 컨텍스트에서 50까지 할당받아 놓고 3개만 쓰고 끝나면

다음 영속성 컨텍스트는 DB의 시퀀스로부터 값을 받아오기 때문에 51부터 사용하게 될 것이다.

이런 과정이 반복되면 불필요하게 낭비되는 기본키값이 생기는 게 아닐까 한다.



SEQUENCE는 우리가 직접 만든 SEQUENCE를 지정해도 되지만

지정하지 않으면 JPA에서 기본으로 생성해 주는 SEQUENCE를 사용하게 된다.

SEQUENCE를 직접 생성하고 싶으면 클래스에 @SequenceGenerator를 사용해서 시퀀스 제너레이터를 만들도록 명시하고

@GeneratedValue(generator = generator이름)처럼 generator에 생성된 generator이름을 적어 주면 된다.





- TABLE

TABLE 전략은 직접 값이 점차 증가하는 컬럼을 갖는 테이블을 만들어서

Id로 그 값을 할당하도록 하는 전략이다.

모든 DB에서 사용 가능하다는 장점이 있지만 성능면에서 좋지는 않아서 잘 쓰지 않는다.


이 녀석도 테이블을 우리가 따로 만들어서 지정할 수 있다.

SEQUENCE와 사용법은 비슷하다 @TableGenerator를 통해 생성하고 

@GeneratedValue의 generator에 옵션에 설정해 주면 된다.






