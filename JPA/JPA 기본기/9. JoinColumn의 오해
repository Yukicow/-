











지금까지 @JoinColumn을 아무 설명 없이 너무 막 사용한 것 같아서

@JoinColumn에 대해 가볍게 알아 보고자 한다.

이 내용은 생각 보다 중요한 내용이다. 

나중에 이걸 제대로 모르고 사용했다가 삽질하는 경우가 생길 수 있으니 잘 알고 쓰도록 하자.



@JoinColumn의 옵션에는 여러 가지가 있는데, 제일 중요한 게 name과 referencedColumnNamed이다.

지금까지는 name이 우리가 만든 테이블의 fk이름을 지정하는 것으로 오해했을 수도 있는데 그렇지 않다.

완전히 오해하고 잘못 사용한 것이다.

@JoinColumn은 외래키를 만들어 주는 어노테이션이다.

그리고 name옵션은 그저 그 생성되는 외래키의 이름을 지정해 주는 어노테이션이다.

그리고 name에 지정한 것과 같은 이름의 외래키 컬럼이 있다면 그 컬럼을 외래키로 사용하고 새로 만들지 않는다.


@JoinColumn을 사용하면, referencedColumnNamed으로 우리가 만든 테이블의 pk 컬럼명을 지정해야 한다.

만약 referencedColumnNamed을 생략하면 fk가 참조해야할 Entity의 pk값으로 fk를 생성해 버린다.

그래서 referencedColumnNamed을 생략해도 그 동안 제대로 동작했던 것이다.




@JoinColumn이 어떻게 사용되는 지 예시를 보면 더 와닿을 것이다.


우리가 @ManyToOne의 경우는 기본 동작 매커니즘이 fk를 생성해서 단방향 연관관계를 만드는 것이기 때문에

따로 @JoinColumn을 명시하지 않아도 알아서 fk컬럼이 생성되었다.

사실상 @ManyToOne에서의 @JoinColumn은 name이나 referencedColumnNamed을 지정하는 용도 정도이다.

@JoinColumn은 name으로 지정한 것과 같은 이름의 fk컬럼이 있으면 그 녀석을 fk로 사용하고 다른 fk컬럼을 만들지 않기 때문이다.

이 때 fk가 아닌 컬럼을 name에 지정하면 오류가 발생한다.


@OneToMany의 경우는 자신을 참조하는 Entity들을 알기 위해서는 두 가지 방법이 있다.

첫 번째는 테이블을 새로 생성해서 자신을 참조하는 Entity의 pk와 자신의 pk를 저장하고 그걸 바탕으로 조회하는 형태,

두 번째는 자신이 참조하고자 하는 쪽에 자신의 pk를 갖는 fk를 생성하고, 자신의 pk를 이용해서 Entity를 조회하는 형태이다. 

@JoinColumn을 사용하지 않으면 첫 번째 방식으로 동작하게 된다.

반대 쪽에 자신을 참조하는 fk가 없고, 없는 그대로 단방향 연관관계를 만드는 방식이라고 보면 된다.

새로운 테이블을 만들어서 거기에 양쪽 Entity의 pk를 컬럼을 저장하고 참조하는 방식이다.

@JoinColumn을 사용할 경우에는 두 번째 방식으로 동작하게 되며, 

자신이 참조하고자 하는 쪽에 @JoinColumn의 name옵션으로 지정한 컬럼이 fk컬럼으로 존재한다면 그 컬럼을 이용해서 Entity를 찾고

만약 fk가 없다면 name에 설정한 값으로 fk컬럼을 만들어서 그 값을 앞으로 참조하고 Entity를 반환한다.




@OneToOne의 경우는 @ManyToOne과 비슷하다.

어차피 하나의 Entity만 참조하면 되기 때문에 테이블은 만들 필요가 없다.
