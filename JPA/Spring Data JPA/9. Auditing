







Auditing이란 Entity를 생성,변경할 때 변경한 사람과 시간을 추적하는 것을 말한다.

Auditing을 위해서는 테이블에 등록일,수정일,등록자,수정자에 대한 컬럼이 필요하다.

때에 따라서 위의 내용들 중 필요한 것만 넣기도 한다.

이런 내용은 모든 테이블에 공통으로 적용되어야할 내용이다.

그래서 이럴 때 @MappedSuperclass를 사용하면 모든 entity에 편하게 컬럼을 추가할 수 있다.


이러한 Auditing 처리는 특정 Event가 발생할 때 자동으로 이루어지는 것이 편리하다.

예를 들어 등록일은 처음 Entity가 DB에 persist가 수행되는 시점에 초기화되는 것이 좋고,

수정일은 데이터가 변경되는 시점에 계속 새롭게 초기화 되는 것이 좋다.

그렇다고 매번 데이터를 persist하고 update할 때마다 이런 초기화 로직을 직접 호출해야 할까?


다행히 JPA에서는 이런 것을 위해 @PrePersist, @PostPersist, @PreUpdate, @PostUpdate와 같은 어노테이션을 제공한다.

Entity의 메소드 위에 해당 어노테이션을 달면 영속성 컨텍스트에서 persist나 

해당 Entity에 변화가 있고 flush()가 일어날 때 수행 이전, 이후로 해당 메소드를 수행한다.

이걸 이용해서 Entity의 필드에 값을 적절하게 초기화하면 Entity의 생성 및 수정 시간을 적절하게 DB에 반영할 수 있다.

물론 실제 필드에 값이 초기화된 이후, 몇 가지 로직이 추가로 수행되고 DB에 반영될 수 있기 때문에 약간의 오차가 있을 수 있다.


위의 방식은 javax진영에서 제공하는 표준 방식을 이용한 것이고

Spring Data JPA에서 제공하는 방식도 있다.

이 방식은 Spring Data JPA에서만 동작하는 게 아니고 그냥 JPA Entity에 적용만 하면 모두 동작한다.

쉽게 그냥 Spring Data JPA 진영에서 제공하는 Auditing기술이라고 생각하면 된다.


먼저, 이 기술을 사용하려면 한 가지 중요한 게 있다.

Spring boot를 사용 중이라면 꼭 main application 클래스 위에 @EnableJpaAuditing를 추가해야 한다.

이걸 추가해 주지 않으면 기능이 동작하지 않기 때문인데, 자주 까먹는다고 하니 꼭 인지해 두자.

또 main application에 @EnableJpaAuditing 어노테이션을 추가하는 것 뿐만 아니라, 

Auditing 기술을 적용할 Entity에 @EntityListeners(AuditingEntityListener.class) 어노테이션도 추가해야 한다.

그래야 해당 Entity 내에서 Auditing 어노테이션이 제대로 동작한다.


이제 Auditing 어노테이션을 적용할 준비가 되었다.

사용 가능한 어노테이션에는 @CreatedDate, @LastModifiedDate, @CreatedBy, @LastModifiedBy이다.

모두 Entity의 필드에 사용할 수 있는 어노테이션이다. 

@CreatedDate, @LastModifiedDate를 필드에 적어 주면 해당 Entity 등록과 수정 시 시간이 자동 등록, 변경되도록 한다.

@CreatedBy, @LastModifiedBy 또한 필드에 적어 주면 해당 Entity 등록과 수정 시 등록자, 수정자가 자동 등록, 변경되도록 한다.


그런데 @CreatedDate, @LastModifiedDate은 시간에 관련된 거니까 데이터 타입에 맞는 시간값을 구해서 넣어 주면 되는데..

@CreatedBy, @LastModifiedBy는 따로 명시한 것이 없는데 어떻게 알고 등록하는 걸까?

이는 Bean으로 등록된 AuditorAware라는 함수형 인터페이스를 참조하고 거기서 반환하는 값을 등록자, 수정자로 등록한다.

이것은 우리가 직접 등록해야 하는 내용이다. 

보통 Spring Security와 접목해서 클라이언트의 세션값을 이용하는 듯 하다. 





