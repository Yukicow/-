






Spring Data JPA에서 제공하는 인터페이스를 우리가 상속 받고 필요에 따라 쿼리 메소드를 작성하면

그에 대한 구현체를 Spring Data JPA에서 만들어서 주입해 준다.

근데, 단순히 Spring Data JPA가 만들어 주는 구현체 내에서, 즉, Spring Data JPA문법만으로는 해결하기 애매한

동적 쿼리라든가 복잡한 쿼리들은 결국 따로 Repository를 만들어서 사용해야 한다.

하지만 같은 역할을 하는 Repository를 이렇게 따로 나누어 구현하는 것은 썩 좋진 않다.

예를 들어 정말 핵심적인 비즈니스 로직을 처리하는 Repository와 

단순 화면 출력에 맞춘 비즈니스 로직을 처리하는 Repository의 경우는 성격과 생명 주기가 완전히 다르다고 볼 수 있다.

이런 경우에는 Repository를 따로 나누어 관리하는 게 오히려 더 좋은 방식이라고 볼 수 있다.

하지만 같은 비즈니스 로직을 처리하는 Repository를 굳이 두 개를 나누어서 만든다..? 이건 좀 별로다.


위와 같은 문제는, Spring Data JPA가 제공하는 인터페이스를 상속받는 Interface를 만들어, 자동 제공되는 구현체를 사용하는 게 아니고 

직접 인터페이스를 구현하는 Class를 만들고, 동적 쿼리나 복잡한 쿼리들에 대한 메소드는 그 클래스에 직접 추가해 가는 식으로 해결할 수 있다.

하지만 이럴 경우 Spring Data JPA가 제공하는 Interface에 정의된 많은 메소드들 조차도 하나하나 구현해야 하는 번거로움이 있다.

그래서 이런 불편한 문제를 해결할 수 있도록 Spring Data JPA에서는 한 가지 방법을 제공한다.


먼저, 원래 Spring Data JPA를 사용하던 것처럼 인터페이스를 상속받는 인터페이스를 하나 만든다.

그리고 그와 별개로 일반 인터페이스를 하나 더 만드는데, 이 인터페이스는 동적 쿼리나, 복잡한 쿼리를 해결하기 위한 커스텀 인터페이스이다.

그리고 그 인터페이스의 구현체를 만든다.

참고로 구현체를 만들 때 조심해야할 것이 하나 있는데, 

Spring Data JPA의 인터페이스를 상속받은 인터페이스의 이름에 Impl을 붙인 형태로 클래스 이름을 작성해야만 한다.

다음은 Spring Data JPA 인터페이스를 상속받은 인터페이스가 그 인터페이스를 또 상속 받도록 extends한다.

그러면 Spring Data JPA가 새롭게 상속받은 인터페이스의 구현체를 이름을 보고 찾아서 그 구현체에 정의된 메소드들을 

인터페이스 구현체를 만들 때 함께 추가하여 생성하는 것이다.

이렇게 되면 Spring Data JPA가 제공하는 메소드들도 사용할 수 있고, 우리가 만든 메소드도 구현체를 통해 사용 가능하다.



말로하면 조금 복잡해 보이니 바로 코드로 보여주면 


1.

public interface MemberRepository extends JpaRepository<Member, Long>

위와 같은 Spring Data JPA에서 제공하는 JpaRepository를 상속받는 인터페이스를 하나 만든다


2. 

public interface MemberRepositoryCustom {}

위처럼 우리만의 동적 쿼리나, 복잡한 쿼리를 수행할 인터페이스를 하나 만든다.


3. 

public class MemberRepositoryImpl implements MemberRepositoryCustom {}

위처럼 MemberRepositoryCustom 인터페이스에 대한 구현체를 만든다.

이 때 이름은 MemberRepository에 Impl을 붙인 형태로 꼭 지어야 한다.


4.

public interface MemberRepository extends JpaRepository<Member, Long> , MemberRepositoryCustom

위처럼 MemberRepository가 MemberRepositoryCustom을 상속받도록 추가한다.


5. 

그럼 이제 Spring Data JPA에서 MemberRepository에 대한 구현체를 만들 때에

MemberRepositoryImpl의 메소드들도 갖도록 구현해 준다.





이렇게 사용자 정의 리포지토리를 만드는 법에 대해 알아 보았다.

이것은 Spring Data JPA만으로는 한계가 있는 로직을 

QueryDsl이나, JdbcTemplate와 같은 기술을 이용해서 작성할 때에 

Repository를 분리해야 하는 불편함을 해결해 주는 좋은 기능이다.


이 때 꼭 조심할 것은 같은 비즈니스 로직을 처리하는 Repository라면 

이런 사용자 정의 리포지토리를 이용해서 하나의 Repository에 묶어서 사용해도 되지만, 

서로 별개의 생명주기를 갖고 성격이 완전히 다른 Repository 조차도 이렇게 하나로 묶어서 사용하려 하지 말자.

이게 Repository를 묶을 수 있는 기능이라고 해서 모든 Repository를 하나에 다 묶어서 사용하면 되겠다는 미친 생각을 해서는 안 된다.

Repository는 아키텍쳐에 따라서는 분리가 필요한 경우가 있다.

이런 아키텍쳐적인 문제는 위의 Repository를 묶어 주는 기능과 별개로 생각해야 한다.

묶어 주는 기능은 그냥 편의 기능일 뿐이다.