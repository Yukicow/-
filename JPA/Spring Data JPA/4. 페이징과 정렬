






Spring Data JPA에서는 페이징처리를 공통 인터페이스를 통해서 제공한다.

이는, 특정 종류에 DB에 종속적이지 않고 인터페이스 하나로 공통화 시켜 놓았기 때문에 사용이 간편하다.

참고로 여기서 말하는 페이징은 웹에서 보여지는 페이지처리와 같은 페이징을 위한 것이다.

꼭 그런 용도로 사용해야만 하는 것은 아니지만 이럴 경우라면 사용에 조심해야 한다.

만약 500건의 데이터를 조회했는데 이 중에 '100번 째부터 10개만 가져오고 싶다', 또는 '120번째 부터 7개만 가져오고 싶다' 처럼

페이지 기능을 구현하기 위한 페이징이 아니고, 정말 단순히 '특정 구간'만을 조회하기 위한 용도의 페이징은

setFirstResult와 setMaxResult를 사용하여 구현하는 게 맞다. 

페이징은 시작 페이지와 페이지당 조회 size를 통해 페이지 기능을 구현하는 개념이기 때문에 저렇게 특정 구간만 자르는 개념이 아니다.




우리가 JPA에서 직접 페이지 기능을 구현하려면 JPQL을 통해서 setFirstResult(), setMaxResult()를 사용하고

페이징의 조건이 되는 것들은 parameter방식으로 binding해서 사용해야 했다.

또 페이지 기능을 구현하기 위한 countQuery나 첫 페이지, 마지막 페이지 등에 대한 것은 따로 구현해야 한다는 문제점이 있다.

이러한 과정들을 Spring Data JPA에서 쿼리 메소드를 통해서 제공한다는 것이다.

우리는 쿼리 메소드를 만들고 Spring Data JPA에서 페이징 처리를 하기 위해 필요로 하는 인자를 넘기기만 하면 된다.

그렇게 실행된 쿼리 메소드의 return값으로 Page<T>라는 인터페이스를 받으면 되는데,

이 인터페이스는 페이징 처리에 필요한 거의 대부분의 정보를 포함하고 있다.


예를 들면, 일단 기본적으로 페이징 처리되어 조회된 row들은 물론, 총 row개수, 첫 번째 페이지인 지, 다음 페이지가 존재하는 지 등

여러 편의 기능들을 쿼리 메소드를 수행하며서 함께 쿼리를 수행하고 데이터를 가져와서 보관한다.

원래 이런 것들은 JPA를 이용한다면 각각의 결과를 얻기 위해 따로 메소드를 만들어서 실행하고 가져와야 하는데,

Spring Data JPA는 페이징 처리를 하면 자동으로 이와 관련된 쿼리를 함께 수행해 주는 것이다.

그래서 페이징 처리가 훨씬 수월하고 간편해진다. 

특히, slice라는 기능도 제공하는데, 단순 페이징이 아니라 '더 보기' 기능 같은 것을 구현할 때 사용되는 방식이다.

이런 것들을 단순히 return 타입만 바꾸면 알아서 처리가 되기 때문에 나중에 변경에도 용이하다.



그럼 이 페이징 기법을 사용하는 법을 알아 보자.

먼저 쿼리 메소드를 원하는 형태로 작성한다.

예시로 findByUsername() 이라고 만들었다고 가정하자.

그럼 원래는 Username에 대한 parameter만 넘기면 Spring Data JPA가 알아서 Username을 조건으로 값을 조회한다.

"SELECT m FROM Member m WHERE m.username = :username" 이런 형태로 JPQL을 작성해 줄 것이다.

이 때 페이징을 하고 싶으면 인자로 Spring의 Pageable인터페이스를 구현한 객체를 만들어 넘기면 된다.

그리고 return 타입으로 Page<> 객체를 반환받고 그 객체로부터 페이징 정보를 끌어와 사용하면 되는 것이다.


Pageable객체를 생성하는 법은 PageRequest클래스를 이용하면 쉽게 만들 수 있다.

PageRequest클래스에서 제공하는 static 메소드인 of()를 이용하면 PageRequest객체를 생성하고 반환해 준다.

PageRequest.of(시작페이지, 조회 개수, 정렬객체) 형태로 사용 가능하다.


시작 페이지는 말 그대로 몇 번째 페이지인 지이다. index이기 때문에 0을 기준으로 시작한다.

뒤의 조회 개수에 따라 나눠진 페이지 수 중에서 시작 페이지를 명시하는 것이다.

조회된 데이터 중 몇 번째 row부터 조회하는 지의 개념이 아니다.


조회 개수는 페이지당 몇 개의 데이터를 조회할 것인 지 결정하는 것이다.


정렬 객체는 Sort라는 객체를 넘겨야 하는데, 이 객체도 Sort클래스에서 static 메소드를 이용해서 만들고 넘기면 된다.

Sort.by(Sort.Direction.. , 정렬 기준 필드명)의 형태로 사용 가능하다.

Sort.Direction은 Sort 클래스에 명시된 Enum타입으로 DESC과 ASC이 있다. OrderBy를 결정하는 것이다.

정렬 기준 필드명은 말 그대로 정렬을 할 때 기준이 되는 필드명을 String으로 넘기면 된다.

여러개의 필드명 값을 넘길 수 있고 순서대로 우선 순위를 갖는다.


근데 만약에 다른 필드에 대해서도 OrderBy를 적용하고 싶으면 어떻게 해야 할까?

그럴 때에는 함수형으로 계속 Sort를 추가해 줄 수 있다.

'Sort.by("필드명").descending().and(Sort.by("필드명")).ascending()...'

이런 식으로 필드명 마다 정렬을 정해 주면 된다.

OrderBy의 우선순위에 따라 저렇게 순서대로 연결해 가면 된다.

ascending()의 경우 default이기 때문에 마지막에는 적어주지 않아도 되지만 중간에 껴 있을 때에는 적어야 한다.

중간에 껴 있을 때 ascending()을 적지 않으면 뒤에 descending()이 오는 경우 descending()에 묶이기 때문이다.

'Sort.by("필드1").descending().and(Sort.by("필드2")).and(Sort.by("필드3")).descending()'

위와 같은 경우 필드 2에 ascending()을 명시하지 않아서 필드3의 descending()에 묶인다.

사실상 'Sort.by("필드1").descending().and(Sort.by("필드2","필드3")).descending()' 와 같은 형태라고 볼 수 있다.

맨 앞의 필드1도 descending()이기 때문에 사실상 동작은'Sort.by("필드1","필드2","필드3")).descending()'과 같다.


그럼 이제 여러 필드에 OrderBy를 적용하는 문제는 해결했는데,

연관관계에 있는 Entity의 필드를 OrderBy로 적용시키고 싶을 때에는 어떻게 해야 할까?

그럴 때에는 필드명을 적을 때에 연관관계 매핑된 entity의 필드명을 앞에 명시해 주면 된다.

예를 들어 Member라는 Entity의 연관관계 매핑된 Team이 있다고 하고, Member는 'private Team team'이라는 필드를 갖고 있다고 해 보자

그럼 Team Entity의 name이라는 필드로 OrderBy를 적용하고 싶다면 Sort.by("team.name") 이런 식으로 사용하면 된다.




하여튼 이렇게 해서 PageRequest.of()메소드를 통해 모든 인자를 넘기면 PageRequest객체가 반환되는데,

이 객체를 다시 Spring Data JPA의 쿼리 메소드 인자로 넘기기만 하면 우리가 명시한대로 자동 페이징 처리를 하고

페이징에 필요한 여러 결과를 함께 조회해서 Page<>객체에 담은 채로 반환한다.


이 Page 객체로부터 얻을 수 있는 정보들에 대해 알아 보자.


1. getContent()

페이징 처리되고 얻은 결과물을 반환한다.


2. getTotalElements()

페이징 처리되기 전에 조회된 모든 row의 수를 반환한다.


3. getNumber()

몇 번째 페이지인 지를 반환한다.


4. getTotalPages()

모든 페이지 수를 반환한다.


6. isFirst()

첫 번째 페이지인 지를 boolean으로 반환한다.


7. hasNext()

다음 페이지가 존재하는 지 boolean으로 반환한다.


이 외에도 다양한 메소드들이 있는데 그건 따로 알아 보자.


8. map()

Page객체는 Entity를 그대로 갖고 있기 때문에 바로 json으로 반환하기 그래서 우리가 따로 Dto 클래스를 만들고

그 값들을 Dto에 하나하나 넣어 주는 작업을 해야 한다.

하지만 이 map을 사용하면 Page객체의 content부분만을 인자로 넘긴 메소드의 수행 결과들로 바꿔 준다.




여기서 Page가 아니고 여러가지 return 타입을 받을 수도 있다.

그 중에 Slice라는 객체가 있는데, 이는 Page와 크게 다르지 않은데, '조회 개수' + 1 만큼을 해서 데이터를 조회한다.

페이징이 필요 없는 형태이기 때문에 totalCount에 대한 쿼리가 나가지 않는다.

totalCount를 조회해서 페이지를 보여 주는 형태가 아닌 '더 보기' 기능처럼 동작하는 것을 만들기 위한 것이라고 보면 된다.


Slice 외에도 List로 바로 받을 수도 있다.

그냥 쿼리 수행후의 결과만을 받는 형태라고 볼 수 있다.

따지고 보면 Page객체를 받은 뒤에 getContent()를 수행한 결과와 같다.

이 경우는 결과값만 가져오는 형태이기 때문에 countQuery가 나가지 않는다.

페이징 처리는 필요한데, 페이지 기능은 이용하고 싶지 않다면 사용할 수 있는 방식이다.

위의 Page객체에서 제공하는 기능들은 대부분 countQuery를 수행한 결과가 있어야만 동작할 수 있기 때문에 

페이징 기능이 필요하지는 않은 경우에는 불필요하게 성능 낭비를 할 필요가 없다. 그럴 때에 List로 받아서 사용하자.



countQuery의 경우 성능상으로 이슈가 클 수 있다.

단순한 조회면 모르지만 여러 가지 JOIN과 같은 조건이 점점 많아지고 조회되는 데이터가 많아질 수록

이러한 totalCount를 위한 countQuery의 수행은 성능상 문제가 많아진다.

페이징이라는 것은 totalCount가 꼭 필요한 기법이다. 그래야 페이지 수를 구할 수 있기 때문이다.

근데, Spring Data JPA는 Page객체를 생성할 때 totalCount를 구하는 쿼리를 자동으로 생성하고 수행한 뒤 결과를 Page객체에 담는데,

이 자동으로 생성해 주는 totalCount쿼리가 상당히 문제가 많다는 것이다.

이런 자동 Count 쿼리는 내부적으로 최적화 알고리즘을 구현하는 게 상당히 복잡할 것이다.

그래서 Count 쿼리를 아주 간단하게 구현하는데, 그냥 SELECT 쿼리의 FROM절을 그대로 사용하여 count값을 구하는 것이다.



count 쿼리라는 것은 경우에 따라서는 최적화가 가능하다.

예를 들면 이런 경우이다.

"SELECT m FROM Member m LEFT JOIN m.team t"를 한다고 해 보자.

이 때 조회되는 Member의 총 개수를 알고 싶어서 count쿼리를 작성하려 한다고 해 보자.

위의 경우는 사실상 @ToOne 관계를 OUTER JOIN 한 것이기 때문에 총 조회되는 Member의 수는 그냥 Member를 조회한 것과 같다.

"SELECT count(m) FROM Member m"이 "SELECT m FROM Member m LEFT JOIN m.team t"에서 조회되는 총 Member의 수와 같다는 것이다.

그럼 이럴 경우에는 Member의 총 개수를 조회하기 위해서 "SELECT count(m) FROM Member m"를 사용하는 게 더 성능상 좋다.

이걸 굳이 "SELECT count(m) FROM Member m LEFT JOIN m.team t" 이런 식으로 

"SELECT m FROM Member m LEFT JOIN m.team t"에 대한 결과에서 Member의 개수를 조회하는 형태로 구현할 필요가 없다는 것이다.

하지만 Spring Data JPA의 자동 count 쿼리는 이런 식으로 동작한다는 것이다.

그래서 성능상에 큰 문제가 발생할 수 있다.

만약 최적화된 count쿼리를 사용할 수만 있다면 그게 성능면에서는 더 좋을 것이다.


이런 문제를 해결하기 위해 Spring Data JPA는 이런 count쿼리에 대해서 개발자가 따로 작성할 수 있도록 제공한다.

바로 @Query 어노테이션에 countQuery를 이용하는 것이다.

countQuery의 value로 직접 JPQL쿼리를 작성하면 페이징 작업을 할 때 countQuery를 자동 생성하지 않고 

count값을 가져올 때에는 우리가 작성한 countQuery를 이용하여 조회한다.



이 기능을 무조건적으로 이용하라는 것이 아니다.

때때로 경우에 따라 count쿼리가 최적화가 가능할 때가 있다.

그럴 때에는 직접 count쿼리를 분리해서 작성하고 명시하는 게 성능상 훨씬 효율적이다.


또 복잡한 경우 외에도 FETCH JOIN이나 네이티브 쿼리를 사용할 때에도 이렇게 countQuery를 분리해야 한다.

FETCH JOIN은 Entity를 조회하고 Entity 그래프를 채우기 위한 기능인데, 

Entity가 아니고 값을 조회하는 것이 돼버리기 때문에 오류가 발생한다.

예를 들어 "SELECT m FROM Member m JOIN FETCH m.team t"을 한다고 했을 때 자동으로 만들어 주는 count쿼리는 이런 형태가 된다.

"SELECT count(m) FROM Member m JOIN FETCH m.team t"

FETCH JOIN을 통해서 Entity를 채우는 용도가 아닌 단순 value를 조회하는 용도로 사용되었기 때문에 문법상 오류가 된다.


네이티브 쿼리는 우리가 작성한 네이티브 쿼리 자체가 DB로 바로 나간다.

자동 생성 count쿼리는 우리가 작성한 코드를 이용해서 쿼리를 만드는데,

네이티브 쿼리의 경우 JPQL이 아니라서 불일치가 발생하기 때문이다.



참고로 Spring Data JPA의 paging기술은 위처럼 쿼리 자체의 최적화는 해 주지는 않지만, 쿼리를 보내고 말고에 대한 최적화는 되어 있다.

예를 들어 count개수를 따로 쿼리를 날리지 않고도 유추할 수 있는 경우이다.

index를 0부터 해서 10개씩 조회하는데 10개 보다 적게 조회되는 경우 이럴 경우는 조회한 값 자체가 count값이 된다.

따라서 따로 count 쿼리가 나가지 않아도 되기 때문에 이럴 때에는 안 나간다.





