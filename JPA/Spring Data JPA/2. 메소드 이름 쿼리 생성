





Spring Data JPA는 최대한 공통으로 제공 가능한 쿼리 메소드를 기본적으로 인터페이스를 통해 제공한다.

하지만 우리가 만든 Entity에 특화된 쿼리 메소드는 직접 따로 구현하는 수밖에 없을 것이다.

Spring Data JPA는 메소드의 이름을 통해 쿼리를 유추하고 쿼리 메소드를 생성해 줄 수 있게 설계되었다.

덕분에 정말 여러 문법들이 복잡하게 엮여 한계가 있는 쿼리가 아닌 이상 대부분 간편한 정적 쿼리는 메소드 이름만 잘 지어 놓으면

Spring Data JPA가 인터페이스를 구현체로 생성해 줄 때에 쿼리 메소드로 잘 뽑아 준다는 것이다.


이런 메소드 이름을 이용해서 쿼리 메소드를 만들 때에는 메소드 작명 규칙이 존재한다.

이런 규칙에 맞춰 메소드명을 작성하면 쿼리를 그에 맞게 자동 생성해 준다.

이 규칙에 대해 알아 보자.


모든 것을 적을 수는 없고 자주 사용하는 몇 가지만 적겠다.

자세한 것은 아래 주소를 참조하자. 

https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.query-property-expressions

더 최신 버전을 원하면 spring data jpa 공식 문서에서 Query Creation 부분을 찾아 보면 나온다.




1. find

find는 말 그대로 SELECT라고 보면 된다.

여기서 FROM부분에 오는 객체는 상속하는 인터페이스에 generic으로 지정하였기 때문에 문제 없다.




2. By

By를 사용하면 WHERE 조건을 넣겠다는 뜻이다.

메소드명에서 find와 By 사이에는 아무렇게나 이름을 적을 수 있다.

findMemberBy.. , findListBy.. , findMemberListBy.. , findComisLostWalletBy

이런 식으로 find와 By 사이에는 아무 문자열이 마음대로 들어올 수 있다. 작명할 때 참조하자.




3. And, Or

WHERE 뒤에 여러개의 조건을 넣을 때 And나 Or을 사용할 수 있다.



4. 필드명, Is, Equals

By뒤에 필드명만을 적으면 '=' 연산을 하겠다는 뜻이다.

필드명을 작성하고 Is 또는 Equals를 함께 적어 주어도 똑같이 동작한다.

이 때 '='의 연산 대상이 되는 주체는 parameter로 넘기는 값이 된다.



5. GraterThan, GraterThanEqual, LessThan, LessThanEqual

비교 연산에 대한 것들이다.



6. IsNull, Null 

Null에 대한 내용이다.



7. Like, NotLike

like연산이다.

like에서 '%'를 사용한 방식은 StartingWith, EndingWith, Containing이 사용될 수 있다.

StartingWith = char%

EndingWith =  %char

Containing = %char%



8. In

In 연산이다. parameter로 Collection을 넘기면 알아서 in절에 들어간다.






Spring Data JPA는 일반 JPA와 조금 다른 점이 있다.

바로 메소드 수행 결과를 유연하게 제공한다는 것이다.

Spring Data JPA의 쿼리 메소드 수행 결과를, 즉, return값을 여러 형태로 받을 수 있는데,

가능한 return값의 종류는 Spring Data JPA 공식 문서의 Supported query keywords 부분을 보면 나와 있다.

List, Collection, Optional, Entity 등 여러 형태를 제공한다.


예를 들어 findMemberByName() 이라는 쿼리 메소드가 있다고 해 보자.

이 때 우리는 자유롭게 return값을 지정해서 사용 가능하기 때문에

public List<Member> findMemberByName()

public Member findMemberByName()

public Optional<Member> findMemberByName()

이런 식으로 return값을 원하는 대로 지정할 수 있다.


여기서 주의할 점은 단일로 조회되는 대상을 List로 받는 것은 가능하지만

여러개가 조회되는 결과를 단일 Entity로 받으려 하면 NoUniqueException 예외를 발생시킨다.

이 때 발생된 NoUniqueException예외는 JPA 의존적인 예외인데, Spring에서 Spring 의존 에러로 바꾸어 넘긴다.


또 단일로 return값을 받을 때에는 조회되는 값이 없으면 null을 반환한다.

원래 JPA에서는 NoResultException을 터트리는데, Spring Data JPA에서는 이를 자기가 catch해서 null을 넘기는 것이다.

우리는 이걸 Optional이라는 좋은 걸 냅두고 굳이 null로 직접 받을 이유가 없다.

그러니 단일로 받을 때에는 Optional을 사용하자.


반대로 단일이 아닌 Collection(List 등)으로 받을 때에 조회된 값이 없으면 빈 Collection를 반환한다.

이는 Spring Data JPA뿐만 아니라 JPA에서도 똑같이 적용되는 일이다.

if(~~ = null) 이런 식으로 처리하는 경우가 있다고 하는데 그럴 필요가 없다는 것이다.



