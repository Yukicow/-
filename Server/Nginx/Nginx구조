


Nginx는 예전의 서버 소프트웨어들(특히 apache)의 한계를 극복하고자 나온 웹 서버 소프트웨어이다.

Nginx가 옛날의 서버들과 어떻게 다르길래 더 커넥션을 효율적으로 관리하는 지 간단하게 알아 보자.


기존의 서버들(apache 기준)은 하나의 Connection당 하나의 프로세스를 생성하는 형태였다.

그리고 Connection이라는 것은 연결하는 과정에서 많은 시간이 필요하기 때문에 기존의 Connection을 활용하기 위해 

keep alive라는 개념을 이용해 Connection을 일정시간 유지하여 같은 요청자에 대해 Connection을 재사용하는 방식을 사용했다.

그런데 이 때, 기존의 Connection으로부터 요청이 없을 경우에는 cpu가 다른 요청에 대한 프로세스를 처리하기 위해 Context Switching작업을 수행하는데

이로인해 빈번하게 Context Switching이 일어나서 자원의 사용이 비효율적이었다는 문제가 있었다.

또 서버에는 여러 기능을 추가할 수 있는 모듈(확장 프로그램)들이 있었는데, 

이것들을 사용하게 되면 해당 기능을 처리하기 위해 프로세스당 차지하게 되는 메모리 용량이 증가한다.

이러한 과정 속에서 시간과 비용에 대해 비효율적인 문제가 발생했던 것이다.



그래서 Nginx라는 것이 나온 것인데, 이 Nginx는 프로세스를 미리 만들어 사용하는 형태를 취하고 있다.

설정 파일에 따라 worker processor라는 것을 만들고 해당 프로세스는 여러개의 커넥션을 처리할 수 있도록 구현되어 있다.

Queue를 이용해서 요청을 순서대로 처리하는 형태로 구현했는데, 이 방식을 Event Driven Architecture라고 한다.

하나의 프로세스가 하나의 Connection에 대한 요청을 담당하는 것이 아니라, 여러 Connection을 담당하고 요청의 순서에 따라 순차적으로 처리하도록 하는 것이다.

그리고 Nginx는 worker processor를 cpu의 코어 개수만큼 만드는데, 이렇게 함으로써 Context Switching이 발생하는 일을 최소화 시킨다. 

하나의 코어(하나의 cpu)당 하나의 worker processor를 담당하게 되고, 하나의 worker processor가 여러개의 Connection을 담당해 순차처리하기 때문에

프로세스가 쉬게 되는 일이 거의 없고, Context Switching에 대한 비용이 훨씬 줄어드는 것이다.

그럼 다 좋은데, 의문이 하나 생길 수 있다. 만약 하나의 이벤트가 너무 오래 걸리는 요청이라 뒤에 요청들이 기다리게 되는 경우에 어떻게 처리할까이다.

이런 경우를 대비해서 Nginx는 Thread pool이라는 것을 만들어서 오래 걸릴 것 같은 이벤트를 Thread pool에 위임하여 따로 처리되도록 구현했다.


core당 하나의 worker processor를 만든다는 것은 기존의 서버와 비교했을 때 프로세스를 상당히 적게 만드는 방식이다. 

이러한 방식으로 인해, Nginx는 동적으로 설정을 변경하는 것을 가능하게 한다.

프로세스를 적게 생성하기 때문에 새롭게 프로세스를 생성하고 유지하는 비용이 훨씬 적기 때문에, 

기존에 Nginx 설정이 동적으로 변경될 경우 기존의 worker processor를 유지하면서 해당 설정에 맞는 worker processor를 새로 만들고 

기존의 worker processor들이 Connection을 더 이상 연결할 수 없도록 만든 뒤, 모든 요청이 끝나고 나면 기존의 worker processor를 지우는 형태를 취하는 것이다.

설정을 동적으로 변경해서 기존의 worker processor가 기존의 Connection에 대한 요청을 모두 처리할 때까지 유지되는 동안은 새롭게 생긴 worker processor와 공존해야 하는데,

애초에 프로세스가 많지 않았기 때문에, 이렇게 공존을 하더라도 비용이 크게 들지 않는다는 것이다. 

그래서 동적으로 설정을 변경해도 무리없이 소화해낼 수가 있는 것이다.

초당 수십번 설정을 변경해도 무리가 없을 정도라고 한다.


이렇게 간단하게 Nginx의 구조와 원리에 대해 알아 보았다. 자세한 내용은 또 나중에 공부해 보자.






