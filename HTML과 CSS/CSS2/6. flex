








저번에 가볍게 레이아웃을 만들 때 flex를 이용해서 가로 배치 정도만 사용해봤는데

이제는 flex를 제대로 배워볼 시간이다.


먼저 시작하기 전에 용어에 대해 조금 알아야 하는데, flex에는 flex컨테이너와 item이라는 것이 있다.

컨테이너는 쉽게 말해서 레이아웃 내에서 컨텐츠들이 담겨 있는, 즉 감싸고 있는 블록을 담당하는 녀석이라고 보면 된다.

그리고 item은 컨텐츠들을 의미한다.

<section>
    <ul>
        <li></li>
        <li></li>
        <li></li>
    </ul>
</section>

여기서 ul이 컨테이너고 li들이 item이라고 할 수 있다.


section은 뭐죠? 

section은 보는 사람들을 위한 구분용도이지 크게 의미를 갖는 것은 아니다. 레이아웃에 해당한다고도 볼 수 있다.

section은 컨테이너와 item에 접근하기 위한 용도로 section에 class나 id를 부여해서 사용하는 게 일반적인 듯 하다.





Flex-Lines

얘네는 컨테이너에 설정한다.


1. flex direction

flex에는 방향성이 존재한다. 

row와 column이 존재하는데 row는 가로 방향으로 column은 세로 방향으로 켄텐츠가 생성된다.

말 그대로 방향이라서 헷갈리면 안 된다. 

이 때 방향을 지정하는 속성은 flex-direction: 이다.

이 것은 속성 display가 flex로 설정되어 있을 때만 적용 가능하다.

flex로 지정되어야만 그 flex의 진행 방향을 정할 수 있기 때문이다.



2. flex-wrap

flex-wrap은 위에서 지정한 방향대로 가다가 더 이상 item을 둘 수 없는 경우에 어떻게 처리할 지에 대한 내용이다.

여기서 한계지점이란 비율은 그대로인 상태로 화면의 window를 줄이는 행위 등으로 인해 item이 컨테이너에서 벗어나는 경우, 

또는 item의 크기가 너무 커서 기본적으로 컨테이너를 벗어나는 경우이다.


컨테이너가 width 100px일 때 컨텐츠가 width 51px이라면 컨텐츠가 두 개 오면 컨테이너의 넓이를 벗어나 버린다.

이럴 경우에 컨텐츠가 컨테이너를 벗어나 표현되도록 허용할 지 아니면 내리거나 옆으로 옮겨서 표현할 지 정하는 것이다.

벗어나서 표현이 가능하게 하는 것이 nowrap이고 옮기도록 하는 것이 wrap이다.

위의 상황에서 flex 방향이 가로인데 wrap을 할 경우에 51px item이 하나 표현되면 다음 item은 그 밑으로 내려가서 표현된다.

flex 방향이 세로인데 wrap을 할 경우에는 작동하지 않는다.

기본적으로 웹은 윈도우가 밑으로는 무한, 가로로는 제한된다는 느낌이기 때문에 밑으로 내려가는 item들을 굳이 옆으로 다시 놓지 않는다.

하지만 무조건 안 되는 것은 아니고 컨테이너의 height 값이 지정되어 있어 세로의 크기를 가질 경우에는 그 크기를 넘어가면 옆으로 놓는다.

따로 세로크기가 지정되어 있지 않다면 세로방향의 wrap은 무시된다.



주의!!!!!!!!!!!!!!

flex-wrap을 사용할 때에는 컨테이너의 꼭 display가 flex여야 한다는 점과 컨테이너의 width, 그리고 item의 auto를 조심해라 


1) 컨테이너의 width 문제

flex-wrap을 사용할 때 컨테이너에 지정된 넓이나 높이의 값을 컨텐츠 보다 크게 설정해 놓고

작동이 안 한다고 가끔 병신짓 할 때가 있는데, 그렇진 않은 지 잘 확인해 보자.

당연하게도 더 크면 컨텐츠가 안에 다 포함될 수 있기 때문에 wrap에 의해 옮겨질 이유가 없다.

wrap으로 여러 실험을 하고 싶으면 높이,넓이는 따로 설정하지 말고 그냥 defualt인 auto로 해놓고 하자.

그래야 화면을 줄였다 넓혔다 할 때마다 그 크기에 맞춰서 자동 설정되니까 

(컨테이너 auto다 item auto아니다.)



2) item의 width auto문제

item의 width가 값이 설정돼 있지 않고 auto로 되어 있을 경우

wrap이 적용되지 않고 item의 컨텐츠가 wrap되는 것처럼 보이는데 사실 그렇지 않다.

백그라운드를 설정해서 보면 item의 컨텐츠에 해당하는 녀석들만 wrap과 같은 현상이 일어나고 item자체는 nowrap이 되는 것을 볼 수 있다.

이것은 item의 width가 화면이 줄어듦에 따라 넓이가 줄어들면서 컨텐츠를 담긴해야 되니까 

화면이 줄어드는 방향 대신 반대 방향으로 컨텐츠를 표현하기 위해 늘어나는 것 뿐이다.

백그라운드 설정 후 wrap일 때와 nowrap일 때 확인해 보면 item이 밑으로 쭉 연결되는 지 아니면 각 컨텐츠마다 따로 늘어나는 지 볼 수 있다.



3) 컨테이너의 속성 중에 display: flex가 있는 지

당연하게도 wrap은 direction에 따라 wrap이 되는 방향이 정해지기 때문에 direction속성이 선행되어야 한다. 

근데 direction속성은 display: flex를 설정해야 적용되는 속성이기 때문에 display: flex가 없으면 wrap도 못 쓴다.






Flexibility

얘네는 item에다 설정해야 한다.


1. flex-basis

각 컨텐츠에 크기를 부여하고 싶을 때에는 어떻게 할까

단순히 height나 width를 사용해도 되지만 만약 flex의 방향이 바뀌는 것에 맞춰 

컨텐츠의 크기를 지정하고 싶다면 flex-basis: 에 값을 주면 방향에 따라 넓이나 높이가 정해진다.

가로 방향이라면 가로 크기가 정해지고 세로 방향이라면 세로 크기가 정해진다.

기본으로 auto로 설정되어 있어 컨텐츠의 크기만큼 크기를 갖는다.



2. flex-grow

다음은 flex-grow: 에 대해 알아보면 

컨텐츠가 모두 같은 크기를 가지게 하고 싶을 경우에 컨텐츠(아이템)에 flex-grow를 사용할 수 있다.

각각의 item에 flex-grow를 1로 설정해서 동등하게 갖게 해도 되지만 각 item 묶는 연산자를 이용해서 

그냥 한 번에 flex-grow를 사용하는 것이 편할 것이다.

ex) 

<ul>
    <li></li>
    <li></li>
    <li></li>
</ul>


ul li{
    flex-grow: 1;
}


위와같이 설정하면 설정하면 컨텐츠 블록에서 남는 여백을 컨텐츠(li) 수 만큼 같은 크기로 나눠 똑같이 나눠 갖는다. 


이 때 flex-grow의 사용법에 조심할 것이 있다.


ul li{
    flex-grow: 1;
}

ul li:nth-child(1){
    flex-grow: 3;
}


이렇게 하면 어떻게 분배가 될까?

위의 스타일은 우선순위를 적용해서 풀어서 해석하면 아래와 같다.


ul li:nth-child(1){
    flex-grow: 3;
}
ul li:nth-child(2){
    flex-grow: 1;
}
ul li:nth-child(3){
    flex-grow: 1;
}


사실 flex-grow는 이렇게 생각하면 편하다.

flex-grow: 로 설정된 모든 값을 더한 만큼 여백을 잘라서 그 중 각자에게 설정된 값만큼 갖겠다.

그럼 위의 모습도 어떻게 될 지 예상이 간다.

여백을 5개로 나눠서 그 중 3개만큼을 1이 나머지 두 개를 각각 2와 3이 가질 것이다.



ul li:nth-child(1){
    flex-grow: 3;
}

위처럼 한 개의 item에만 속성을 부여하면 어떨까?

그럼 어차피 한 명이 여백을 몰빵해서 받게 되기 때문에 숫자는 크게 의미 없다.

하지만 원리상으로는 위의 과정을 거치지 않을까 싶다.


이 flex-grow는 기본적으로 0으로 설정되어 있기 때문에 여백이 남는 것이다.




3. flex-shrink

이녀석은 flex-grow와 반대되는 개념이다.

여백이라는게 생길 수도 있지만 반대로 우리가 윈도우를 줄이는 등을 해서 줄어들기도 할 것이다.

이렇게 여백이 줄어들면 기본적으로 부여 받았던 여백들이 줄어들고 그 다음 더 줄어들 게 없다면

아이템에 해당되는 크기가 비율에 맞게 줄어든다.


근데 이 때 여백이 줄어드는 것을 원치 않을 수도 있다.

화면이 줄어들 때 그 여백을 계속 줄이는 식으로 동작하지 않았으면 좋겠다는 것이다.

그럴 때 설정 가능한 게 flex-shrink이다.

flex-shrink는 기본적으로 1로 설정되어 있는데, 그래서 화면의 크기에 따라 여백이 줄었다 늘었다 하는 것이다.

(비율 설정으로 인한 여백이 줄고 느는건 당연한 것이다. 여기서말하는 건 같은 비율에서 화면을 조정할 때)

flex-shrink를 0으로 설정하면 이것을 막을 수 있다.

0으로 설정하면 화면이 줄어들었을 때 여백이 줄어들지 않고 화면 밖으로 밀려나는 현상이 일어난다.

원하는 item만 0으로 설정할 수도 있고 그건 마음대로 이지만 적절히 사용해서 웹이 이상하게 보이지 않도록 하자


그리고 컨테이너의 넓이를 auto로 설정해 놓고 flex-wrap을 wrap으로 flex-shrink를 0으로 설정했을 때

shrink에 따라 화면을 넘어도 가만히 있을 지 아니면 flex-wrap에 따라 아이템들이 밑으로 이동할 지 궁금할 수도 있는데

해봤는데 밑으로 이동함 ㅅㄱ




4. flex의 축약표현

flex는 자주 사용되는 만큼 축약표현이 존재하는데 

위의 flex-basis, flex-grow, flex-shrink 를 묶어서 표현 가능하도록 해 놓았다.

flex: 1 1 100px;  이런식으로 줄여서 사용 가능하다.

단, 순서가 존재하는데 flex-grow, flex-shrink, flex-basis순이다.


그리고 자주 사용하는 패턴에 대해서도 만들어 두었는데 아래와 같다.

flex: none; = flex: 0 0 auto;

flex: auto; = flex: 1 1 auto;

flex: initial; = flex 0 1 auto;

이런 것들의 자세한 내용은 mdn에서 찾아 보고 사용하자.









