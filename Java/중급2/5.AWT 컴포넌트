



AWT(Abstract Window Toolkit)란?

- GUI프로그래밍(윈도우 프로그래밍)을 위한 도구

# 여기서 윈도우는 운영체제 windows가 아니고 응용 프로그램 안에 작동하는 '화면'을 말하는 것이다. 한 마디로 '프로그램 창'

- Java로 구현하지 않고 OS의 *컴포넌트를 그대로 사용(OS 종속적)

*컴포넌트(component)란 여러 개의 프로그램 함수들을 모아 하나의 특정한 기능을 수행할 수 있도록 구성한 작은 기능적 단위를 말한다.

한 마디로 GUI에서 컴포넌트라고 하면 버튼과 같이 특정 기능을 수행하는 모듈이라고 할 수 있겠다.


조금 역사를 알아 보고 가면

자바 언어가 탄생한 1995년에는 인터넷이 활성화되지 않았기 때문에 대부분의 클라이언트 애플리케이션은 

운영체제가 제공하는 네이티브 UI 컴포넌트를 이용하여 개발되었다. 

그래서 Java1.0에 포함된 AWT는 운영체제가 제공하는 네이티브 UI컴포넌트를 이용하는 자바 라이브러리였다. 

그렇다보니 자바 애플리케이션이 실행되는 운영체제에 따라 UI의 모양이 서로다르고 종류도 제한적이다. 

하지만 비교적 쉽게 접할 수 있기에 콘솔에서 벗어나 Winodws개발을 하고싶은 자바개발자에게 입문코스(?)로 한 번쯤은 해보고 넘어가는듯 하다.



우리가 만든 애플리케이션은 결국 UI를 가져야 한다. 그렇지 않으면 사용자가 사용할 수 없거나 불편하기 때문이다.

그런 UI에서도 특히 사용자를 위한 UI는 GUI가 가장 보편적이고 눈에 잘 들어올 것이다.

GUI를 만들기 위한 프로그래밍을 운영체제가 제공하는 UI 컴포넌트를 이용했다는 것이다.

운영체제에서 제공하는 window api를 이용하면 운영체제를 만든 회사측이 구현해 둔 그래픽 툴과 기능들을 이용할 수 있는 것이다. 

우리는 그걸 이용해서 우리가 만든 응용 프로그램의 '프로그램 창'을 구성할 수 있고,

창 내에서 그래픽 인터페이스의 기능에 따라 원하는 대로 동작할 수 있도록 만드는 것이다.


하지만 window api를 이용하기 위해서는 운영체제에서 제공하는 winodw api를 사용할 수 있는 프로그래밍 언어이어야 한다는 것이다.

자바는 그런 window api를 java에서도 사용할 수 있도록 AWT를 이용하여 제공하는 듯 하다.

컴포넌트를 운영체제의 GUI와 연결시키므로, 운영체제에 따라 다른 모양과 배치를 띈다.

# 아마 컴포넌트의 기능 구성은 java로 하고 GUI만 운영체제가 제공하는 GUI를 가져오도록 되어 있을 듯?

즉, AWT는 그런 응용 프로그램의 창을 다루는, 즉 그래픽 인터페이스를 프로그래밍하도록 도와 주는 java API의 모음이다. 



Swing이란?


위에서 말했듯이 AWT는 내부적으로 컴포넌트를 운영체제의 GUI와 연결시키므로

실행하는 환경에 따라 컴포넌트의 모습이 다 달라, 일관된 화면을 제공하는 데에 어려움이 있었다.

그래서 나온 것이 Swing이다.


swing은 자바에서 컴포넌트를 작성 시 화면이 일관되게 나오는 GUI이다.

AWT로 GUI를 사용했던 시절에는 버튼의 롤오버나 풍선말 등을 AWT로 구현하지 못 했기 때문에

가장 큰 단계의 컨테이너만을 운영체제(AWT)로 지원하고, 그 하부의 컴포넌트들은 직접 자바 코드로 그렸었다.

그러한 불편함을 해소하기 위해 등장한 GUI가 스윙이며, 스윙은 운영체제가 대신 해주던 일을 JVM이 

대신 해줘야 하기 때문에 AWT와는 확연히 다른 구조를 가지며 주로 GUI 구성에서 많이 사용된다.

화면이 일관적이기 때문에 현재는 스윙 사용을 권장하는 편이다.




AWT의 구현


Container : 프로그램의 창의 역할을 한다. 한 개 이상의 컨테이너 위에 컴포넌트들이 올려질 영역이다.

Component : 실제로 Container 위에 올려져서 화면 구성을 담당하는 요소들이다.

Event : 컴포넌트에서 구현되는 비즈니스 로직. 즉, 컴포넌트에 의해 실행되는 기능들.


위와 같이 구현되기 때문에 필히 Container가 제일 밑에 깔리고 그 위에 Component가 올라와야 한다.

그래픽 인터페이스이기 때문에 가장 화면에 출력되는 우선 순위 같은 것도 있을 것이다.

Container를 마지막에 구현해 버린다면 컨테이너가 다른 컴포넌트를 모두 가리게 될 것이다.




AWT와 Swing이 어떤 것인 지에 대해서만 알아 보았고

자세한 사용은 너무 많은 내용을 담아야 하니 직접 인터넷을 찾아 보고 사용하자.

# 요즘 그렇게 많이 쓰이지도 않는다고 한다.

JSP에서도 이어지는 내용 중 하나라서 하나 팁을 주자면 listner의 개념에 대해 알려 주겠다. 

프로그래밍에서의 '리스너'는 특정 이벤트가 발생하기를 기다리다가 이벤트 발생 시 특정 기능을 수행하는 컴포넌트를 말한다.