




synchronized에 대한 지식은 1에서 배웠을 것이니 이 번에는



synchronized는 lock을 이용해 동기화를 수행하며 4가지의 사용 방법이 존재한다.


1. synchronized method

2. static synchronized method

3. synchronized block

4. static synchronized block




1. 인스턴스 메소드 동기화 (synchronized method)


이것은 synchronized 1 에서 배운 내용과 같다고 볼 수 있다.

클래스의 일반 메소드에 synchronized를 붙여줌으로서 인스턴스 메소드에 동기화 기능을 넣는 것이다.

이렇게 되면 객체가 생성됐을 때 synchronized를 사용한 메소드들에 대해서는 하나의 스레드만이 동작할 수 있게 된다.



2. 스태틱 메소드 동기화(static synchronized method)


static 메소드에 synchronized를 사용한 것이다.

이렇게 되면 static synchronized 메소드에 대해 lock이 하나의 객체단위가 아닌 클래스 객체 단위로 이루어진다.

같은 클래스의 모든 객체라면 static synchronized 들에 대해서는 모두 lock이 걸린다.

아니 애초에 static 메소드는 인스턴스를 통해 호출하는 것이 아니기 때문에 클래스 단위로 lock이 걸린다는 것이 맞다.

이미 synchronized static 메소드가 수행 중일 때 같은 클래스의 다른 synchronized static 메소드를 사용하려 하면 못 하게 막는 것이다.

한 클래스의 여러 static synchronized 메소드에 대해 하나 스레드만이 동작하는 것이다.
 



밑의 내용은 조금 복잡하다. 어렵지는 않으니 잘 보고 이해하도록 하자.



3. 인스턴스 메소드 안의 동기화 블록(synchronized block)


Synchronized1 에서 공부할 때에 원하는 병렬 수행을 원하는 로직이 전부 막히는 경우도 있다고 했다.

그걸 방지하기 위해 있는 것이 동기화 블록이다.

동기화 블록은 동기화려는 로직 부분을 직접 지정해서 그 부분에 대해서만 동기화가 이루어지게 하는 기능이다.

그래서 메소드의 선언부에 synchronized를 적는 것이 아니고 메소드 내부에 동기화할 부분에

synchronized(this)를 적고 {}안에 로직을 가두는 것이다.

그리고 사실 synchronized 메소드는 synchronized(this)의 범위가 전부인 메소드이다.

synchronized()의 {} -> block 부분이 메소드 전체를 가리킨다는 뜻이다.

그러니 synchronized 메소드는 일반 메소드 안에 synchronized(this)를 선언하고 {}에 로직 전체를 넣은 것이된다.



synchronized()의 예를 들면 # 예외처리 부분 제외.


public void example_method1(String thread_name) {
        
    System.out.println("이 곳은 무조건 실행");

    synchronized(this){
    System.out.println("이 곳은 동기화 돼서 기다려야 해요..");
}
}

위의 인스턴스 메소드에서 안의 로직을 보면 print문 두 개가 보일 것이다.

하나는 그냥 안에 선언되어 있고, 나머지 하나는 synchronized(this)의 내부에 선언되어 있다.

여기서 synchronized(this) 안에 선언된 로직이 바로 synchronized 처리되는 부분이다.

메소드 전체가 synchronized 되는 것이 아니고, 메소드에서 저 부분만이 synchronized 되는 것이다.

synchronized block에 해당하는 부분을 직접 지정하는 것이다.


그렇다면 같은 객체 내에 다른 synchronized block을 갖는(synchronized 메소드 포함) 메소드가 있다고 해 보자. 

다른 synchronized block을 갖는 메소드와 위의 example_method1을 동시에 실행했을 때 어떤 일이 벌어질까.

synchronized 메소드가 실행 되면서 example_method1의 "이 곳은 무조건 실행" 부분도 동시에 진행될 것이다. 

example_method1의 첫 번째 print문은 synchronized 되지 않았기 때문에 synchronized 메소드에 영향을 받지 않는다.

하지만 밑의 두 번째 print문은 synchronized(this) 즉, synchronized block에 의해 동기화 되었기 때문에

같은 인스턴스내의 다른 synchronized 로직이 실행 중이라면 그 로직의 수행이 끝날 때 까지 실행되지 않는다.

이것이 synchronized block을 통해 원하는 부분만을 동기화 하는 방법이다. 


참고로 synchronized()는 synchronized()의 형태가 같은 synchronized 로직에 접근을 lock하는 기능을 갖는다. 

즉, this라는 것은 자기 자신의 synchronized 로직들에 접근을 제한한다는 것이다. 만약 자기 자신이 Object1이라고 해 보자.

자신의 객체 내에서는 this와 Object1은 같은 말이다. 그래서 Synchronized1(Object1)을 사용하면

synchronized(this)를 한 것과 같다. 그래서 자신 객체의 모든 synchronized 로직에 접근을 불허한다. 

만약 외부의 다른 객체의 내부에서 synchronized(Object1)을 사용한 synchronized 로직을 만들었다면 어떻게 될까.

그럼 Object1 객체 내부의 synchronized(this),synchronized(Object1) 뿐만 아니라 

다른 외부의 synchronized(Object1)로직을 사용하는 모든 메소드의 접근이 lock이 걸린다.

이 원리 덕분에 외부에서 synchronized를 통해 특정 객체의 synchronized 로직을 lock 할 수 있지만

잘못하면 엉키는 경우가 생길 수도 있다.


하여튼 위의 synchronized()의 원리는 매우 중요하다. 이걸 알고 쓰는 것과 모르고 쓰는 것은 천지 차이이다.

예를 들어 같은 서로 다른 클래스의 객체 Object1과 Object2를 만들었다.

Object1 클래스에는 synchronized object1_method1 메소드와 일반 메소드에 synchronized(Object2)를 사용한 

object1_method2 이렇게 총 두 개의 메소드가 정의되어 있고

Object2 클래스에는 synchronized object2_method1 메소드와 일반 메소드에 synchronized(Object1)을 사용한

object2_method2 라는 메소드가 정의되어 있다고 가정하면

스레드 객체를 통해 Object2의 object2_method2를 실행하고 Object1의 object1_method1을 실행하려 하면 어떻게 될까.

실행이 안 된다. 왜냐하면 object2_method2에서 synchronized(Object1)으로 선언해 두었기 때문에

object2_method2 메소드가 스레드에서 수행 중인 이상 Object1의 object1_method1은 동시 수행이 불가능하다.

하지만 object1_method2 메소드는 어떨까? 잘 작동할 것이다.

object1_method2는 내부적으로 synchronized(Object2)를 사용하고 있기 때문에 서로 다른 synchronized 로직으로 구분된다.

그럼 다시 돌아와서 object2_method2가 수행되는 와중에 object2_method2를 또 실행하면 어떻게 될까.

작동을 안 한다. 

아마 synchronized(Object1)이 단순히 Object1의 synchronized 로직의 수행을 막는 것이라고만 알고 있었다면

object2_method2는 Object2에 해당하니 당연히 수행해야 한다고 생각하겠지만 그렇지 않다는 것이다.

# 물론 의미적으로 본다면 틀리진 않겠지만 실제로는 작동 원리가 다르다는 것이다.

synchronized()는 자신과 같은 synchronized() 형태를 갖는 로직의 수행을 막는다.

그렇기 때문에 자기 자신을 또 호출하게 되면 자기 자신은 synchronized()의 형태가 일치하기 때문에 

같은 synchronized 로직으로 인지하고 동시 수행을 막는 것이다.


이제 완벽히 이해했는가? 그렇다면 문제를 하나 내겠다.

object2_method2가 수행 중일 때 object2_method1을 실행하면 동시에 작동할까 안 할까?

정답은 "동시에 작동한다"이다. object2_method2는 synchronized(Object1) 형태이고

object2_method1는 synchronized(this(또는 Object2)) 형태를 사용하기 때문에 서로 다르게 인식하는 것이다.


이제 위의 synchronized 메소드가 같은 객체의 synchronized 로직의 수행을 lock하는 이유도 알 것이다.

synchronized 메소드는 내부적으로 synchronized(this){로직 전체}와 같기 때문에 synchronized(this) 형태에 속한다.

그렇기 때문에 같은 synchronized 메소드나 synchronized(this)를 사용하는 로직들의 수행을 lock하는 것이다.

하지만 같은 객체 내부에 synchronized(this)가 아닌 다른 object를 인자로 넘기는 synchronized 형태의 메소드가 있다면

그 메소드는 synchronized 메소드에 의해 lock 되지 않을 것이다.


그렇다면 왜 이런 일이 발생하는 걸까?

이건 내 개인적인 의견이지만 그럴싸하다.

synchronized()라는 것이 기본적으로 자기 자신, 즉 this를 사용할 거라는 걸 가정하고 만들었기 때문이 아닐까 생각한다.

보통 자기 자신에 대한 synchronized 로직으로의 접근을 제한하지 다른 객체의 synchronized 로직으로의 접근을 제한하려 들지는 않기 때문이다.

그렇다 보니 synchronized()의 ()안에 들어가게 되는 객체를 일반적으로 자신의 객체라고 인식하는 것이다.

예를 들어 Object1에서 synchronized(Object2)를 사용한다면 synchronized(Object2)에 해당하는 로직은

Object2 내부에 있는 로직이라고 생각한다는 것이다. 설마 외부에서 ()안에 다른 객체를 집어넣을 거라고는 생각치 못한 것이다.

그러니 당연히 제한 시키는 것도 Object2에 해당하는 synchronized 로직들이다.

뭐 이건 내 의견일 뿐이고 하여튼 만약 그렇다고 한다면 보통은 자기 자신의 synchronized를 위한 기능을 전헤가기 때문에

애초에 다른 객체의 메소드들과 synchronized 하는 것은 조금 엇나간 짓이라는 것이다.

하지만 그렇다고 이 기능이 있는 이상 아예 안 쓰지는 않을 것이다.

잘만 활용하면 충분히 좋은 쪽으로도 사용할 수 있을 것이다. 

그러니 synchronized()가 어떻게 동작하는 지 확실하게 알아 두는 것은 중요하다.


한 마디로 synchronized()을 정리하면 

같은 synchronized() 형태를 갖는 인스턴스 또는 클래스에 대해서 하나의 스레드만을 할당하는 것. 

이라고 할 수 있겠다. 

()안에 들어가는 대상이 lock의 대상이 아니고 ()안에 들어가는 객체가 같은 것이 동기화 대상이 되는 것.

synchronized()는 같은 synchronized() 형태를 갖는 block들에 대해 하나의 스레드만 들어가 있는 지 확인하는 것이다.



자 그럼, 위의 synchronized block은 인스턴스 메소드의 synchronized block이고 그렇다면 당연히

static 메소드들에 대한 synchronized block도 존재할 것이다. 4번을 같이 보자.



4. 스태틱 메소드 안의 동기화 블록 (static synchronized block)


static 메소드 안의 동기화 블록은 위의 인스턴스 메소드 안의 동기화 블록과 똑같다.

하지만 그 작용 범위가 클래스 단위가 된다. 즉, static 메소드에 synchronized block을 사용하면

그 synchronized block의 lock 작용 범위가 같은 synchronized() 형태를 사용하는 static method로 한정된다는 것이다.

static synchronized block은 synchronized()의 () 안에 들어가는 단위가 클래스 단위이다.

아무래도 특정 클래스의 static method 단위로 lock이 동작하다 보니 ()안에도 클래스가 들어가야 하는 것이다.

그래서 ()안에는 클래스이름.class 형식으로 클래스를 적어 주어야 한다. # 이유는 모른다. 딱히 문법이 없이 형식인 듯 하다?

그 외에는 3번의 인스턴스 메소드 안의 동기화 블록(synchronized block)과 일치한다
