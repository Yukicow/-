



클래스를 실행시키는 역할이다. 

클래스 로더가 JVM내의 런타임 데이터 영역에 바이트 코드를 배치시키면, 이것은 실행엔진에 의해 실행된다. 

실행 엔진은 클래스 로더를 통해 런타임 데이터 영역에 배치된 바이트 코드를 명령어 단위로 읽어서 실행한다.


자바 바이트코드는 기계가 바로 수행할 수 있는 언어보다는 비교적 인간이 보기 편한 형태로 기술된 것이다. 

그래서 실행 엔진은 이와 같은 바이트코드를 실제로 JVM내부에서 기계가 실행할 수 있는 형태로 변경한다. 


좀 더 자세히 말하면 

바이트 코드의 각 명령어는 1바이트 크기의 OpCode(Operation Code)와 추가 피연산자로 이루어져 있다. 

실행 엔진은 하나의 OpCode를 가져와서 피연산자와 작업을 수행한 다음, 그 다음 OpCode를 수행하는 식으로 동작한다.

이 수행 과정에서 실행 엔진은 바이트 코드를 기계가 실행할 수 있는 형태로 변경하는데 다음 두 가지 방식으로 변경한다.



1. 인터프리터


바이트 코드 명령어를 하나씩 읽어서 해석하고 실행한다. 

하나하나의 해석은 빠르지만 전체적인 실행 속도는 느리다는 단점을 가진다. 

같은 메서드라도 여러번 호출될 때 매번 새로 수행해야 한다는 단점도 있다.

JVM안에서 바이트코드는 기본적으로 인터프리터 방식으로 동작한다. 




2. JIT 컴파일러(Just-In-Time Compiler)


인터프리터의 단점을 보완하기 위해 도입된 방식으로 바이트 코드 전체를 컴파일하여 네이티브 코드로 변경하고 

이후에는 해당 메서드를 더 이상 인터프리팅 하지 않고 네이티브 코드로 직접 실행하는 방식이다. 

하나씩 인터프리팅하여 실행하는것이 아니라 바이트 코드 전체가 컴파일된 네이티브 코드를 실행하는 것이기 때문에 

전체적인 실행 속도는 인터프리팅 방식보다 빠르다.


엥? 그럼 그냥 둘 중 하나만 쳐 쓰지 왜 둘 다 쓰는 거죠?

그건 JIT 컴파일러는 모든 명령어를 전부 컴파일 하지 않고 효율적으로 하기 때문이다. 밑에 설명을 보자.


네이티브 코드는 캐시에 보관하기 때문에 한 번 컴파일된 코드는 캐시에서 바로 꺼내어 실행하기 때문에 빠르게 수행된다. 

하지만 JIT 컴파일러가 컴파일하는 과정은 바이트 코드를 하나씩 인터프리팅 하는 것보다 훨씬 오래 걸리기 때문에 

JIT 컴파일러를 사용하는 JVM은 내부적으로 해당 메서드가 얼마나 자주 호출되고 실행되는지 체크하고 

일정 기준을 넘었을 때에만 JIT 컴파일러를 통해 컴파일하여 네이티브 코드를 생성한다.

물론 이 부분의 기준이라는 것도 구현자의 재량에 맡겨둔 부분이다.


JIT 컴파일러를 통한 컴파일 과정은 바이트 코드를 바로 네이티브 코드로 만드는 것이 아니라 

안에서 IR(Intermediate Representation)로 변환하여 최적화를 수행하고 그 다음에 네이티브 코드로 변환는 과정을 거친다.

 
뭐 결국은 JIT 컴파일러도 컴파일러이기 때문에 바이트 코드를 네이티브 코드로 만드는 과정 중에 정확한 표현을 위해

중간코드를 이용하여 java의 작동 원리 -> 컴파일 과정에서 배운 여러 분석단계를 거치는 듯 하다. 


오라클 핫스팟 VM(쉽게 말해서 자바회사가 배포하는 JVM인 듯)은 핫스팟 컴파일러라고 불리는 JIT 컴파일러를 사용한다.

내부적으로 프로파일링을 통해 가장 컴파일이 필요한 부분인 핫스팟을 찾아낸 다음, 이 핫스팟을 네이티브 코드로 컴파일하기 때문이다.

핫스팟 VM은 한번 컴파일된 바이트코드라도 해당 메서드가 자주 쓰이지 않는다면 캐시에서 네이티브 코드를 덜어내고 

다시 인터프리터 모드로 동작한다.


핫스팟 VM은 서버 VM과 클라이언트 VM으로 나뉘어 있고, 각각 다른 JIT 컴파일러를 사용한다.

클라이언트 VM과 서버 VM은 동일한 런타임을 사용하지만 다른 JIT 컴파일러를 사용한다.

서버 VM에서 사용하는 Advanced Dynamic Optimizing Compiler가 더 복잡하고 다양한 성능 최적화 기법을 사용하고 있다.


자세히 들어가면 조금 복잡하니 간단하게 설명하면


Client VM은 클라이언트 모드에서 동작하는 컴파일러는 주로 프로그램의 시작 시간을 최소화하는데에 집중한다.

Server VM은 서버의 JIT은 부분적인 코드 실행보다는 전체적인 성능 최적화에 관점을 둔다.



자바가 플랫폼에 독립적이고, 이식성이 높은 언어인 이유는 인터프리터와 컴파일러 덕분이다. 

각 플랫폼에 맞는 인터프리터와 컴파일러가 바이트 코드를 실행하기 때문에 Windows, Linux, Mac 어디에서든 실행될 수 있다. 

인터프리터와 컴파일러는 바이트 코드를 읽고(read) 운영체제가 실행할 수 있도록 기계어로 변경하는 역할을 수행한다.