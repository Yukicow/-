



지금까지 JVM의 구조와 작동 원리를 공부했다.


우리는 이제 java로 코드를 생성할 때 왜 클래스와 메소드를 정의하고 그 안에 코드를 작성했는 가에 대한 이유를 알 수 있다.

java는 코드 파일 자체를 하나의 클래스로 만드는 것이다. 그래서 java로 짠 소스코드가 바이트 코드인 .class로 만들어지면

JVM은 이런 .class 파일을 하나의 클래스 객체로 받아 들이고 운용하는 것이다.

그래서 그 클래스가 참조되어 필요한 순간이 될 때마다 동적으로 메모리 상에 올려 사용하는 것이다.


그럼 자바가 어떻게 동적으로 클래스 파일을 로드하는 지 알아 보자.


모든 클래스는 그 클래스가 참조되는 순간 동적으로 JVM에 링크되며, 메모리에 로딩된다.

즉, 우리 클래스 파일은 항상 메모리에 로드되어 있는 것이 아니라 

클래스 로더의 내부적인 구조와 위임 원칙에 의해 동적으로 로딩되는 것을 알 수 있다.

그리고 그런 동적으로 로딩되는 과정은 ClassLoader에서 Class를 Load 하는 '시점'에 따라

Load-Time Dynamic Loading과 Run-Time Dynamic Loading으로 구분된다 




1. Load Time Dynamic Loading


하나의 Class를 Loading 하는 과정에서 이와 관련된  Class들을 한꺼번에 Loading 한다. 


'로드타임 동적 로딩'은 특정 클래스를 로드하기 위해 즉, 읽어 들이기 위해 필요한 다른 클래스들을 

그때 그때 동적으로 로딩해서 사용하는 것이다. 한 마디로 '클래스를 로딩할 때'에 필요한 클래스를 동적으로 불러오는 것.

이것이 '로드타임 동적 로딩'이다.


예시로 정확히 이해해 보자.


public class HelloWorld {

     public static void main(String[] args) {

        System.out.println("안녕하세요!");

     }
}


이런 코드가 있다고 해 보자.


JVM이 시작되고, 부트스 트랩 클래스 로더가 생성된 후에 모든 클래스가 상속받고 있는 Object 클래스를 읽어온다. 

그 이후에 클래스 로더는 명령행에서 지정한 HelloWorld 클래스를 로딩하기 위해 HelloWorld.class 파일을 읽는다.

HelloWorld 클래스를 로딩하는 과정에서 필요한 클래스가 존재한다. 바로 java.lang.String과 java.lang.System이다. 

String객체를 인자로 요구하고 있기 때문이다. 두 클래스는 HelloWorld 클래스를 읽어(로드)오는 과정에서, 즉 로드타임에 로딩된다.

이 처럼, 하나의 클래스를 로딩하는 과정에서 동적으로 클래스를 로딩하는 것을 로드타임 동적 로딩이라고 한다.

쉽게 말하면 로드타임 동적 로딩은 클래스를 로드하는 과정에서 필요 클래스를 동적으로 로드하는 것.





2. Runtime Dynamic Loading


객체를 참조하는 순간에 동적으로 Loading 하는 방식이다.

말 그대로 runtime, 즉 프로그램이 실행되는 중 명령어를 실행할 때에 클래스를 필요로 하면 동적으로 로딩한다는 뜻이다.

밑에 예시를 보자


public class Hello {  

	public static void main(String[] args) {  

		Class c1 = Class.forName(args[0]); 

	}  
} 

# forName() 메소드 는 지정된 클래스 이름을 가진 그 클래스의 인스턴스를 만들어 반환하는 함수이다.

# 즉, 특정 클래스의 인스턴스를 만든다는 것인데 그 클래스의 이름을 매개변수로 전달해서 만드는 방식인 것이다.



Class.forName(args[0])이 실행되기 전까지는 Hello클래스에서 어떤 클래스를 참조하는지 알 수 없다

Hello클래스의 main() 메소드가 실행되고 Class.forName(args[0])을 호출하는 순간에 args[0]에 해당하는 클래스를 읽어온다.

# args[0]에는 인자로 클래스의 이름이 들어가야할 것이다.

즉, 클래스를 로딩할 때가 아닌 '코드를 실행하는 순간'에 클래스를 로딩하는 것.


Runtime Dynamic Loding은 코드가 실행되고 있을 때, 어떤 클래스가 참조되어야 하는 순간 그 순간에 클래스를 동적으로 로딩하는 것.


한 마디로 '로드타임 동적 로딩'과 '런타임 동적 로딩'은 언제 동적 로딩이 일어나는 지의 차이만 있을 뿐이다.

'로드타임 동적 로딩'은 특정 클래스가 로드될 때 필요한 클래스를 동적으로 로드하는 것.

'런타임 동적 로딩'은 코드를 실행하는 과정에서 클래스가 참조되었을 때 그 때마다 동적으로 클래스를 로드하는 것.


쉽게 말해서 둘은 동시적이기도 하다는 것이다. 런타임 시에 명령어를 실행하며 내려가다가 클래스가 필요하면 로드를 해야 하는데

그 로드 과정 중에서 필요한 클래스들을 또 로드하는 과정이 '로드타임 동적 로딩'이고

명령어를 실행하며 내려가다가 클래스가 필요해서 그 클래스를 그 필요한 시점에 로드하려드는 것이 '런타임 동적 로딩'이다.

음~ 이 클래스가 필요하네 로드해야겠다 -> 런타임 동적 로딩

근데 이 클래스를 로드하려면 이게 필요하네? -> 로드타임 동적 로딩


