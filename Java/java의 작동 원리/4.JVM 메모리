







Jvm 메모리


JVM은 프로그램이 실행되면 스스로 OS로부터 필요한 메모리를 할당받아 그 메모리를 자신이 관리한다.

그리고 그 메모리 공간을 런타임 데이터 영역(Runtime data area)이라고 한다.


Runtime data area의 구조를 알아 보자.

런타임 데이터 영역은 크게 5개의 영역으로 나뉜다.



1. PC 레지스터(PC Register) 


PC(Program Counter) 레지스터는 현재 수행 중인 명령의 주소를 가지며 스레드가 시작될 때 생성되며 각 스레드마다 하나씩 존재한다.



2. JVM 스택(JVM Stack) 


JVM Stack 영역은 Thread의 수행정보를 기억하는 Frame을 저장하는 메모리 영역이다.

JVM 스레드가 생겨날 때, 해당 스레드를 위한 스택(stack)도 같이 만들어진다.
 
그리고 그 스택 영역은 Frame을 저장하는 메모리 영역이다.

Thread 마다 stack 영역이 하나씩 존재하며 다른 Thread에서 데이터 접근이 불가하다.

JVM 은 JVM Stack에 StackFrame을 push, pop 하는 작업만 수행한다.


그럼 Frame이란 무엇일까?

프레임은 메소드가 호출될 때마다 만들어지며, 메소드 상태 정보를 저장하는 것이다.

Method하나를 수행할떄마다 JVM은 Stack Frame을 하나씩 생성하여 Stack에 Push한다. 

이때 새로 들어간 StackFrame이 Current Frame(현재 프레임)이 된다. 

이 Method가 수행을 마치게되면 Pop되어 이전 StackFrame이 Current Frame이 된다.


쉽게 말해서 stack 영역은 Thread가 수행하고 있는 응용 프로그램을 메소드 단위로 기록한 곳이라고 할 수 있다.

그리고 프로그램은 이 stack 영역의 프레임의 순서에 맞춰 메소드 단위로 코드를 실행된다.


예제를 들자면 java는 모든 코드파일이 클래스 이니까 한 파일이 실행되면 그것도 stack영역에 프레임으로 들어갈 거고

그 파일의 코드를 순서대로 진행하다가 새로운 메소드가 실행되면 스택 영역에 그 메소드 프레임이 들어와

그 프레임을 우선으로 처리할 것이다. 다 끝나고 나면 그 프레임은 pop돼서 스택 영역에서 없어지고

위에서 배운 메모리 수행 중인 명령어를 저장해 놓는 pc 레지스터에서 전해 하던 부분을 다시 가져와서 이어서 코드를 진행할 것이다.


StackFrame은 Local Variable Section, Operand Stack, Frame Data 세 가지 영역으로 나뉜다.



2-1 Local Variable Section


Local Variable Section에는 메서드의 매개변수와 지역변수를 저장한다.

Local Variable Section에는 0부터 시작하는 인덱스를 가진 Array로 구성되어 있고 

이 Array의 인덱스를 통해 데이터에 접근하게 된다.

메서드 파라미터는 선언된 순서로 인덱스가 할당되며 로컬 변수는 Compiler가 알아서 인덱스를 할당한다.


다른 힙영역에 있는 데이터를 주소로 참조해야만 하는 변수들의 경우 reference값을 저장하고 primitive 타입은 값을 저장한다.

매개변수가 privitive 타입의 인자를 받은 경우 변수를 저장할 때 그 인자의 레퍼런스가 아닌 데이터 값을 프레임에 직접 저장한다는 뜻이다.

하지만 예시로 heap영역의 string constant pool에 있는 리터럴을 인자로 받는다면 heap 영역에 있는 그 데이터의 reference를 저장할 것이다.

# Object 타입과 reference타입은 힙에 저장된 데이터의 레퍼런스값을 저장한다고 보면 된다.


double, long은 배열 인덱스를 두 칸씩 차지한다.



2-2 Operand Stack


Operand Stack을 한 마디로 정의하면 JVM의 작업 공간이다.

연산을 위해 사용되는 데이터와 결과를 Operand Stack에 집어넣고 처리하기 때문이다.

명령어에서 특정 값들의 연산을 요청한다면 그 데이터들은 Operand Stack에 저장되어 연산동안 사용될 것이다.

그리고 그 결과도 Operand Stack에 저장된다.


int a, b, c;
a = 5;
b = 6;
c = a + b;

위의 연산을 실행한다고 가정해 보자.

먼저 Local Variable Section에 a와 b와 c의 메모리 공간이 생길 것이다.

# 물론 this에 대한 레퍼런스값을 갖는 메모리 공간도 있다. 하지만 생략하자.

그리고 Local Variable Section에서 a와 b에 각각 5와 6이라는 값이 저장될 것이다.

그럼 Local Variable Section에는 a와 b가 각각 0과 1이라는 인덱스를 갖고 데이터가 저장된다.

c = a + b 연산을 만났다. 그럼 연산 과정을 거치기 위해 a와 b의 값은 Operand Stack 영역에 들어간다.

# Local Variable Section 영역에서 Operand Stack 영역으로 데이터가 옮겨지는 게 아니고 복사되는 것이다.

그리고 두 값이 더해지고 5와 6은 빠지고 11이라는 값이 Operand Stack에 저장되어 있을 것이다.

그리고 이 11이라는 값이 Local Variable Section 영역에 있는 변수 c에 저장되고 끝난다.


로컬 변수 섹션과 마찬가지로 오퍼랜드 스택은 배열로 구성된다. 

그러나 배열 인덱스를 통해 액세스되는 지역 변수와 달리 오퍼랜드 스택은 인덱스로는 접근을 못하고 값을 푸시하고 팝하여 액세스한다.


이렇게 Operand Stack영역은 연산에 사용될 데이터를 임시로 저장하는 공간이라고 보면 된다. cpu의 레지스터와 비슷하다고 볼 수 있다.



2-3 FrameData

위의 두 가지 외에도 JVM의 스택 영역에는 상수 풀 확인, 일반 메서드 반환 및 예외 디스패치를 ​​지원하는 데이터가 포함된다. 

그리고 이러한 데이터는 Java 스택 프레임의 프레임 데이터(FrameData) 부분에 저장된다.

https://www.artima.com/insidejvm/ed2/jvm8.html

조금 복잡하고 제대로 알려 주는 곳이 없어서 나중에 다시 알아 보자.

일단 대충은 각 프레임마다 그 프레임의 데이터를 담는 곳이 필요할 것이다. 그 곳이 FrameData인 듯 하다. 

예외처리에 관련된 정보나 그 프레엠에서 사용되는 메소드의 상수 풀 정보를 갖는 듯 하다.



3. 네이티브 메서드 스택(Native Method Stack) 


JAVA 외의 언어로 작성된 네이티브 코드를 위한 스택이다. 


Java는 Java외의 언어로 작성된 프로그램, API 툴킷 등과의 통합을 쉽게 하기 위해 

JNI(Java Native Interface)라는 표준 규약을 제공하고 있다. 

즉 Native Code로 되어있는 함수의 호출을 Java 프로그램 상에서 수행할 수 있고, 리턴값 또한 받아올 수 있다.

JVM Stack 상에서 Native Method를 만나 수행하게 된다면 Native Method Stack에 Native Function을 만들어 호출하게 된다. 

Native Function이 끝나면 JVM Stack으로 다시 돌아오는데, 이때 호출한 Stack Frame으로 돌아가는게 아니라 


새로운 StackFrame을 하나 더 생성하여 다시 작업을 수행한다.

최신버전 JVM은 JVM Stack과 Native Method Stack 두 영역을 나누어 쓰지 않고 통합하여 쓰고있다. 

다만 Java Method인지 Native Method인지에 따라 StackFrame이냐 Native Stack Frame이냐를 구분한다.




위의 3가지 영역은 각 스레드 마다 하나씩 생성되고 밑에 나올 두 가지는 모든 스레드가 공유해서 사용한다.



4. 힙 


인스턴스 또는 객체를 저장하는 공간으로 가비지 컬렉션(Garbage Collection) 대상이다. 

애플리케이션의 모든 메모리 중 stack 에 있는 데이터를 제외한 부분이라고 보면 된다.

모든 Object 타입(Integer, String, ArrayList, ...)은 heap 영역에 생성된다.

heap 영역은 모든 스레드가 공유하기 때문에 몇개의 스레드가 존재하든 상관없이 단 하나의 heap 영역만 존재한다.


JVM 성능 등의 이슈에서 가장 많이 언급되는 공간이다. 힙 구성 방식이나 가비지 컬렉션 방법 등은 JVM 벤더(공급업체)들의 재량이다.



5. 메서드 영역(Method Area) 


모든 스레드가 공유하는 영역으로 JVM이 시작될 때 생성된다. 

JVM이 읽어 들인 각각의 클래스와 인터페이스에 대한 *런타임 상수 풀, 필드와 메서드에 대한 정보, 

Static 변수, 메서드의 바이트 코드 등을 보관한다.


* 런타임 상수 풀(Runtime Constant Pool) 

JVM 동작에서 가장 핵심적인 역할을 수행하는 곳으로 JVM 명세에서도 따로 중요하게 기술한다. 

각 클래스와 인터페이스의 상수만 저장하는 것이 아니라, 프로그램 내의 메소드와 필드(멤버 변수)에 대한 모든 레퍼런스까지 담고 있는 테이블로

# 클래스와 인터페이스 상수, 메소드와 필드에 대한 모든 레퍼런스를 저장한다는 뜻

어떤 메소드나 필드를 참조할 때 JVM은 런타임 상수 풀을 통해 해당 메서드나 필드의 실제 메모리상 주소를 찾아서 참조한다.


그리고 jvm 스펙에서는 메소드 영역이 논리적으로 힙의 일부여서 가비지 컬렉션에 대상이 된다고 하지만

강제적으로 메소드의 영역의 위치에 대해서 논하지 않는다고 한다. 즉, JVM 을 회사를 만드는 공급업체마다 다를 수 있다는 것이다.

일반적으로는 메소드 영역이 힙에 포함되는 듯 하다.



이렇게 JVM의 메모리 영역에 대해 알아 보았다.

그럼 이제 JVM은 메모리도 확보했고 데이터도 저장했고 각 클래스들에 대한 정보도 갖고 있다.

이제 명령어를 실행하는 일만 남은 것이다.