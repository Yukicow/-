


추상 클래스는 실체 클래스의 공통적인 부분을 추출해 어느정도 규격을 잡아놓은 추상적인 클래스이다. 

그래서 실체 클래스는 실제 객체를 생성할 정도의 구체성을 가지는 반면 

추상 클래스는 아직 메서드와 내용이 추상적이기 때문에 바로 객체를 생성할 수 없게 만들었다.

그래서 추상 클래스를 사용하기 위해서는 강제적으로 상속 또는 재정의가 필요하다.

추상 클래스도 객체의 생성이 가능하긴 하다는 것이다. 하지만 객체를 만들려면

객체를 생성해 주는 동시에 재정의가 강제되는 것들을 재정의 해 주면서 만들어야 하는 것이다.

그리고 이러한 객체를 익명 객체라고 한다.


익명 객체란 클래스의 정의 없이 바로 특정 클래스의 객체를 만들어서 원하는 대로 정의하여 만들어 낸 객체이다.

예를 들어 이미 있는 클래스를 상속받거나 추상클래스 처럼 특정 기능을 재정의 하고 추가한 객체를 만들고 싶다면

우리는 새 클래스를 만들고 부모 클래스를 상속하여 정의한 후 new를 통해 그 새 클래스의 객체를 만들 것이다.

하지만 클래스를 새로 만들어서 쓸 정도로 객체를 많이 만들 것 같지도 않고 기존 클래스와 크게 다르지 않거나 

추상 클래스 처럼 객체를 만들려면 상속이 강제되는 경우가 있다. 이럴 때 익명 객체를 사용할 수 있다.

특정 클래스의 객체를 new 를 통해 생성하고 그 뒤에 {}안에 새로 정의해 주고 싶은 내용들을 정의해 주면

기존 특정 클래스의 특징과 새로 정의한 내용들을 추가로 갖는 객체를 만들 수 있는 것이다.

새 클래스의 정의 없이 특정 기능만을 위한 단일 객체를 만들어낸 것이다.

익명 객체를 만드는 것은 하나의 객체를 만들어 내는 명령어에 해당하기 때문에 마지막에 ';'를 꼭 붙여야 한다.

{} 부분에 재정의될 구현부를 작성하고 나서 {}; 처럼 ';'를 꼭 붙여야 한다는 말이다.


인터페이스와 추상 클래스는 비슷하지만 조금 다르다.

인터페이스는 틀만 제공한다면 추상 클래스는 어느 정도 완성돼 있는 규격이 있을 수 있다.

# 요즘은 인터페이스도 정의가 어느 정도 가능해지긴 했다.

추상 클래스로 선언하지 않고 일반 실체 클래스 안의 변수나 메소드에 abstract를 사용할 수 없다.


추상 클래스는 abstract를 통해 사용자가 오버라이딩을 하도록 유도한다.

abstract를 사용하는 메소드(추상 메소드)는 추상 클래스에서 정의한 것을 그대로 사용해도 되고 오버라이딩을 해도 된다.

하지만 추상 메소드는 반드시 자식 클래스에서 반드시 재정의를 하도록 강제된다.

한 마디로 재정의가 꼭 필요한 놈들은 강제하고 아닌 놈들은 맘대로 하도록 유도하는 것이다. 



추상클래스 왜 사용할까?


1. 공통된 필드와 메서드를 통일할 목적

2. 실체클래스 구현 시, 시간절약

3. 규격에 맞는 실체클래스 구현



하지만 추상 클래스를 사용하는 것이나 일반 클래스를 사용해서 상속하는 것이나 크게 다르지 않다.

왜냐면 둘 다 고의적으로 오버라이딩을 금지하지(private)않는 한 거기서 거기이기 때문이다.

그래서 실무에서도 실제 어떤 것을 사용할 지 고민한다고 한다. 그래서 초기 설계 단계에서 

어느 정도 둘을 분리해서 생각하긴 하지만 개발 도중 언제든지 바뀌기도 한다.


일반적으로는 부모 클래스의 메소드를 꼭 재정의 해야 하는 경우 추상 클래스를 많이 쓴다.

추상 클래스는 재정의를 안 해 주면 오류가 나기 때문에 개발자로 하여금 오버라이딩을 잊지 않을 수 있기 때문인 듯 하다. 





