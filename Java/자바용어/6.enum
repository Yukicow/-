




enum(열거형)


enum은 인스턴스화와 상속이 금지된 클래스라고도 생각할 수 있다.

enum은 열거를 위해서만 만들어진 녀석이라고 볼 수 있다.

그렇기 때문에 키워드 enum을 사용하기 때문에 구현의 의도가 열거임을 분명하게 알 수 있다.


그래서 enum이 무엇을 하는 놈이냐.

아니 정확히는 무엇을 위해 나타난 녀석인 지 아는 게 중요하다.

enum은 상수의 열거를 위해 만들어졌다.

상수라는 변하지 않는 수이다. 이러한 상수들은 같은 값을 가지는 상수가 서로 다른 변수 등에 저장되기도 한다.

근데 우리는 이런 겹치는 상수로 인해서 발생하는 오류를 원천 차단할 필요가 있다.

아직은 코드를 많이 작성해 보지 않아서 어떤 경우의 수가 있는 지는 정확히 알 수 없기 때문에 조금 생략하겠다.

하여튼 이러한 상수들이 같은 자료형(데이터 타입)을 가진다면 여러 형태로 논리연산이나 비교연산이 가능해진다.

그리고 이러한 것은 정말 방대한 코드 내에서 운이 안 좋게도 나쁘게 작용할 수 있다.

그래서 우리는 이러한 경우를 완전 차단하고자 어떻게 보면 서로 관련 있는 클래스들을 패키지 단위로 묶듯이

상수들을 하나의 키워드로 묶어 상수들끼리 서로 분리시키는 것이다.


예전에는 이 과정을 객체 생성을 통해 클래스 자료형을 만듦으로서 동작하게 했다.

예를 들어

class Fruit{
    public static final Fruit APPLE  = new Fruit();
    public static final Fruit PEACH  = new Fruit();
    public static final Fruit BANANA = new Fruit();
}

class Company{
    public static final Company GOOGLE = new Company();
    public static final Company APPLE = new Company();
    public static final Company ORACLE = new COMPANY(Company);
}


이런 식으로 과일에 대한 상수와 컴퍼니에 대한 상수를 완전히 구분해서 같은 APPLE이 있더라도 서로 완전히 차단하는 것이다.

if(Fruit.APPLE == Company.APPLE)

그럼 위의 비교연산도 먹히지 않게 된다.

만약 위의 저 상수들이 평범하게 int Fruit_Apple = 1;, int Company_Apple = 1; 이런 식으로 해 놓았다면

분명 이름으로 구분은 가능하겠지만 위의 두 상수가 비교 연산이나 여러 행동으로 인해 코드 내에서 영향이 갈 수도 있는 것이다.

그걸 방지하기 위한 것이다.

근데 위의 코드를 보면 알겠지만 매우 가독성이 떨어진다.

그래서 저 위의 코드를 간략화하여 사용하고 다른 불필요한 기능을 제한하는 클래스인 enum이라는 기능을 만든 것이다.

enum의 사용법은 간단하다.


enum 클래스이름{
    상수,상수 .....
}

저기서 상수를 만들면 위의 클래스 코드의 public static final Company GOOGLE = new Company();처럼

객체를 생성하고 public static final로 정의되는 코드가 포함되어 있는 것이다.

enum Fruit{
    APPLE, PEACH, BANANA;
    }
}

여기서 APPLE, PEACH, BANANA은 각각 public static final Fruit APPLE = new Fruit(); 이 생략된 것이다.


enum은 클래스이기 때문에 클래스로서의 역할도 할 수 있다.

예를 들면 생성자 만들거나 클래스 안에 인스턴스 변수를 만들거나.

인스턴스 변수를 만들고 생성자에 그 변수의 데이터를 정의하는 명령어를 넣고 그 데이터는 

객체가 생성될 때 들어오는 인자를 필요로 한다면 위의 상수 객체들에 인자를 적어주면 된다.

enum Fruit{

    APPLE("red"), PEACH("pink"), BANANA("yellow");

    public String color;

    Fruit(String color){
        this.color = color;
    }
}


이런 식으로 사용이 가능하다.

그냥 클래스인데 상수의 열거를 위한 클래스이고 열거에 불필요한 기능을 제거했구나 라고 생각하는 게 편할 것이다.

뭐 이건 클래스라고 생각하면 당연한 거지만 위의 APPLE이나 PEACH같은 변수들은 

Fruit이라는 클래스 내에 선언된 static 변수(객체)이기 때문에 다른 곳에서 사용할 때에는

Fruit.APPLE 이런 식으로 사용해야 한다. color를 사용한다면 Fruit.APPLE.color가 될 것이다.


그럼 enum이 클래스의 기능을 몇 개 제한한 것이 있다면 반대로 enum만이 가지는 기능도 있지 않을까?

바로 그렇다. enum은 열거를 위한 클래스이기 때문에 자체적으로 클래스와 다른 기능이 있다.

그 중 특히 좋은 것이 values()라는 메소드이다. 

클래스는 우리가 클래스 안에 객체를 생성해도 어떤 객체가 있는 지 프로그래머가 인지하고 있지 않으면 사용할 수가 없다.

예를 들어 클래스 안에 APPLE이라는 변수를 만들어도 APPLE이라는 변수가 있다는 것을 모르면 사용이 불가능하다는 것이다.

하지만 enum은 마치 배열처럼 열거된 각각의 상수에 접근이 가능하다.

# 상수이기 때문에 enum 내에 정의된 상수 객체에만 접근하는 것이다. 변수같은 것들에는 접근 안 함.

뭐 이게 인덱스를 가지는 지는 모르겠는데 일단 사용하는 경우의 예를 하나 보면

for(Fruit f : Fruit.values()){
    System.out.println(f+", "+f.getColor());
}

for-each문을 통해 마치 배열값을 던져준 것처럼 작용할 수 있다는 것이다.

위의 명령어가 실행되면 Fruit이라는 enum에 담긴 상수들이 f에 하나씩 담기며 밑의 print문이 실행될 것이다.

근데 이거 하나만 해도 감지덕지인 게 저렇게 상수를 출력해서 이름을 알면 일단 뭐가 있는 지 알 수 있기 때문에

안에 있는 상수들에 대한 숙지가 가능해진다.



