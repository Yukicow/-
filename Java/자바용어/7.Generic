



Generic


Generic은 특정 변수의 자료형이나 메소드의 반환값의 자료형을 정하지 않고 임시로 둔 상태에서

객체가 만들어질 때에 그 자료형을 일괄적으로 지정해 주는 역할을 하는 녀석이라고 생각하면 된다.

<>를 통해 사용할 수 있다.


예를 들면

class Add<T>{
    public T a;

    public T b(){
        ~~
    }
}

위의 Add 클래스에는 하나의 변수와 하나의 메소드가 있다.

근데 아직 그것들의 자료형에 대해서 지정을 안 해준 상태이다.

이 때 Add클래스의 인스턴스를 만들려고 할 때 우리는 이것들의 자료형을 <>안에 지정해줄 수 있다.

Add<int> add = new Add<int>;

이런 식으로 <T>안으로 들어갈 자료형들을 지정해 주면 인스턴스가 만들어질 때 T에는 자동으로 int가 선언된다.

앞의 자료형에도 Add<int>를 쓴 이유는 너무나도 당연하다. 만든 인스턴와 같은 자료형으로 맞춘 것이다.

그냥 Add라고 할 수는 없는가?

그럼 아마도 Add<T>에 해당하는 자료형으로 보고 인스턴스에 자료형을 지정해 줘도 T에 해당하는 것들은 사용을 못 하지 않을까 싶다.

아니 아마 컴파일 과정에서는 문제가 없겠지만 런타임 도중에 오류가 발생할 것이다.

하여튼 Add<String> add = new Add<int> 같은 식으로 사용하는 건 말이 안 되지 않은가.

인스턴스는 <>안에 int가 들어가 있는데 자료형의 구조에는 String이 들어간 상태이니 뭔가 안 맞는다.

참고로 java7부터 생긴 기능인데 인스턴스 생성 시 타입을 추정할 수 있는 경우에는 타입을 생략할 수 있어졌다.

컴파일 과정에서 생략된 부분을 앞의 자료형이나 인자의 데이터 타입을 보고 유추하기 때문인 것 같다.

Add<String> add = new Add<> 이라고 하면 뒤의 new Add<>의 <>안에는 자동으로 String이 들어간다.

참고로 위의 경우에서 뒤의 <>를 빼고 사용하는 것은 안 된다. 

아예 <>를 빼버리면. Generic은 기본적으로 <Object>를 갖기 때문이다. 위에서 <>를 전부 제거 한다면

Add<Object> add = new Add<Object> 와 같은 원리가 된다.



그렇다면 Generic은 왜 사용하는가?

Generic이 어떤 기능을 하는 지 알았다면 대충 감이 오겠지만 중복을 줄이고 코드가 의도대로 흘러가게 하기 위함이다.

예시를 보자.

class StudentInfo{
    public int grade;
    StudentInfo(int grade){ this.grade = grade; }
}
class StudentPerson{
    public StudentInfo info;
    StudentPerson(StudentInfo info){ this.info = info; }
}
class EmployeeInfo{
    public int rank;
    EmployeeInfo(int rank){ this.rank = rank; }
}
class EmployeePerson{
    public EmployeeInfo info;
    EmployeePerson(EmployeeInfo info){ this.info = info; }
}
public class GenericDemo {
    public static void main(String[] args) {
        StudentInfo si = new StudentInfo(2);
        StudentPerson sp = new StudentPerson(si);
        System.out.println(sp.info.grade); // 2
        EmployeeInfo ei = new EmployeeInfo(1);
        EmployeePerson ep = new EmployeePerson(ei);
        System.out.println(ep.info.rank); // 1
    }
}


얼핏 봐도 중복되는 곳이 많다. 그럼 이것을 줄이기 위해 할 수 있는 예제를 보자.

class StudentInfo{
    public int grade;
    StudentInfo(int grade){ this.grade = grade; }
}
class EmployeeInfo{
    public int rank;
    EmployeeInfo(int rank){ this.rank = rank; }
}
class Person{
    public Object info;
    Person(Object info){ this.info = info; }
}
public class GenericDemo {
    public static void main(String[] args) {
        Person p1 = new Person("부장");
        EmployeeInfo ei = (EmployeeInfo)p1.info;
        System.out.println(ei.rank);
}


코드는 훨씬 깔끔해졌지만 Person이 받는 info의 자료형이 Object이기 때문에 어떤 데이터가 와도

다 받아들일 수 있다는 것이 문제가 된다. 그래서 객체를 다운 캐스팅할 때에 오류가 발생했다.

인자로 넘겨야 할 객체가 원하던 객체가 아니었기 때문에 다운 캐스팅이 불가해진 것이다.

이러한 경우를 '타입이 안전하지 않다'라고 표현한다.

우리가 원하는 경우의 수 외의 상황이 발생할 수 있다는 것이다. 

이러한 상황을 해결하고 코드의 중복을 줄이며 다운 캐스팅과 같이 귀찮을 일을 할 필요 없게끔 해 주는 장치가 Generic이다.


<> 안에는 여러개의 자료형을 지정할 수 있다.

<T, S>라고 한다면 그 객체 안에는 T와 S를 사용하여 자료형을 지정할 수 있다.

그럼 인스턴스를 생성할 때에 T와 S에 해당하는 자료형을 지정해 주면 된다.


Generic을 사용할 때에 주의해야 할 점이 있다. 바로 <> 안에는 기본 자료형이 올 수 없다는 것이다.

여기서 기본 자료형은 int,char,float,double 등등이다.

이런 기본 자료형들은 java 안에서 객체가 아니기 때문이다..

위에 String은 썼는데요? 

미안하지만 String은 기본 자료형이 아니다.

c언어를 보면 String 타입은 없다. java에서 자체적으로 만든 데이터형(객체)이라는 것이다.

하지만 이런 기본 자료형도 사용할 수 있게끔 할 수 있다. 바로 wrapper class로 만드는 것이다.

wrapper class는 기본 자료형을 마치 객체처럼 사용할 수 있도록 하기 위해 만든 클래스이다.

wrapper class안에 담긴 value에 접근하기 위해서는 wrapper class에서 제공하는 메소드를 이용할 수 있다.

Integer라는 래퍼 클래스는 intValue()를 통해 객체 안에 담긴 value를 출력할 수 있다.


그리고 이건 헷갈릴 수 있는데 코드를 하나 보자.

class EmployeeInfo{
    public int rank;
    EmployeeInfo(int rank){ this.rank = rank; }
}
class Person<T, S>{
    public T info;
    public S id;
    Person(T info, S id){ 
        this.info = info;
        this.id = id;
    }
    public <U> void printInfo(U info){
        System.out.println(info);
    }
}


어떤 것은 클래스 내에서 <U>처럼 <>안에 있고 어떤 것은 T,S처럼 그냥 문자만 오는 것이다.

이것은 <U>같이 <>를 또 사용한 경우는 그 것을 사용할 때에 <>안을 정의하도록 Generic을 한 번 더 사용한 것이라고 할 수 있고

그냥 문자만 쓴 것들은 이미 사용한 Generic안에서 정의해야 될 부분들이라는 뜻이다.

이게 무슨 소리냐. 문자만 쓴 것들은 객체를 생성할 때에 문자 안에 들어갈 자료형을 <>안에 지정해야 한다는 것이다.

하지만 <>가 들어가 있는 것들은 저것 자체로 Generic이기 때문에 인스턴스를 생성할 때가 아니고

생성된 인스턴스가 저 메소드를 호출할 때에 <>안에 들어갈 자료형을 또 지정해 주어야 한다는 것이다.

쉽게 말해서 그냥 클래스 내의 메소드가 Generic을 사용한 것. 이라고 생각하면 된다.


이러한 Generic도 Object를 상속 받는, 즉, 모든 객체면 다 Generic안에 올 수 있기 때문에

그 범위를 한정해서 사용할 수도 있다. 바로 extends 사용하는 것이다.

여기서 extends는 상속의 extends와 의미가 다르다. 아니 정확히 의미는 다르지 않지만 범위가 좀 더 넓다.

부모 클래스, 인터페이스, 추상 클래스 등등 모두 extends로 통일하기 때문이다.

예시를 보면

interface Info{
    int getLevel();
}
class EmployeeInfo implements Info{
    public int rank;
    EmployeeInfo(int rank){ this.rank = rank; }
    public int getLevel(){
        return this.rank;
    }
}
class Person<T extends Info>{
    public T info;
    Person(T info){ this.info = info; }
}

위의 인터페이스를 implements한 EmployeeInfo가 있고 Person클래스에는 Info를 extends하고 있다.

이처럼 <>안에 자료형의 특정 범위를 지정할 때에는 extends로 통일한다는 뜻이다.

이렇게 되면 T는 Info를 상속 받는 자식 클래스만이 자료형으로 올 수 있다. 


이건 당연한 거지만 만약

class Person<T extends Info>{
    public T info;
    Person(T info){ 
        this.info = info; 
        info.getLevel();
    }
}

위의 코드는 잘 작동할 것이다.

하지만 만약 T extends Info를 그냥 T라고 하면 밑의 info.getLevel()은 작동할까?

당연히 안 한다. T로 오게될 자료형이 무슨 자료형일 지 모르는데 Info를 상속 받는 클래스만이 사용 가능한

메소드를 사용하려고 하니 당연히 오류가 날 것이다. T 하나만 써 준다는 것은 T extends Object를 의미하기도 하기 때문에

Object 클래스가 제공하는 메소드를 제외하고는 사용할 수 없게되는 것이다.