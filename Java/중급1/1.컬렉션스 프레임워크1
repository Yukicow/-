


컬렉션스 프레임워크

컬렉션스 프레임워크란 데이터를 저장하는 클래스들을 표준화한 설계이다.

한 마디로 값을 담을 수 있도록 제공되는 프레임워크이다.

java에 없는 리스트같은 기능들을 컬렉션스 프레임워크가 제공하고 있다.


컬렉션스 프레임워크의 구성은 계속 가지처럼 뻗어 나가지만 가장 상위 요소로는 Collection과 Map이 있다.

Collection는 인터페이스이고 모든 Collection의 하위 객체들은 Collection을 상속 받는다. 

Collection에는 List와 Set에 대한 인터페이스가 있다.

List와 Set에도 각각 또 세부적으로 나뉘어 지지만 일반적으로 ArrayList와 HashSet이 많이 쓰인다.

List는 파이썬의 list를 생각하면 되고 Set도 파이썬의 set(집합)을 생각하면 된다.


Map은 Collection에 포함되지 않기 때문에 Collection이 제공하는 메소드를 사용하지 못 한다.

Map도 세부적으로 더 나뉘어지지만 대충 파이썬의 딕셔너리라고 생각하면 편하다.




1. List

List는 중첩을 허용하며 순서를 가진다. 일반적으로 add(),remove() 함수를 많이 사용한다.

리스트에 넣고 빼는 것을 주로 한다는 것이다.

순서를 가지기 때문에 출력을 할 때에도 편하게 인덱스를 이용해 출력할 수 있다.

그렇기 때문에 for문과 for-each문 모두 사용이 가능하다.



2. Set

파이썬의 Set처럼 집합과 관련된 기능들이 있다.

그리고 이러한 기능들은 당연히 메소드로 구현되어 있다.


합집합(Union) : A.addAll(B) A와 B의 요소를 서로 합친다.

# Set이기 때문에 겹치는 요소가 있다면 하나만 갖는다.

교집합(intersect) : A.retainAll(B) A와 B의 겹치는 요소를 반환한다.

차집합(difference) : A.removeAll(B) A와 공통되는 부분을 제거하고 반환한다.

# ()안에 아무것도 넣지 않으면 자신의 모든 요소를 없앤다.



3. Map 

Map은 파이썬의 딕셔너리라고 생각할 수 있다. Key와 Value를 갖는다.

값을 추가할 때에는 add()가 아닌 put()을 이용한다.

이러한 특성 때문에 위의 두 가지 보다 다루기가 어렵다.


예를 들어 안의 Key값과 Value값을 출력하기 위해서는 복잡한 과정을 거쳐야 한다.

keySet() 함수를 이용하거나 map.entrySet() 또는 iterator를 이용하는 방법이 있다.

iterator는 공통되는 부분이니 뒤에서 알아 보자.

keySet()은 함수의 이름처럼 객체 안에 있는 모든 요소의 Key값을 Set 데이터 타입으로 반환하는 함수이다.

그래서 for-each문과 함께 사용할 수 있다.


for('Key의 데이터 타입' '변수 이름' : 'Map객체 이름.keySet()'){
    System.out.println("Key값 : " + 변수이름 + "Value값 : " + Map객체이름.get(변수이름));
}

'Map객체 이름.keySet()'으로 반환되는 데이터 타입이 Set이기 때문에

for-each문에서는 자동으로 Set 안에 있는 요소들을 하나씩 꺼내어 '변수 이름'에 'Key의 데이터 타입'으로 저장할 것이다.

'변수 이름'에 저장된 Key값과 그 값을 이용하면 get()함수를 통해 value를 출력하고 둘의 값을 print문을 통해 출력한다.


map.entrySet()을 이용하는 것도 위와 비슷하지만 조금 다르다.

entrySet() 함수는 Map객체에 담긴 키와 벨류값들을 map클래스를 상속받는 map.entry 인터페이스 클래스에 

모두 새로 복사해 저장하고 그걸 또 Set에 담아 반환한다.

왜 map이 아니고 map.entry로 반환하냐고?

그것은 map.entry 클래스가 getKey와 getValue 메소드를 가지기 때문이다. 

map 함수에는 슬프게도 key와 value를 각각 반환하는 메소드가 없다.

그래서 그런 메소드가 있는 entry 클래스로 만들어 주고 반환하는 게 사용자 입장에서는 편하다고 생각한 듯 하다.

하긴 아마 그대로 map클래스로 반환한다면 entrySet() 메소드를 쓴 이유가 없게된다.

결국은 key값과 value 값에 각각 접근하기 위해 사용한 함수인데 똑같은 값을 반환해 준다니.

근데 그냥 map에 그 기능을 만들면 안 됐나..?

하여튼 이렇게 반환된 자료형은 Set이기 때문에 또 for-each문을 이용한다.


Set<map.entry<Key의 데이터 타입,Value의 데이터 타입>> 변수 이름1 = Map객체 이름.entrySet()

for('map.entry<Key의 데이터 타입,Value의 데이터 타입>' '변수 이름2' : '변수 이름1'){
    System.out.println("Key값 : " + 변수 이름.getKey() + "Value값 : " + 변수 이름.getValue());
}


entrySet을 통해 반환된 Set을 map.entry 데이터 타입 객체들을 요소로 갖는 Set 데이터 타입 변수에 저장한다.

그리고 그 Set을 for-each문에게 넘기면 그 안에 있는 map.entry 객체들을 하나씩 꺼내 '변수 이름2'에 저장하게 되고

우리는 '변수 이름2'를 이용해 key값과 Value값에 접근한다.


위의 코드는 한 줄 생략이 가능한데 바로 

Set<map.entry<Key의 데이터 타입,Value의 데이터 타입>> 변수 이름1 = Map객체 이름.entrySet() 

이 부분을 없애고 밑의 for문의 '변수 이름1'을 Map객체 이름.entrySet()로 대체하는 것이다.

어차피 Map객체 이름.entrySet()가 반환하는 값이 Set이니 그대로 for문에 사용해도 가능한 것.




다음 장에 계속.
