



java와 c의 배열은 한 가지 차이점이 있다.

바로 문자열이다.


기본기1에서 java는 문자열을 자료형으로 만들어 놓았다고 했다.

그렇기 때문에 배열 요소로 문자열이 그 자체로 들어갈 수 있다.

c언어 처럼 문자열을 배열로 만들고 그걸 배열에 넣는 번거로운 작업이 필요 없는 것이다.


그리고 c언어와 다르게 java의 배열은 크기를 지정해 줄 필요가 없다.

예를 들면 int a[5] = {,,,,} 이런 식으로 배열 요소의 개수를 정해 주던 c와 다르게

java는 int[] a = {,,,,} 이런 형태로 사용된다.

int형 배열을 만든다고 먼저 정의하고 변수를 적어 준 뒤에 요소를 마음껏 넣는다. 

그럼 알아서 배열의 요소만큼 배열의 크기가 결정된다.

아니면 c의 배열 선언과 비슷하게 하는 법도 있는데

int[] a = new int[5] 이렇게 선언하는 방법이다.

int형 배열 변수 a 를 먼저 선언하고 그 뒤에 new int[5] 로 5개의 정수형 배열 요소를 갖는

배열 객체를 하나 만들어 주는 것이다. 그리고 그걸 int형 배열 a에 초기화 하는 것이다.

배열 요소의 값을 초기화 해 줄 때에는 인덱스를 이용해 a[0]~a[4] 까지 값을 초기화 해 주면 된다.



메소드에서 리턴값이 배열일 때에 메소드의 자료형을 배열값으로 지정해 줄 수 있다.

ex)

public static String[] Getmembers(){
    
    members = {"코미","미클","코미클"};

    return mebers;
}


배열의 크기(요소 개수)를 구할 때에는 .length를 사용한다.

비슷하게 length()라는 함수도 있는데 이건 문자열의 길이를 구하는 함수이다.

엄연히 다른 함수다.



java의 배열은 객체이기 때문에 c의 배열과는 좀 다르다.

c의 배열은 각 인덱스의 메모리에 각각의 데이터가 하나하나 저장되는 느낌이지만

java의 배열은 인덱스 메모리에 데이터의 값이 들어가는 것이 아니고 주소값이 들어간다.

실제 데이터의 값은 다른 곳에 들어 있고 주소값을 참조하고 있는 것이다.

그래서 java에서 배열에서 가리키는 레퍼런스 값에 접근해서 값을 바꿔버리면 값이 바뀐다.

그리고 배열은 객체이기 때문에 레퍼런스 값을 출력하는데 

만약 새 배열을 만들고 그 배열이 이전에 있던 배열을 가리키게 한다면

ex) int[] arr1 = {1,2,3};
    int[] arr2 = arr1;

arr2가 인덱스에 접근하면 arr1의 인덱스에 접근하는 것과 같다.

arr2는 arr1이 가리키는 배열의 레퍼런스 값을 그대로 가지기 때문이다.

{1,2,3}에 해당하는 레퍼런스 값을 arr1이 가리킴 -> arr2가 arr1가 출력해 주는 레퍼런스 값을 가리킴 -> 즉 arr2는 {1,2,3}의 레퍼런스를 가리킴




다차원 배열을 만드는 법에 대해 알아 보자.

다차원? 별거 없지. 라고 생각할 수도 있는데 몰랐던 내용이 추가 되었으니 한 번 봐라.

다차원 배열에서 보통 []를 여러개 쓰는 걸로 끝났을 것이다.

마치 int[][] arr = new int[3][2] 처럼 선언할 때에 값을 아예 할당해 버리는데

이렇게 되면 단점이 모든 배열에 대해 [3][2]이라는 것이 정해져 버린다.

그래서 다차원 배열에서도 하나의 배열 안에 들어갈 수 있는 배열의 수를 마음대로 지정할 수 있다.

우리가 위에서 배열을 int[] arr; 로 선언하게 되면 arr에 배열의 크기를 초기화할 수 있다.

이걸 다차원 배열에 적용하면 int[][] arr = new int[5][];

위에 처럼 일차원 배열의 크기를 정해 놓은 상태에서 뒤에 올 이차원 배열의 크기는 각각 따로 지정해 주는 것이다.

int[0] = new int[2], int[1] = new int[3], int[2] = new int[5] 이렇게 일차원 배열의 요소마다 

각각 원하는 2차원 배열의 크기를 지정할 수 있는 것이다.




역시 아직 java에서도 파이썬의 list에 해당하는 것은 없다.

list는 없지만 list의 기능처럼 작용하는 ArrayList가 있는데 collection framework의 기능 중 하나이다.

여기서 프레임워크와 라이브러리의 차이를 조금 알고 넘어가면

라이브러리는 이미 사전에 정의되어 특정 기능을 할 수 있는 것이고

프레임워크는 이러한 라이브러리를 포함하며 사용자로 하여금 플랫폼을 만들기 위해 필요한 틀을 제공하는 것이다.

조금 더 쉽게 말하면 라이브러리는 우리가 함수를 호출한다거나 하는 식으로 우리가 불러내면 그 기능을 수행하고 완수한다.

이미 만들어진 기능이 바로 작동할 수 있게끔 되어있다는 것이다. 거기에 우리가 입맛에 맞게 커스터마이징이 가능해진다.

그러나 프레임워크는 우리에게 마치 프로그래밍 언어처럼 틀을 제공한다. 하지만 프로그래밍 언어는 

우리가 원초적으로 '모든' 것을 개발할 수 있게끔 어려운 언어를 쉬운 형태로 변환해 준 넒은 범위의 느낌이라면

프레임워크는 '특정 플랫폼'을 만드는데에 필요할 것 같은, 또는 자주 사용되는 기능들을 미리 라이브러리로 구현하고

기본적인 인터페이스 등을 제공한다. 그렇기 때문에 협업을 할 때에 큰 도움이될 수 있다.

기본적으로 제공되는 인터페이스 내에서는 협업자들 간에 충돌이 일어날 일이 없기 때문이다.

물론 프레임워크는 프로그래밍 언어처럼 생각하면 왜 그들이 흐름을 주도하고 있다는 것인 지 알 수 있다.

우리는 프로그래밍 언어에서 제공하는 API를 통해 코드를 작성하고 있는데 그런 프로그래밍 언어 안에서

우리는 또 프레임워크라고 하는 틀 안에서 그들이 제공하는 인터페이스와 라이브러리를 갖고 작업을 하는 것이다.

그래서 프레임워크가 코드의 흐름을 쥐고 있다고 볼 수 있는 것이다.

하지만 틀이라고 해서 프레임워크에 갇힌 것은 아니다. 프레임워크는 프로그래밍을 하는데에 있어서는 부가적인 것이기 때문에

결국은 프로그래밍 언어 자체가 가장 우선이 된다. 우리는 프로그래밍 언어에서 제공하는 API를 가장 기본 베이스로 사용할 것이고

그런 기본 베이스에 추가로 프레임워크가 제시해준 틀에 맞춰 코드를 작성해 나아가는 것이다.

하여튼 collections framework에 대해 자세히 알고 싶다면 상위 폴더에 있는 collections framework 파일을 참조하자.
