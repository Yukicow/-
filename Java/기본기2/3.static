




Static


Java에서 Static 키워드를 사용한다는 것은 메모리에 한번 할당되어 프로그램이 종료될 때 해제되는 것을 의미한다.

만약 Static을 사용한 클래스 변수를 만들면. 객체를 생성하지 않고도 Static 자원에 접근이 가능합니다.

프로그램이 실행되는 순간에 그 데이터에 대해서는 메모리에 만들어 두기 때문이다.


일반적으로 우리가 만든 Class는 Static 영역에 생성되고, new 연산을 통해 생성한 객체는 Heap영역에 생성된다.

그리고 객체의 생성시에 할당된 Heap영역의 메모리는 Garbage Collector를 통해 수시로 관리를 받는다.

하지만 Static 키워드를 통해 Static 영역에 할당된 메모리는 모든 객체가 공유하는 메모리라는 장점을 지니지만

Garbage Collector의 관리 영역 밖에 존재하므로 Static을 자주 사용하면 프로그램의 종료시까지 메모리가 할당된 채로 존재하므로 

자주 사용하게 되면 시스템의 퍼포먼스에 악영향을 주게 된다.


static 메소드를 사용할 때에는 static으로 선언한 변수만 사용해야 한다.

이게 뭔 개소리느냐 하면

static 메소드는 프로그램이 생성되자 마자 메모리에 고정된다고 했다.

이 말은 즉슨 static 메소드 안에 있는 명령어에서 쓰이는 변수들도

함께 존재해야 그 메소드가 존재할 수 있다는 것이다.

만약 static 메소드 안에 인스턴스 변수(인스턴스가 생성되야 존재하는 변수)를 사용한다면

static 메소드가 메모리상에 올라갈 때 변수들을 이해할 수 없다. 없는 변수를 사용했기 때문이다.

그래서 이러한 당연한 원리 때문에 static 메소드는 안에 인스턴스 변수를 사용할 수 없다.

static 메소드에서 인스턴스 변수를 사용한다는 것은 일반 함수를 예로 들면 아직 선언도 안된 변수를 쓰려는 것과 같다.


그래서 static은 클래스 변수를 선언할 때에 사용한다.

static을 붙이면 프로그램이 시작되는 순간 메모리 공간을 할당 받으니 클래스 변수로 쓰기 딱이다.

모든 인스턴스가 공통으로 가지는 내용이며 static 클래스 변수의 값이 변하면 그냥 선언한 변수의 값이 

바뀐다고 생각할 수도 있다. 그래서 모든 인스턴스에서 사용된 static 클래스 변수의 값도 같이 변한다.

그리고 인스턴스와 클래스 내에서 뿐만이 아니라 그 static 클래스 변수 자체적으로 다른 곳에서도

변수로서 사용될 수 있다. 


예를 들어 보면


public class C1{

    static double PI = 3.14;
    int age = 23;

    static void PrintPI() {

        System.out.println(PI);

    }
}


이 때 PI라는 변수는 프로그램이 끝날 때 까지 메모리 상에 계속 존재할 것이며 모든 인스턴스에서 고정된 값으로 작용한다.

하지만 age는 C1이라는 클래스로 인해 인스턴스가 만들어져야만 그 인스턴스의 변수로서 저장되는 것이기 때문에

자동 호출함수에 의해 인스턴스마다 값이 달라질 수도 있고 인스턴스가 생성되기 전까지는 사용할 수 없다.

그리고 밑에 보면 static 함수가 있다. 저 함수는 static 함수이기 때문에 만들어지지 않은 age는 사용할 수 없고

프로그램이 실행되자마자 생성되는 static 변수 즉 PI에 대해서만 이용할 수 있는 것이다.


static을 쓰면 클래스 변수고 static을 쓰면 클래스 함수고 뭐 이런 개념이 아니고

static의 원리를 이해하면 그냥 그 원리를 이용한 하나의 변수와 메소드를 만든 것이다. 라고 생각할 수 있다.

그게 단지 클래스 변수와 클래스 메소드에서 딱 원하는 쓰임이랑 겹칠 뿐.

파이썬을 보면 java랑 다르게 클래스 내에 인스턴스 변수를 지정하려면 생성자에 선언과 초기화를 했죠?

그래서 파이썬은 클래스에 변수를 선언하면 클래스 안에 선언한 변수. 즉, 클래스 변수가 된다.

사실 그냥 다른 변수들처럼 선언된 일반 변수와 다를 게 없는데 클래스 안에 선언됐기 때문에 

변수를 사용하려면 클래스.변수이름을 통해 클래스에 접근해야 한다. 마치 클래스에 속해 있는 듯한 느낌을 준다.

이러한 특징 때문에 클래스 변수라고 부르는 듯 하다.

하지만 java는 클래스에 변수를 그냥 선언해 놓으면 그 클래스로 만들어지는 인스턴스의 인스턴스 변수로 동작한다.

그러면 저런 클래스 변수라는 것을 만드는 방법이 없는 것일까...바로 static을 이용하는 것이다.

클래스로 인스턴스가 생성될 때 메모리에 저장되는 변수,함수가 아닌 프로그램이 실행될 때 생성되는 변수,함수를 만드는 것.

static으로 클래스 안에 그런 변수와 함수를 만들면 클래스에 내부에 속하는 고정된 값을 만들어 언제든지 사용할 수 있다.

이것만 봐도 static이라는 게 뭐 클래스 변수,메소드를 만들어 주는 뭐 그런 용도로 만든 게 아니고 

그냥 static이 있는데 그걸 이용해서 클래스 내부에 고정된 변수와 함수를 만드는 것일 뿐이다.

위에서도 말했지만 파이썬도 사실 따지고 보면 클래스에 속해 있기 때문에 클래스 변수라고 하는 거지 뭐 거창하고 그런 게 아니다. 

지금 보니 속해 있다는 개념이 있으니 그렇게 부르는 게 맞는 말인 것 같기도 하다.

그리고 클래스 변수,함수처럼 만들려면 static을 무조건 써야 하는 것도 사실이기 때문에

static을 사용하면 클래스 변수,함수 안 쓰면 인스턴스 변수,함수가 되는 것도 맞긴 하다. 

그리고 실제로 이렇게 외우는 게 헷갈리지도 않고 더 사용하기도 쉽다.


아 그리고 변수말고 함수를 좀 예로 보면

파이썬에서는 self를 사용해서 클래스 함수와 인스턴스 함수를 나누잖아.

java는 인스턴스 함수에 클래스를 통해 접근할 수가 없는데 파이썬은 된다?

파이썬 공부할 때에도 배웠겠지만 파이썬은 아마도 static처럼 메모리에 고정시키고 사용하는 방식이 아니고

클래스 함수는 self를 인자로 넘기지 않고 인스턴스 함수는 self를 인자로 넘긴다는 거야.

그래서 그 인스턴스 함수를 호출할 때에 자동으로 자기자신을 인자로 넘기는 것이지.

그래서 마치 클래스 함수와 인스턴스 함수를 나눈 듯한 효과를 보게하는 거야.

근데 클래스를 통해서 인스턴스 함수를 호출하면 에러가 뜨는데 그 에러 이유가 인자가 없기 때문이야.

그럼 self에 대한 인자만 넘겨 주면 인스턴스 함수도 사용이 가능하겠네?

즉 클래스로 만들어진 인스턴스 자체를 클래스로 인스턴스 함수를 부르고 인자로 넘겨 주면 되는 거야.

결과론적으로 보면 java나 파이썬이나 클래스로 만들어진 인스턴스가 없으면 인스턴스 변수와 함수는 사용할 수 없는 것은 같지만

만들어진 후에, 자바는 여전히 클래스와 인스턴스는 확실하게 구분이 되고 파이썬은 클래스의 사용범위가 조금 더 넓다는 것이겠지.

뭐 그냥 다시 한 번 파이썬 공부하는 느낌으로 되짚어 봤어.

