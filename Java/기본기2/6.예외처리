



자바에도 예외처리에 대한 기능이 존재한다.

try 와 catch를 이용한다.


예외가 발생할 수 있는 가능성이 있는 명령어 사이에 사용할 수 있다.

그럼 catch 키워드가 이끄는 구문을 호출한다.

catch의 매개변수는 예외에 해당하는 클래스이고

자바에서 제공하는 Exception 클래스를 사용할 수도 있고

예외에 대한 클래스를 우리가 만들어 사용할 수도 있다.

Exception 클래스는 모든 에러에 대해서 작용하는 클래스이다.

세세한 예외에 대한 클래스들도 있으니 각각의 에러에 대응되는 catch를 사용해도 된다.

예를 들어 arrayindex에 대한 에러가 발생할 수 있는 로직이라면


catch(Ararayindex~~ 변수이름){
    ~~
}

catch(Exception 변수이름){
    ~~
}


이런 식으로 arrayindex에 대한 예외 처리와 다른 모든 예외에 대한 예외처리를 만드는 것이다.



catch에 해당하는 로직이 끝나면 try문을 빠져나오고 catch문 뒤에 있는 다음 로직들을 순차적으로 실행한다.

그렇기 때문에 오류를 발생시키고 프로그램을 종료시키고 싶다면 그에 대한 명령어를 적어야 하는 것이다.



반대로 말하면 예외가 발생해도 프로그램이 종료되지 않도록 할 수 있는 것이 try문이기도 하다.

예외에 대한 로직을 만들어 예외가 발생하면 다시 작업을 시행하게 하거나 원하는 작업을 수행할 수 있게 제어하는 것이다.


또 예외의 발생과는 상관 없이 꼭 실행되는 로직에 대한 정의도 해줄 수 있다.

finally이다. 파이썬에도 등장했었던 녀석이다.


catch(Ararayindex~~ 변수이름){
    ~~
}

catch(Exception 변수이름){
    ~~
}

finally{
    System.out.println("이것은 무조건 실행되는 것이야.")
}


"이것은 무조건 실행되는 것이야."는 예외가 발생하는 것과는 상관 없이 try문에서 무조건 나올 문장이다.



try문에서 조심해야 할 것이 하나 더 있다.

바로 다른 곳에서 사용할 변수를 try문 안에 선언하는 것이다.

try문도 {}로 처리되기 때문에 try문 안에서 선언된 변수들은 try문의 지역변수가 되어 버린다.

그래서 다른 곳에서도 사용될 가능성이 있는 변수들은 밖에서 선언하고 오류가 발생할 수 있는 부분에 대해서만

try로 감싸는 것이 좋다.



throw는 파이썬의 raise와 같은 역할을 한다.

'throw new 클래스' 를 통해 강제로 예외 클래스의 객체를 만들어 발생시킬 수 있다.


throws 라는 것도 있는데 throw와는 다르다.

예외처리는 예외에 대한 처리를 전가할 수 있다.

예를 들면 특정 함수가 있는데 함수에 있는 명령어 중에 예외가 발생할 수 있는 여지가 있는데

그것에 대한 예외 처리를 함수 내에서 처리하는 것이 아니고

그 함수를 사용하는 다른 로직에서 정의해 줄 수 있다는 것이다.

이 때 전가를 시켜주는 것이 throws이다. throws는 메소드 뒤에 'throws + 예외' 형식으로 사용하며

이 메소드가 현재 이러이러한 예외가 발생할 수 있음을 메소드 사용자에게 암시하는 역할을 하는 것이다.

예외를 여러개 throws 할 때에는 ','를 통해 예외를 구분해서 적어 주면 된다.

throws를 계속 사용해서 최종적으로 사용하는 사용자에게 떠넘길 수도 있다.


이 때 조심해야 할 것이 있다. 

예외처리는 처리가 끝나면 try문을 빠져나온다는 것이다. 두 가지 예시를 보자.


1. 예외처리가 내부일 경우.

main 메소드에서 특정 메소드를 호출한 다음에 그 안에서 예외가 발생했다고 가정해 보자. 

만약에 그 함수 내부에서 예외가 발생했는데 그 함수는 내부적으로 try를 통한 예외처리를 해 놓았다.

예외에 대한 처리가 호출된 함수 내부에서 일어났기 때문에 호출된 함수 안의 다른 명령어는 이어서 실행될 것이다.

하지만 예외가 발생하지 않았다면 이후에 실행 되었어야 할 try문 내부의 다른 명령어들은 실행이 안 된다.



2. 예외처리가 외부일 경우.

위와 반대로 호출된 함수가 예외처리를 throws해서 함수 내부가 아닌 함수를 호출한 곳에서 처리하도록 되어있다고 해 보자.

그리고 main 메소드는 호출한 함수에서 발생할 수 있는 예외에 대해 try로 예외처리를 했다면

예외처리가 발생한 곳은 호출된 함수 내부가 아니고 main 메소드가 된다.

이럴 경우 예외처리는 함수를 빠져나와 발생하기 때문에 예외처리가 끝난 후 호출한 함수로 다시 돌아가지 않는다.

왜냐면 함수를 호출하는 명령어는 외부의 try문 안에 있었고 예외처리가 끝나며 try문을 빠져 나오기 때문이다.

그러니 호출한 함수의 남은 명령 로직들은 실행되지 않고 main 메소드의 로직들이 이어서 실행될 것이다.


1번과 2번의 차이를 알겠는가? 1번은 그래도 함수 내부에서 try문을 제외한 다른 명령어들은 이어서 실행이 되지만

2번은 try문 자체가 함수 외부에 있었기 때문에 예외처리 후 함수 자체를 빠져나오는 것이다.

사실 중요한 것은 이 둘의 차이점이 아니고 예외처리 후의 try문을 빠져나온다는 점이다.

이런 경우 원하는 결과를 갖지 못 할 수도 있으니 조심하자.




예외 클래스들은 상위 부모 클래스를 상속 받아 만들어지는데 여기서 

RuntimeException을 상속받은 예외 클래스를 unchecked Exception이라고 하고

RuntimeException을 상속받지 않은 클래스를 checked Exception이라고 한다.

# 정확히는 checked Exception은 RuntimeException을 상속하지 않은 Exception들을 모두 포함하기 때문에 Error도 포함한다.


checked Exception은 반드시 try catch나 throws를 사용해 예외를 처리해야만 한다.

하지만 unchecked Exception은 해도 되고 안 해도 된다.

그래서 checked Exception을 throw 하기 위해서는 try문 안에만 사용이 가능하다.



그럼 왜 이렇게 구분을 하는 것일까

RuntimeException을 상속받은 unchecked Exception은 말 그대로 런타임 도중 발생한다.

시스템 환경적으로나 input Value가 잘못된 경우 의도적으로 개발자가 설정한 조건을 위배했을 때 throw 되게 하는 등

Application 실행 도중에 발생할 수 있는 Exception이다.


unchecked Exception은 프로그래머의 오타 등, 실수로 인해 발생하는 경우가 많기 때문에 자주 발생하기도 하고

컴파일 과정에서 예외가 발생해서 웬만하면 어플리케이션이 완성되기 전에 알아차릴 만한 오류들이 대부분이다.

그리고 이런 것에 대한 예외처리가 강제적이라면 경우의 수가 너무 많아 거의 웬만한 코드 하나하나에 try문이 들어갈 것이다.


하지만 checked Exception은 주로 외부의 영향으로 발생할 수 있는 것들로서, 프로그램의 사용자들의 동작에 의해서 발생하는 경우가 많다.

예를 들면, 존재하지 않는 파일을 처리하려한다던지(FileNotFoundException)

실수로 클래스의 이름을 잘못 적었다던가(ClassNotFoundException)

입력한 데이터의 형식이 잘못되었다던가(DataFormatException) 하는 경우에 발생하는 예외들이다.

그렇기 때문에 사용자들로 하여금 사용자에게 잘못한 게 있다는 것을 알리기 위한 처리가 필요한 것이다.

프로그래머는 오류가 발생하면 대충 알아먹을 수라도 있지만 사용자는 그렇지 않은 경우가 많기 때문에 명식적인 처리가 필수적이라는 것이다.

같은 프로그래머라도 만약 라이브러리를 사용하는데 내부적으로 어떻게 생겨먹은 지 몰라서 예외가 발생해도 이유를 모를 수가 있는 것이다.


위의 내용들을 직접 예외 클래스를 만들 때에도 도움이 된다.

예외 클래스를 상속할 때에 어떤 속성에 맞춰 만들 것인 지 고려하는 데에 도움이 된다.

이 기준이 모호하기 때문에 잘 선택해야 한다.

하지만 완전히 기준이 없는 것은 아니다. 일반적으로는 복구 가능성을 따진다.

한 마디로 예외를 던졌을 때 API 사용자 쪽에서 그 문제를 해결하여 다시 사용할 수 있을 것 같아 기회를 주고자 한다면

checked Exception을 사용하고 사용자가 API의 사용 방법을 어겨서 발생하는 문제거나 예외 상황이 이미 발생한 시점에서 

그냥 프로그램을 종료하는 것이 덜 위험 할 때 unchecked를 사용한다.
