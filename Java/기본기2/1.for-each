



for-each문에 대해 배우기 전에 for문의 간단한 지식 하나만 추가로 알고 가자.

for문은 일반적으로 for(초기문;조건식;증감식) 형식으로 사용된다.

이 때 for문을 무한루프 하기 위해 모든 조건을 빼고 ;;만 사용하면 while(1)과 같은 효과를 볼 수 있다.

for(;;){} 의 형태로 무한루프를 도는 for문을 만들 수 있는 것이다.




for-each는 for문에서 나온 배열을 위한 for문이라고 볼 수 있다.

약간 파이썬의 for문의 하위호환 느낌이라고 할 수 있는데


for('자료형' '배열 요소를 담을 변수' : '배열'){
    명령어;
}

형태로 사용된다.


for i in 변수 or 범위 의 형식을 갖는 파이썬 for와 어떻게 비슷한 지 보자.


먼저 변수의 자료형을 앞에 기입하고 변수를 하나 만들어 준다.

그리고 : 를 써 주고 뒤에 배열을 적어 주면

배열에 있는 값을 for문이 실행될 때 마다 하나씩 변수에 넣어서 반복한다.

이런 의미가 된다.



밑의 예제를 보자. 


String[] array = {"코미","미클","코미클"};


for(String e : array){
    System.out.println(e);
}


이런 식으로 활용이 가능하다.

배열의 index 0부터 시작해서 e라는 변수 안에 차례대로 들어가고

그 e를 가지고 명령어가 실행되는 구조인 것이다.


자바 for each 문을 사용할 때 주의해야 할 점은

오직 값을 가져다 사용할 수만 있고(read) 수정할 수 는 없다는 것(write)이다.


또한 for문은 동기 방식인 반면에 foreach문은 비동기 방식이라는 차이점이 있다.


동기 (Synchronous)와 비동기(Asynchronous)

동기 방식은 서버에서 요청을 보냈을 때 응답이 돌아와야 다음 동작을 수행할 수 있다. 

즉 A작업이 모두 진행 될때까지 B작업은 대기해야한다.

비동기 방식은 반대로 요청을 보냈을 때 응답 상태와 상관없이 다음 동작을 수행 할 수 있다. 

즉 A작업이 시작하면 동시에 B작업이 실행된다. A작업은 결과값이 나오는대로 출력된다.


그래서 for문은 에러가 발생하면 뒤의 실행들이 진행되지 않지만

foreach문은 비동기로 동시에 일어나기 때문에 모든 작업이 실행된다.
