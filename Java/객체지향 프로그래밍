



객체지향 프로그래밍을 배웠으니

객체지향 프로그래밍이 무엇인 지에 대해 이제 좀 더 정확하게 알아 볼 시간이다.


객체지향 프로그래밍은 프로그램을 여러 객체의 모임으로 이해하는 것 

즉, 명령어 단위로 보는 시각에서 벗어나 객체 단위로 바라보고 파악하고자 하는 것이다.


좀 더 좋게 말을 바꾸면

프로그래밍에서 필요한 데이터를 추상화시켜 상태와 기능을 가지는 객체를 만들고 

그 객체들 간의 유기적인 상호작용을 통해 로직을 구성하는 프로그래밍 방법이다. 라고 할 수 있겠다.



객체 지향 프로그래밍의 특징으로는 4가지가 있다.

캡슐화,상속,다형성,추상화이다.


자세한 것은 생략하고 누군가 물어 보았을 때 딱 대답하기 좋은 식으로 정리해 보겠다.


1. 추상화

불필요한 정보를 숨기고 구체적 구현과 인터페이스를 분리해서 사용할 수 있다는 특징.

# 우리가 특정 객체의 기능을 사용할 때에 그 기능의 세부 구현부까지는 몰라도 어떤 값을 도출하고 어떤 기능을 하는 지만 알고 있으면

# 제공되는 인터페이스를 통해서 충분히 사용이 가능한데 이러한 세부 구현과 인터페이스의 분리가 가능하다는 점이 추상화이다.



2. 캡슐화

객체에 필요한 데이터나 기능(메소드)을 연관이 있는 객체에 그룹화시켜주는 것을 캡슐화(Capsulation)라고 한다.

은닉화 : 객체의 세부 내용이 외부에 드러나지 않아 외부에서 데이터를 직접 접근하는 것을 방지한다.


# 은닉화와 추상화는 다르다 은닉화는 데이터 보호적인 측면이고 추상화는 편의적인 측면이다.



3. 상속

상위 클래스의 기능을 하위 클래스가 사용할 수 있는 개념이다.

여러 객체에서 사용되는 기능을 하나의 클래스로 분리해서 사용할 수 있도록 위함이다. 즉 중복되는 코드의 재사용성을 위함이다.



4. 다형성

다형성(polymorphism)이란 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미한다.

다형성은 객체가 갖는 상태와 기능을 유연하게 해 준다.
