



계속 API에 대한 개념이 모호해서 헷갈렸는데 조금 확실히 알게되었다.

먼저 요즘들어 API의 개념을 계속 REST API,Open API의 개념과 혼동해서 사용하는 듯 하다.


일단 API의 개념만 설명하면

응용 프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다.

인터페이스라는 것은 결국 규칙(규약)이 정해져 있다. 

우리가 자판기를 사용한다고 하면 우리는 자판기 내부가 어떻게 돌아가는 지 모르지만 자판기에 돈을 넣고 원하는 음료수 버튼을 누르는 것으로

음료를 뽑아 마실 수 있도록 돈 -> 음료 버튼 이라는 정해진 규칙 형식이 존재한다.


이런 무언가를 이용하기 위한 규칙 형태는 인터페이스는 아니다. 인터페이스를 사용하기 위한 방법일 뿐. 

자판기 자체가 인터페이스이다. 위와 같은 규칙은 API에서 API사양이라고 부른다.

그럼 자판기가 API인 건가요? 맞다. 자판기를 API에 비유할 수 있다. API는 인터페이스이기 때문.

그럼 API는 무엇을 사용하기 위한 인터페이스 인가요?

바로 다른 사람이 만들어 놓은 코드, 즉 *컴포넌트라고 할 수 있다.

# *컴포넌트(component)란 여러 개의 프로그램 함수들을 모아 하나의 특정한 기능을 수행할 수 있도록 구성한 작은 기능적 단위를 말한다.


엥? 다른 애플리케이션의 정보를 받아오는 거 아니었나요?

이게 바로 사람들이 많이 하는 착각이라는 것이다.

물론 프로그램이 다른 프로그램의 정보를 받아올 때에도 사용되지만 API개념은 거기서 국한되지 않는다. 

다른 애플리케이션의 정보를 받아오는 의미로 쓰이는 API는 REST API와 같은 특정 API의 개념과 가깝다.

이들은 모두 지금 내가 작성하고 있는 API에 대한 개념에서 발단된 것들인데 먼저 일반 API가 뭔지 알고나면

왜 저것들이 API라는 단어를 사용해서 나왔는 지 알 것이다.



위에서 API의 정의에는 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스라고 돼있지만

운영체제와 프로그래밍 언어가 제공하는 것 뿐만이 아니더라도 라이브러리같은 것들도 포함될 수 있다.


위의 자판기와 다시 비교를 해 보자.

우리는 프로그래밍 언어를 사용할 때에 프로그래밍 언어가 내부적으로 어떻게 작동되는 지, 즉 우리가 작성한 코드가

프로그래밍 언어 내에서 어떤 구조를 갖고 있는 지 알 수 없다.

하지만 우리는 프로그래밍 언어가 알려준 대로 명령어를 작성하면 그것들을 알아서 실행해 준다.

여기서 '프로그래밍 언어가 알려준 명령어' 즉, 그들이 제공하는 인터페이스. 바로 이것이 API이다.

우리가 프로그래밍 언어 내부적으로 구성된 기능들을 수행하기 위해 그들이 제공하는 인터페이스를 말하는 것이다.

만약 printf()라는 함수를 우리가 쓴다고 한다면 printf() 함수는 사실 c언어 내부적으로 아주 복잡하게 이루어져 있을 것이다.

하지만 우리는 프로그래밍 언어가 printf()라는 함수는요 모니터에 문자열을 출력해 주는 함수이고요 인자로 ""리터럴 문자열을 넣어주면 돼요.

이렇게 알려준 공식에 맞추어 사용하고 있는 것이다. 이러한 공식은 API 사양이다. API의 사용을 위한 사양이라는 것이다. 

'자판기의 돈 -> 원하는 음료'가 'printf()라고 쓰고 ()안에 리터럴 문자열 넣기'와 매핑되는 것이다.

이러한 다른 프로그램의 기능 등을 사용하기 위해 제공되는 저 printf()와 같은 코드의 틀(인터페이스)을 API라고 한다.


이번에는 라이브러리를 기준으로 설명해 보겠다.

먼저 라이브러리가 뭔지에 대해 알아야 하는데 라이브러리란

소프트웨어를 개발할 때 컴퓨터 프로그램이 사용하는 비휘발성 자원의 모임이다. 

비휘발성 자원이란 전원이 차단되어도 데이터를 유지하는 컴퓨터 메모리를 말한다. 

라이브러리에는 구성 데이터, 문서, 도움말 자료, 메시지 틀, 미리 작성된 코드, 서브루틴(함수), 클래스, 값, 자료형 사양을 포함할 수 있다.


대충 자판기를 제공하고 사용 설명서까지 주는 것이 라이브러리라고 볼 수 있다.


라이브러리에는 컴포넌트를 구성하는 코드가 작성되어 있을 것이다.

코드를 작성한 사람은 코드를 완전히 까버리고 보여줄 수도 있다. 자판기 구조에 대한 설계도까지 보여주는 것이다.

하지만 반대로 누군가 잘 만들어 버그가 없고 활용도가 높은 함수들이 정의된 클래스를 생성했는데

남들이 사용할 수 있도록 하되, 소스코드는 공개하고 싶지 않다면. 

해당 클래스와 관련된 변수와 함수들을 선언한 *헤더파일과 함수 정의부분을 컴파일한 목적파일을 만들고 

사용방법, 동작원리 등의 설명이 들어간 문서를 공유하면 된다.

# c언어에서 배운 .h로 끝나는 파일 include로 사용되는 파일들


즉, 작성된 헤더파일, 목적파일과 사용방법 등이 명시된 문서가 라이브러리가 되며 

이렇게 하면 라이브러리를 다운받은 사람은 코드가 어떻게 작성됐는 지는 볼 수 없다.

그리고 특정 클래스의 인자, 리턴 값 등 클래스 사용을 위한 *프로토타입 메소드가 해당 라이브러리의 API가 된다.

# *프로토타입(prototype)이란, 무언가 제품을 만드는 과정에서 시험용으로 미리 만들어보는 물건을 의미한다. 즉, 표준이라는 뜻.

이제 감이 오지 않는가? 그들이 제공한 프로토타입 메소드가 API이다.

그들이 우리에게 제공한 프로토타입 메소드는 자판기가 되는 것이고 사용 설명서는 API 사양이되는 것이다.


외부 컴포넌트는 라이브러리의 형태로 제공을 받는 경우가 많아 API와 혼동되는 경우가 많다.

라이브러리는 이런 컴포넌트 자체를 칭하고, API는 해당 컴포넌트를 활용하는 규약(인터페이스)이다.



위에서도 말했지만 API의 범위는 넓다.

위의 Libraray에 대한 설명과 API를 보면 Library의 범위 안에 포함된다라고 볼 수 있지만 라이브러리가 아닌 API 또한 존재한다. 

이는 외부 원격의 서버로 부터 서비스를 제공받는 경우이다. 즉 애플리케이션간의 데이터를 주고 받는 경우라고 할 수 있다.

일반적으로 사람들이 이 데이터를 주고 받는 경우에 API를 국한해서 설명하지만 그렇지 않다.

조금 가볍게 설명하면 'API는 특정 기능 제어를 위한 코드의 표준 틀'이라고 할 수 있다.


API를 한 마디로 정희하면 '특정 기능을 사용하기 위해 응용 프로그램(A)에 프로그래밍(P) 해야 할 코드의 형태 = 인터페이스(I)'이다.

기능을 제공하는 사람 쪽에서 '내가 너네들이 내가 만든 특정 기능을 사용할 수 있게 너희 응용 프로그램에 프로그래밍 해야 할 인터페이스를 

던져줄 테니 사용 설명서 잘 보고 그 인터페이스 이용해서 잘 써먹으렴'이 되는 것이다.


인터페이스는 두 가지 이상의 상대 간에 상호작용을 위한 '수단'이다.

너희가 만드는 응용 프로그램이 우리가 제공하는 기능과 상호작용 하려면 수단으로서 

우리가 던져 주는 이 프로토타입 코드 형태 = 인터페이스를 쓰면 돼.

근데 자판기 사용법을 모르는 사람에게 자판기를 갖다 주고 가만히 있으면 걔가 그걸 쓰디?

그것 처럼 그들이 던져준 코드도 인터페이스의 역할만 하는 것이지 그거 자체로 작동하지는 않는다.

그래서 그 인터페이스를 이용해서 원하는 행위를 끌어내기 위해서는 우리가 그 인터페이스를 사용해야 하는 것이다.

한 마디로 우리는 던져진 코드(API)를 API 사양(사용 설명서)에 맞게 사용해 우리 프로그램에서 작용할 수 있게 만들어야 하는 것이다.

뭐 인자로 뭘 넘겨 준다거나 패키지를 임포트 한다거나 그런 식으로.

API는 코드 인터페이스이고 우리는 그것을 정해진 규칙에 맞춰 우리에게 맞게 프로그래밍 함으로서 이용할 수 있는 것이다.


진짜 아직도 이해 못한 씹게이를 위해서 더 보충 설명하면

GUI 중에서 OS를 예시로 들어 보자. OS는 우리에게 아이콘 같은 그래픽 인터페이스를 제공하지?

우리가 그런 아이콘을 더블 클릭하면 프로그램이 실행되잖아. 프로그램을 실행시키는 OS의 기능을 

걔네가 제공해준 바탕화면 인터페이스에서 아이콘을 더블클릭 함으로서 작동하는 거고 이걸 빗대어 설명하면

API는 바탕화면이야. API로 특정 기능을 이용하려면 제공된 인터페이스 내에서 아이콘 더블클릭 처럼 뭔가 우리가 행위를 해야겠지?

API는 코드 형태의 인터페이스이기 때문에 더블클릭 뭐 그런 게 없어. 오로지 코드를 응용하는 행위로만 인터페이스의 이용이 가능하지.

즉 우리는 걔네가 제공한 프로토타입 코드(인터페이스)에서 코드를 조금 변경하는 형식으로 원하는 동작을 이끌어낼 수 있다는 거야.

코드를 우리에게 맞게 변경하는 작업이 바탕화면에서 아이콘을 더블클릭 하는 행위와 매팽되는 거라고.



그럼 이제 혼모노노 API를 알았으니 요즘 사람들이 많이 쓰고 원래 API의 의미를 와전시키고 있는 Opne API와 REST API에 대해 알아 보자 


API는 기능 외에도 정보를 받아올 때에 사용할 수도 있다.

정확히 말하면 정보를 받아오는 기능을 API를 통해 제공하는 것이라고 할 수 있다.

회사는 자신들이 만든 프로그램이 사용자들에게 사용되면서 흘러들어오는 정보같은 것들 

또는 자신들이 만든 프로그램이 자체적으로 알아오는 정보를 스스로 사용해야 할 경우가 많을 것이다. 

그러기 위해 자신들이 만든 프로그램이 서버로 데이터를 보내면 서버로 부터 그러한 데이터들을 받아오기 위한 API를 자체적으로 만들 것이다.

한 마디로 API라는 것은 꼭 남을 위해 만드는 것은 아니라는 것이다. 자신들이 사용하기 위해 

Open API 란 말 그대로 오픈된, 다른 응용 프로그램의 기능들 중에 모두가 사용할 수 있도록 공개한 것들에 대한 API이다. 

회사는 자신들이 만든 프로그램의 모든 기능 또는 정보를 제공할 수는 없다.





