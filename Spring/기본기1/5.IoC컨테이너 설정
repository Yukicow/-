



Spring을 다운 받아 사용할 수 있게 되었다면 우리는 Spring의 DI 기능을 사용해 볼 것이다.

# 나중에 웹을 위한 설정같은 것은 추후에 알아 보고 일단 Spring이라는 걸 사용해 보기 위해서 


Spring의 DI이 기능을 구현해 주는 것은 결국 IoC컨테이너라고 말했다.

그렇기 때문에 우리는 IoC컨테이너에게 이러이러하게 객체를 조립 = 주입(Injection) 해 달라고 명시를 해야 한다.

Spring같은 경우는 xml파일 config를 기반으로 하기 때문에 xml파일에 Bean태그로 객체의 관계를 작성함으로써 

IoC컨테이너에게 알려 주는 것이다. 

Spring boot의 경우는 위의 과정이 조금 복잡하고 귀찮으니 java config를 기반으로 해서 쉽게 사용할 수 있도록 했다.

하지만 우리는 일단 차근차근 처음부터 해 볼 것이다.


Bean태그를 사용 하는 이유는 Spring Container에서 생성되는 객체를 Bean이라고 하기 때문이다.

Bean 태그의 기본적인 사용법은 JSP의 Bean태그와 비슷하다.

먼저, xml 파일을 만들어 주어야 하는데 적당히 자신이 IoC 컨테이너를 사용해서 조립할 클래스들이 있는 패키지에 만들면 된다.

# 이게 안 헷갈리고 좋을 듯.

우리는 저번에 플러그인을 다운 받았기 때문에 new -> other -> spring의 Spring Bean Configuration File을 만들면 된다.

그럼 자동으로 뭔가 써져 있는 xml파일이 만들어지는데 그 xml 파일에 태그를 작성해서 나중에 만들어질 IoC컨테이너에게

어떤 객체를 생성하고 관리해 주면 되는 지 알리는 것이다.


IoC컨테이너에 의해 관리되는 객체들을 Spring에서는 bean이라고 하기 때문에

beans 태그 안에 bean 태그를 통해 어떤 객체를 컨테이너에게 맡길지 설정할 수 있다.


<Bean id="이름" class="패키지명포함 클래스이름"/>

id는 변수라고 생각하면 편하다. 앞으로 만들어진 빈을 호출하거나 xml내에서 사용할 때에는 저 id를 통해 빈을 구분한다.

클래스는 당연히 만들어질 객체의 바탕이 되는 클래스를 적어 주는 것이고 패키지명을 포함해서 적어야 한다.


다음은 컨테이너가 만든 객체들의 의존관계를 주입할 수 있게 setter 함수를 사용하도록 해야 하는데 

만든 빈태그에 property태그를 사용하면 된다.

우리가 만든 객체의 setter를 컨테이너에게 사용하라고 지시하는 것인데 

그렇기 때문에 setter의 이름과 인자로 넘길 객체에 대한 내용을 정의해 주어야 한다.


<bean>
    <property name="set을 제외하고 소문자로 setter의 이름을 바꾼 값" value="값" or ref ="레퍼런스"/>
</bean>


name에는 setter의 함수 이름을 작성해 주는 것이다. 하지만 정해진 규칙이 있는데

setter의 이름이 setXXX 으로 되어 있어야 하고 setXXX에서 XXX는 대문자로 시작하는데 그 대문자를 소문자로 바꾼 값을 넣는다.

그럼 컨테이너는 name에 해당하는 함수를 찾아 사용하게 된다.

예를 들어 setFood()라는 setter가 있다면 name에는 food라고 넣어 주면 된다.


value와 ref는 인자로 넘어가는 값이 벨류 타입인 지 레퍼런스 타입인 지에 따라 구분하여 넣어 주면 된다.

만약 인자가 int라면 int는 value이므로 value에 단순 정수 값을 넣으면 된다.

하지만 인자를 객체같은 레퍼런스 타입으로 받는 경우에는 ref를 사용한다. 위에서 설정한 객체의 id 값을 넣어 주면 된다.


참고로 property 태그 안의 속성들은 저렇게 property태그 안에 정의하는 게 아니고

<property name="이름">
    <value>값</value>
    <ref bean=""/>
</property>

이런 식으로 따로 property태그 안에 태그로 정의할 수도 있다.

# name은 태그로 못 씀



이렇게 하면 이제 설정이 끝났다. 

우리가 이제 컨테이너 객체를 불러서 빈을 호출하면 우리가 설정한 객체가 주입된 상태로 객체를 반환해 준다.



