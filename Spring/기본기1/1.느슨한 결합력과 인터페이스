




결합력이 강하다는 것은 무엇을 의미할까?


예시를 하나 들어 보겠다.

만약에 우리가 프로그램을 만들어서 배포를 했다고 해 보자.

안에는 트랜잭션을 관리하는 DAO 객체가 있다.

근데 사용자들의 요구사항이나 기존의 로직을 좀 더 개선하기 위해 DAO객체의 소스코드를 새로 수정하는 방법도 있겠지만

이미 배포한 프로그램의 소스코드를 구해서 다시 수정하는 것은 위험성이 있다고 한다. 왜인 지는 모르겠지만.

하여튼 그렇다면 기존의 것을 냅두고 아예 DAO객체을 다시 만들어서 사용하는 DAO 객체를 바꾸는 방법도 있을 것이다.

# 그냥 덮어 씌우지 왜 기존 것을 냅두냐고 묻는다면 잘 모른다. 하지만 기존의 DAO객체가 언제 필요하게 될 지 모르니 그런 상황이 올 수도 있다.

기존의 DAO 객체와 하는 기능은 똑같고 안의 로직에 대한 부분만 바뀌었다고 할 수 있다.


하지만 여기서 문제가 발생한다.

사용할 DAO객체를 바꾸게 되면 우리는 소스코드를 수정해야 하는 상황이 발생하게 된다.

기존의 DAO파일과 다른 클래스 파일이기 때문에 기존에 A1 a = new A1() 이었다면

A2 a = new A2()로 바꿔야 하는 것이다.

방대한 소스코드 내에서 이렇게 DAO객체를 사용하는 모든 명령어를 바꿔야 한다면 

바꿔야할 부분을 놓쳐서 오류가 날 수도 있고 여러 가지로 불편 사항이 많을 것이다.

이렇게 변화에 있어서 소스코드에 영향이 많을 수록 결합력이 높다고 표현한다.


그렇다면 결합력을 낮추는 방법이 뭐가 있을까?

먼저 인터페이스를 이용하는 것이다.

위에서 DAO객체는 결국 같은 기능을 수행한다고 했다. 안의 로직에만 변화가 있다는 것이다.

그렇다면 인터페이스를 이용해서 데이터 타입을 일정하게 유지해 준다면 결합력이 낮아질 수 있을 것이다.

A1과 A2에 대한 데이터 타입을 사용하는 게 아니고 A라는 인터페이스를 만들어서

DAO객체에 대해서는 A라는 기능을 갖게 하고 데이터 타입으로 유지한다면

나중에 DAO객체가 바뀌어도 일관적으로 A a = new A1(), A a = new A2(), A a = new A3()

이런 식으로 소스코드의 변화가 줄어들 것이다.


하지만 여기서도 아직 문제가 남아 있다.

바로 저 뒤에서 객체를 생성하는 부분이 아직 해결이 안 됐다는 것이다.

저 뒤의 객체 생성 부분도 소스코드의 변화 없이 다른 DAO 객체를 만들었을 때 바로 적용할 수 있을까?

방법이 있다. 바로 클래스를 만드는 로직을 저렇게 new 연산자가 아닌 Class 클래스를 이용하는 것이다.


특정 텍스트 파일을 하나 만들어 주도록 하자.

그 텍스트 파일에는 우리가 사용할 DAO 클래스의 패키지를 포함한 이름이 적혀있다.

FileInputStream을 통해 그 파일에서 DAO클래스의 이름을 구해오고 

Class.forName() 메소드에 그 DAO 클래스 이름을 인자로 넘겨 Class 인스턴스를 만들고 

그 인스턴스의 newInstance() 메소드로 DAO 클래스의 인스턴스를 만들어 타입을 인터페이스로 캐스팅하면 된다.

그럼 우리는 DAO 객체를 새로 만들 때마다 그 텍스트 파일의 내용을 새롭게 만든 DAO객체의 이름으로만 바꾸어 주면

소스코드의 변경 없이 원하는 DAO 객체를 생성하여 사용할 수 있게 되는 것이다.


위의 방법대로 하면 우리는 새로운 DAO 객체의 클래스 파일을 만들어서 배포 파일에 갖다 넣기만 하면 되기 때문에

훨씬 소스코드를 직접 수정하는 방법 보다 효율적일 수 있다는 것이다.



원리는 알아 봤으니 직접 어떤 식으로 동작하는 지 코드를 보자


FileInputStream fis = new FileInputStream("파일이/어디에/있을까요/파일이름");

# fis에는 DAO 클래스 파일의 이름이 담겨 있다.

Scanner sc = new Scanner(fis); 

Class clazz = Class.forName(sc.nextLine());

# DAO 클래스 파일의 이름을 인자로 넘기면 그 클래스 파일의 정보를 담고 있는 Class 인스턴스가 생긴다.

A a = (A) clazz.newInstance();

# Class 인스턴스의 newInstance()메소드를 통해 DAO 클래스 파일의 인스턴스를 생성하고 타입 캐스팅까지 해 준다.


이렇게 하면 우리가 레퍼런스 변수 a에 원하는 DAO 클래스 파일의 인스턴스를 담을 수 있다.