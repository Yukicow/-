


Mybatis란 



Mybatis에서 제공하는 어노테이션을 이용해서 Mapper를 이용할 수도 있지만

그럴 경우에 나중에 규모가 커지면 어노테이션의 길이가 너무 길어지고 복잡해지면서 가독성은 떨어지고 

그러한 DB연동이 Mybatis에 너무 의존성을 갖게되는 등의 문제가 발생한다.

따라서 보통은 어노테이션 방식보다도 xml파일을 하나 만들어서 

각 메소드와 매핑되는 sql문이나 필요하면 다른 내용 등을 작성하는데 사용한다.


사용법은 간단하다.

일단 xml파일을 하나 만들고 Mybatis에서 제공하는 xml 형식을 이용하면 된다.

xml 형식은 Mybatis 사이트에 들어가서 '시작하기 -> 매핑된 sql 구문 살펴보기' 에서 확인 가능하다.

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mybatis.example.BlogMapper">
  <select id="selectBlog" resultType="Blog">
    select * from Blog where id = #{id}
  </select>
</mapper>

위와 같은 형식을 기본적으로 갖는다.


namespace에는 매핑정보를 확인하게 될 class를 패키지 형식으로 적어주면 된다.

ex) com.newlecture.web.dao.NoticeDao

밑에 보면 <select> 태그가 보이는데 이 것은 insert, update,delete처럼 sql문의 형식에 따라 바꾸면 된다.

그리고 태그 사이에는 sql문을 넣어 주면 된다.

id에는 그 매핑되는 클래스에 있는 함수 이름을 적어 주면 되는데, 그 함수를 호출하면 태그 사이의 sql문이 실행된다.

그럼 그 함수를 실행하고 반환 타입이 있을 수 있다.

그 반환 타입은 resultType에 적어주면 되는데, 조심할 점은 반환 타입은 함수의 반환타입이 아니다. 

sql문을 통해 나온 결과 ResultSet을 통해 그 데이터들이 담기게 될 '그릇' 즉, DTO에 해당하는 클래스를 말한다.

그래서 만약에 함수의 반환타입이 List<Notice>라고 하더라도 resultType에는 Notice가 들어가는 것이다.

이 대 resultType에는 패키지 형식으로 적어주어야 하기 때문에 'com.newlecture.web.entity.Notice' 이렇게 적어야 한다.

원시타입도 적어주어야 한다.

https://mybatis.org/mybatis-3/ko/configuration.html#typeAliases

여기에 가면 각 타입과 별칭을 볼 수 있다.


이번에는 resultType과 다르게 parameterType이란 게 있다.

이건 이럴 때 사용할 수 있다.

예를 들어 insert 구문을 사용하는데 entity 객체를 인자로 받아서 거기에 있는 멤버 변수들을 이용해 값을 설정하려는 경우

인자가 특정 객체임을 지정해 줄 필요가 있다. 

그래서 parameterType에 그 패키지포함 클래스 이름을 적어주고 나면

똑같이 '#{} , ${}' 등을 이용해서 클래스의 멤버 변수들을 사용할 수 있다.

따로 사용법은 없고 멤버 변수의 이름과 똑같이 사용하면 알아서 그 값이 들어가진다.



다음은 이제 매핑되는 mapper xml 파일이 어디에 있는 지 알려야 한다.

이러한 설정은 boot의 application.properties 에 적어주면 되는데 형식은 이렇다. 

mybatis.mapper-locations=classpath:디렉토리

classpath: 뒤에는 디렉토리 형태의 xml파일 위치를 적어 주면 된다.

mybatis.mapper-locations=com/newlecture/web/dao/mybatis/mapper/*.xml

이런 식으로 사용 가능하다. xml파일은 여러개 넣을 수 있으니 *를 사용했다.

만약에 하위 폴더가 여러개 있을 것 같다면 디렉토리에 *를 넣어 줘도 된다.

근데 이 때 왜 'classpath:'를 적어 주는 지는 모르겠다.

실험해 봤는데 없어도 잘 돌아갔기 때문이다.







