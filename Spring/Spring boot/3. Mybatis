





Mybatis란 데이터베이스와의 연동 및 트랜잭션 처리에 대한 로직 작성 등을 훨씬 간편하게 도와 주는 프레임워크이다.

우리가 트랜잭션 처리를 하기 위해서는 데이터베이스와의 연결 및 로직작성, Entity객체에 데이터를 담는 등

해야할 것이 너무 많고 반복되는 코드가 많다보니 단순 노동성이 강조될 때가 많다.

하지만 이러한 귀찮은 일을 줄여 주고 쉬운 방법으로 처리할 수 있는 기능을 제공해 주는 좋은 녀석이다.


일단 Mybatis와 연동하기 전에는 DataSource에 DBMS의 정보와 계정정보를 먼저 설정해 놓아야 한다.

먼저 jdbc와 Mybatis 라이브러리를 다운 받아야 하는데 기본적으로 starter 디펜던시에서 추가가 가능하다.


프로젝트 우클릭 -> spring -> add starters 

sql -> 사용하는 jdbc 라이브러리 

sql -> Mybatis Framwork


이렇게 라이브러리를 다운받은 후에 

jdbc와 연동할 데이터베이스 정보와 계정정보를 application.properties에 작성하면 된다.

예전에 우리는 Spring을 공부할 때 DataSource라는 객체를 통해 데이터베이스 정보를 작성해 놓고 자동으로 연결을 하도록 한뒤

DataSource로부터 Connection을 얻어서 사용했다.

그 설정을 원래는 설정파일에 적어 주었는데 이제는 설정파일이 application.properties로 바뀌었으니 거기다 설정하면 된다.


설정 방법은

spring.datasource.driver-class-name=드라이버클래스

spring.datasource.url=데이터베이스url

spring.datasource.username=아이디

spring.datasource.password=비밀번호

이렇게 위의 4가지를 작성하면 된다.

그럼 Mybatis는 이 datasource에 설정된 값을 토대로 DBMS에 연결하여 DB에 있는 데이터를 다루게 된다.


이렇게 위의 과정을 모두 거쳤다면 이제 사용하기만 하면 된다.

사용법은 아주 간단하다.

트랜잭션 처리를 담당하는 Dao 인터페이스를 하나 만들고 그 위에 @Mapper 어노테이션을 적어주고 난 후에

거기에 정의된 메소드들 위에는 @Select, @Update, @Insert, @delete 등 필요에 따른 어노테이션을 적어준다.

그리고 어노테이션의 () 안에다가 sql구문을 적어주면 끝난다.

너무 간단해서 눈물이 나온다.


이 때 인터페이스의 메소드의 반환타입이 있을텐데 만약에 Select를 사용할 경우 데이터베이스에서 가져온 데이터가

거기에 있는 반환타입의 클래스(아마 DTO가 될 것)의 멤버변수에 담기게 된다.

기본적으로 그 클래스의 멤버변수와 데이터베이스의 컬럼명과 매핑되는 것들에 대해서 값을 집어넣기 때문에

같은 이름의 변수명을 갖게 설정하거나 @Result라는 어노테이션을 통해 이름이 다를 경우 매핑시킬 수도 있다.

@Result(property="", column="")가 사용 형식인데 property에는 변수명을 column에는 컬럼명을 적어주면 된다.


매핑을 여러개 할 때에는 @Results({@Result(), @Result(), ...})

이런 형태로 @Results 안에 여러개의 @Result를 사용해서 매핑할 수 있다.