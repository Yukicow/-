




저번 시간에 프로젝트를 만들었을 것이다.

가장 처음에도 말했지만 메이븐이라는 것은 결국 빌드 과정을 도와 주는 프로그램이기 때문에

우리가 위에서 특정 템플릿을 사용하든 고르지 않아서 quickstart 템플릿을 사용하든

프로젝트에 대한 설정이 이미 템플릿에 맞춰 정해져 있는 상태로 생성된다는 것이다.

이클립스에서 프로젝트를 생성했을 경우에는 처음에 프로젝트 이름도 정하고 JDK 버전도 정하고

몇 가지 중요한 것들을 정해서 만들었던 것이 기억나는가?

근데 지금 보니 메이븐으로 프로젝트 생성할 때 이름 같은 건 똑같이 적은 것 같은데 JDK버전은 선택한 적이 없다.

그렇기 때문에 템플릿에서 정해놓은 JDK버전으로 초기설정이 되어 있을 것이다.

모든 템플릿의 경우도 그 템플릿에서 사용하는 JDK버전이 default로 설정되어 있는데 

quickstart템플릿으로 만들었을 때 나의 경우 1.7로 되어 있었다.

# 메이븐의 버전에 따라 달라질 것으로 예상됨

이번에는 그런 설정을 바꾸는 방법에 대해 알아 보고 컴파일까지 할 것이다.


먼저, 이러한 설정에 대한 개념을 이해하기 위해서는 Build LifeCycle에 대해 알 필요가 있다.

그리고 그 Build LifeCycle에 대해 알기 위해서는 빌드가 무엇인 지 또 정확히 알 필요가 있다.


사실 메이븐에 대한 내용을 처음 다룰 때 알았어야 하는 내용이지만 지금이라도 정리하면

빌드란 무엇인가. 빌드는 소스코드 파일을 실행가능한 소프트웨어 산출물로 만드는 일련의 과정을 말한다. 

그럼 컴파일과 빌드의 차이점은 무엇일까?

컴파일이란 어떤 언어의 코드 전체를 다른 언어로 바꿔주는 과정이다. 보통은 어셈블리어가 된다.

컴파일은 빌드의 한 과정에 불과하다. 

프로그래밍 언어의 타입에 따라 컴파일 타입,인터프리터 타입,하이브리드 타입으로 나뉘는데 그에 따라 빌드의 과정에 좀 차이가 있다.

기본적으로 빌드의 정확한 이해를 위해서는 컴파일 타입으로 설명하는 게 좋을 것 같다.


컴파일 타입의 경우 작성한 소스코드가 프로그램이 되기 위해서는 기계어로 번역이 되어야 하는데

이 과정이 일반적으로 전처리,컴파일,어셈블,링크 이렇게 되어 있다.

전처리에 대해서는 조금 생소하니 가볍게 설명하면 뭐 컴파일 과정에서 불필요한 주석을 제거하거나

컴파일 단계에서 포함되어야 소스코드를 생성(#include, import)하는 등에 대한 작업을 처리하는 것 등이 있다.

이러한 모든 과정이 빌드에 해당되고 컴파일은 빌드의 한 과정일 뿐이다.

우리가 IDE를 사용하다 보면 컴파일을 했을 때 바로 실행파일이 나오다 보니 

마치 컴파일을 빌드로 착각하고 소스코드 파일을 실행 가능 파일로 만드는 것이라고 착각한다.

하지만 그렇지 않다는 것이다. 엄연히 빌드의 과정은 일련의 순서적인 절차가 존재한다.

메이븐이라는 것은 그러한 빌드의 과정을 도와 주는 빌드 툴에 해당한다.

메이븐을 처음 설명할 때에는 만들어진 템플릿으로 예를 들었지만 실제로 더 중점적이고 유용한 기능은 빌드 과정을 돕는 것에 있다. 


메이븐은 일반적으로 java언어를 위한 빌드 툴이기 때문에 하이브리드 타입에 해당하는 언어를 빌드한다고 할 수 있다.

# 꼭 java만 되는 것은 아니고 c#,C++ 등등도 된다고 한다.

그래서 패키징 작업도 포함된다. java의 경우는 컴파일과 인터프리트 방식을 모두 사용하는 언어이기 때문에 

exe파일이 아닌 class 파일을 통해 프로그램을 실행한다. 따라서 다른 exe하나만 있으면 실행될 수 있는 구조가 아니라서

파일 실행에 필요한 class파일들을 패키징하는 작업이 필요하다. 그걸 알고 밑에 내용을 들었으면 좋겠다.



자 그럼 이제 빌드에 대해 알았으니 Build LifeCycle에 대해 알아 보면

우리가 메이븐을 통해 만든 프로젝트도 빌드의 과정을 거쳐서 프로그램이 되어 배포가 되어야 한다.

메이븐은 이러한 프로젝트의 생성과 빌드 과정에 대한 전문툴이고 소스코드를 작성하는 기능은 없기 때문에

메이븐을 빌드 툴로서 사용하고 소스코드를 작성할 수 있는 텍스트 편집기나 IDE와 함께 사용한다.


IDE같은 경우는 굳이 메이븐같은 전문 툴이 없어도 이러한 빌드 과정을 제공하지만

메이븐과 같은 전문 툴을 이용하면 훨씬 좋은 기능들을 사용할 수 있다는 것이다.

하여튼 Build LifeCycle이라고 하면 메이븐이 프로젝트를 빌드하는 과정을 말한다.

Maven에서는 clean, build, site의 세가지 Lifecycle을 제공하고 각 LifeCycle마다 Phase를 갖는다.

Phase는 '단계'라는 뜻으로 위에서 보면 알겠지만 빌드에는 순서가 정해져 있다.

올바른 실행파일이 되기 위해서는 저 일련의 순서가 지켜져야 하는 것이다.

컴파일이 되기전에 전처리가 일어나야지 컴파일 후에 전처리를 할 수는 없지 않은가?

이처럼 메이븐의 LifeCycle은 그러한 빌드 과정에 대해 정해진 순서를 갖고 각 순서에 대한 단계를 Phase라고 한다.



clean은 빌드 시 생성되었던 산출물을 지우는 것에 대한 LifeCycle이고

Build 또는 default LifeCycle이 우리가 일반적으로 생각하는 프로젝트 빌드의 과정에 대한 LifeCycle이다.

site는 프로젝트 문서 작성, 생성에 대한 LifeCycle이다.


우리가 볼 것은 Build LifeCycle이다.

Build LifeCycle은 23가지의 Phase가 있다. 각 Phase는 빌드에 필요한 과정들을 담고 있고

각각의 단계마다 그 단계의 수행을 담당하는 프로그램이 따로 존재하는데 그것을 메이븐에서는 '플러그인'이라고한다

이러한 플러그인 안에는 또 Goal이라고 해서 정확히 정해진 역할이 있다.

쉽게 말해서 플러그인은 그냥 빌드의 과정 중 역할의 특성에 따라 프로그램을 크게 분류한 개념이고

그 안에 Goal이 실질적으로 각 Phase에서 주어진 역할을 수행하는 서브 프로그램이라고 생각하면 된다.

그렇기 때문에 같은 플러그인이 서로 다른 Phase에서 Goal에 따라 다른 수행을 하기도 한다.

예를 들면 23가지 과정에는 Compile과 관랸된 Phase는 compile와 test-compile 두 가지가 있다. 

이 Phase는 모두 Complier 라는 플러그인이 사용되고 그 중에서도 

compile페이즈는 compile Goal을 test-compile은 testCompile Goal을 사용한다.


플러그인은 메이븐에서 프로젝트를 생성했을 때 그 폴더 안으로 들어가면 POM.xml 파일이 있는데

그 곳에서 plugin 태그를 통해 버전을 설정해 줄 수 있다.


위에서 Phase는 순서가 있다고 했다. 만약에 1~23까지의 Phase 중에서 내가 7Phase를 수행한다고 하면

1~7Phase까지의 모든 단계가 수행된다. 플러그인이 설치되어 있지 않으면 그 단계는 생략하는 듯 하다.

하지만 또 몇몇 페이즈는 생략을 할 수가 없는 듯 한데 그런 페이즈의 경우 메이븐에서 기본 플러그인에 대한 정보를

알고 있어서 알아서 다운 받아서 실행되는 듯 하다. 

# 이 부분은 정확하지는 않다.

일단 중요한 것은 특정 페이즈를 실행하면 그 전에 해당하는 모든 페이즈가 순서대로 함께 수행된다는 것이다.

또 이러한 단계는 각 빌드되는 패키지의 형태에 따라 다르다.

우리는 jar이나 war의 패키지 형태를 많이 사용하게 되는데 이 jar과 war이 단계가 서로 다르다고 한다.



자 이제 LifeCycle에 대한 내용을 알았으니 우리의 프로젝트의 JDK 버전을 맞추고 컴파일해 보도록 하자.

class 파일이라는 것은 jdk에 의해 java 소스코드가 컴파일 되어 나온 파일이기 때문에 

jdk의 버전을 바꾸는 것은 컴파일러의 역할일 것이다. 

따라서 우리는 메이븐의 컴파일러의 속성을 변경해서 jdk 버전을 맞춰 줄 것이다.


우리가 만들어준 프로젝트 폴더로 이동해서 POM.xml 파일을 열고 그 안에다 작성해 줄 것이다.

예전에는 아래와 같이 plugin 태그에 configuration태그를 통해 작성했어야 했다.

<plugin>
    <artifactId>maven-compiler-plugin</artifactId>
    <version>3.8.0</version>
    <configuration>
        <source>jdk버전</source>
        <target>jdk버전</target>
    </configuration>
</plugin>


메이븐 버전이 올라가면서 위처럼 플러그인 태그가 아니고 <properties></properties> 태그를 통해 작성할 수 있게 되었다.

<properties>
    <maven.compiler.source>jdk버전</maven.compiler.source>
    <maven.compiler.target>jdk버전</maven.compiler.target>
</properties>

코드는 더 길어졌지만 복잡하게 많은 플러그인 태그들 사이에 코드를 넣어서 가독성이 떨어지는 것 보다는 나을 듯 하다.


이제 compile하기만 하면 우리가 작성한 파일이 class파일이 될 것이다.

컴파일 방법은 cmd창을 열고 우리가 만든 프로젝트의 POM.xml 파일이 있는 디렉토리로 이동해서 

mvn compile 명령어를 눌러 주면 끝이다.

# 왜 pom.xml 파일에서 해 주는 지는 모르겠는데, pom.xml을 보고 프로젝트를 구분해서 컴파일을 실행하는 듯.

그럼 프로젝트 폴더 안에 target이라는 폴더 생기는데 거기에 classes 폴더에 들어가면 

우리가 프로젝트를 패키지 안에 만들었기 때문에 패키지 폴더들이 있고 그 안에 class파일이 들어있다.


만들어진 class 파일을 실행해 보자.

cmd 창에서 패키지까지 디렉토리를 이동하고

# com/comi/hi.class에 class파일이 있다면 com 디렉토리 딱 이전까지 이동한다.

그 상태에서 'java 패키지.파일이름' 명령어로 입력하면 클래스 파일이 실행된다.



컴파일 해 보았는데 이번에는 빌드 과정 중에서 패키지 하는 과정도 해 보겠다.

컴파일하듯이 pom.xml파일이 있는 디렉토리로 가서 mvn package 명령어를 입력하면 끝이다.

그럼 target 폴더에 jar 파일이 생성되었을 것이다.


만약 compile을 안 했다면 target 파일이 없을 거라고 생각할 수도 있는데

위에서도 말했지만 이전 과정에 대한 것을 모두 실행한다.

따라서 컴파일은 당연히 실행되는 것이다. 그래서 target 파일도 있다.


그럼 jar파일을 한 번 실행해 보자.

jar의 경우에는 cmd 창에 'java -cp target\jar파일이름.jar 패키지명.파일이름' 를 통해 실행할 수 있다.

클래스가 어디에 있는 지 명시해 주어야 한다. -cp는 classpath의 줄인말이다.

내 실행할 파일이 target디렉토리의 ~~.jar 파일 안에 있고 '패키지명'안에 '파일이름'으로 존재해요 하고 알리는 것이다.

이렇게 하면 우리가 만든 소스코드가 실행파일이 되어 잘 실행된다.


만약 실행이 안 된다면 java 버전을 잘 확인해 보자.

pom.xml에 18버전처럼 최신으로 해놓고 현재 cmd 창에서 실행 중인 java는 10버전이라든가?

java -version을 통해 호환이 되는 버전인 지 확인할 것.



