







지금까지 우리는 DispatcherServlet을 통해 url 요청을 Controller에게 넘기고

다른 servlet에게 jsp파일에 대한 요청을 위임하도록 했다.

하지만 이 때 jsp파일의 접근을 바로 허용했기에 그걸 막기 위해 WEB-INF에 Views 폴더를 만들고

거기에 jsp파일을 저장함으로써 이 문제를 해결했다.


하지만 아직 문제가 하나 남았다.

우리는 DispatcherServlet의 url 매핑을 '/'으로 설정함으로써

DispatcherServlet을 default serlvet으로 설정했는데, 이 DispatcherServlet은 기본적으로

정적 리소스에 대한 접근을 막고 있다.

원래 DispatcherServlet이 아니고 spring을 사용하기 전에 default를 담당하던 톰캣에서 제공하는 DefaultServlet은

정적인 리소스(html,css,png 등등)을 처리할 수 있는 servlet에 해당했기에 문제가 없었지만

DispatcherServlet이 이러한 정적인 리소스에 대한 요청도 담당하게 되어서 문제가 생겼다.

정적인 리소스를 처리하지 못하게 설계되었는데 정적인 리소스를 담당한다니 참 곤란하다.


이를 해결하기 위한 방법이 존재한다.

가장 일반적으로 생각할 수 있는 방벙은 DefaultServlet에게 정적인 리소스에 대한 확장자 url 매핑을 통해

DispatcherServlet 보다 정적인 리소스에 대해서 url 매핑의 우선순위를 주어 정적인 리소스는 DefaultServlet에게 맡기는 것이다.

하지만 이 방법은 그다지 효율적일 것 같지는 않다.

왜냐하면 모든 정적인 리소스에 대한 url 매핑을 하나하나 해 주어야 하기 때문에 설정파일이 복잡해지고 작성도 번거롭다.


그래서 spring에서는 이를 해결하기 위한 방안을 제시했는데,

여러 가지 방법이 있는데 우리는 <mvc:resource></mvc:resource> 태그에 대해 알아 볼 것이다.

사실 이 태그의 동작원리는 정확히는 모르겠다.

그래서 이 태그의 동작 원리와 비슷하게 동작할 지도 모른다고 생각되는 

<mvc:default-servlet-handler />에 대해 먼저 알아 볼 것이다.


<mvc:default-servlet-handler/>는 DefaultServletHttpRequestHandler와 SimpleUrlHandlerMapping 빈을 생성하는 태그이다.

SimpleUrlHandlerMapping는 특정 handler에 의해 url에 매핑되는 Controller를 찾지 못 했을 때

다른 handler를 찾아 그 handler에게 Controller를 찾도록 하는 클래스이다.

정확히는 우리가 url패턴과 빈 이름을 매칭시켜서 url요청을 매핑하는 것은 기본으로 사용되는 매핑 클래스인 BeanNameUrlHandlerMapping 덕분이다.

SimpleUrlHandlerMapping도 이러한 매핑 클래스인데, BeanNameUrlHandlerMapping가 우선순위가 높아서 

BeanNameUrlHandlerMapping 객체가 요청 처리에 실패할 경우 다른 방식으로 요청 url을 매핑하여 요청을 처리해 보도록 하는 것이다.

그리고 이 SimpleUrlHandlerMapping은 url 요청에 대해 매핑된 빈을 찾아 요청을 처리한다.

그 빈은 사용자가 만든 Controller나 RequestHandler객체가 될 수 있다. 위와 같은 경우 RequestHandler객체가 될 것이다.

아마, DefaultServletHttpRequestHandler을 모든 url요청(/**)과 매핑되도록 SimpleUrlHandlerMapping에 등록해 놓았을 것이다.

DefaultServletHttpRequestHandler는 요청을 DefaultServlet에게 넘기는 역할을 한다.

여기서 말하는 DefaultServlet은 Tomcat, Jetty와 같은 녀석들이 제공해 주는 DefaultServlet을 말한다.

DefaultServletHttpRequestHandler은 이렇게 제공된 DefaultServlet을 찾아 요청을 넘기는데 우리가 이 DefaultServlet에 대한

이름을 커스텀해서 다른 것으로 바꾸어 설정했거나 다른 servlet 컨테이너를 사용할 경우에는 

DefaultServletHttpRequestHandler에 바뀐 이름을 따로 설정해야 한다.

웬만하면 우린 그럴 일이 없으니 그냥 태그만 쓰면 알아서 DefaultServletHttpRequestHandler가 요청을 DefaultServlet에게 위임한다.

그렇게 DefaultServlet에게 요청이 위임되면 이 녀석은 정적인 리소스 처리가 가능하기 때문에 정적인 리소스를 처리해 준다.



하여튼 위는 <mvc:default-servlet-handler />에 대한 내용이고

우리가 사용할 것은 <mvc:resource> 태그이다. 사실 동작 원리는 아마 위와 비슷하지 않을까 생각한다.

다만 <mvc:default-servlet-handler />는 다른 핸들러 매핑 객체에 의해 처리가 실패했을 때 

모든 요청에 대해 DefaultServletHttpRequestHandler에 의해 처리되도록 자동 설정되어 있는 듯 하고

<mvc:resource></mvc:resource>는 우리가 그 때 처리될 url의 매핑을 직접 설정할 수 있는 차이인 듯 하다.

<mvc:default-servlet-handler />는 <mvc:resource mapping="/**" location="/" />처럼 동작한다고 할 수 있다.

사용법은 밑을 참고하자.



이 태그를 사용하려면 xml파일에 처리기를 추가해 주어야 한다.

xml 파일에 들어가 보면 beans 태그에 여러가지 처리기가 url 형태로 들어가 있는 것을 볼 수 있다.

우리는 거기에 있는 거 말고 새로운 처리기를 추가해 주어야 한다.

처리기의 형태가 기존에 존재하는 처리기랑 비슷하게 생겨서 추가도 쉽다.

기본적으로 보면

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">


의 형태로 되어 있을 것이다.

여기서 xmlns="http://www.springframework.org/schema/beans"를 복사해서 

xmlns:mvc ="http://www.springframework.org/schema/mvc" 로 바꿔 주자.

그럼 xmlns는 xml namespace의 약자로 그냥 처리기의 이름을 지정한 거라고 생각하면 편하다.

앞으로 우리가 위의 url 지정한 처리기가 제공하는 태그는 <mvc:>의 형태로 사용하겠다는 의미라고 생각하면 된다.

그럼 이제 그 처리기를 등록해야 하는데 실제 등록하는 것은 xsi:schemaLocation 이부분에 해당한다.

xsi:schemaLocation 에 파일 처리기의 위치를 작성해 주면 된다.

xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

에서 http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd

이 부분을 복사하여 "" 안에 추가 한다.

그리고 위 처럼 beans라고 작성된 부분을 전부 mvc로 바꾼다.

http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd

그럼 처리기가 등록되었다.


위에서도 말했지만 xmlns:mvc ="http://www.springframework.org/schema/mvc"를 보면

http://www.springframework.org/schema/mvc 이 부분은 우리가 등록한 처리기의 이름에 해당한다.

그리고 https://www.springframework.org/schema/mvc/spring-mvc.xsd 이 부분이 실제 처리기 파일의 위치이다.

즉, 원래라면 https://www.springframework.org/schema/mvc/spring-mvc.xsd로 등록된 처리기를 사용할 때에는

http://www.springframework.org/schema/mvc라는 이름으로 사용해야 하는데 너무 길어서 불편하다.

태그를 쓸 때마다 <http://www.springframework.org/schema/mvc> 라고 사용할 수는 없다.

그래서 이걸 줄여서 이름을 붙인 게 xmlns:mvc ="http://www.springframework.org/schema/mvc"이다.

앞으로는 http://www.springframework.org/schema/mvc를 mvc라고 사용하게 되는 것이다.


하여튼 이제 처리기를 등록했다면 <mvc:resource>를 사용할 수 있게 되었다.

<mvc:resource>의 사용법은 간단하다.

<mvc:resource mapping="" location="" /> 의 형태인데

mapping에는 url 요청의 매핑 형태를 적어 주면 되고 location은 그 요청의 root를 설정해 주는 것이다.

예를 들어 /resource/~~ 형태로 들어오는 파일은 정적 파일로 인식하여 요청을 처리하고 싶다면 

mapping="/resource/**" 이라고 작성하면 된다. location에는 그 정적 리소스가 위치한 path를 적어 주면 된다.

root로서 작동하기 때문에 만약 실제 path가 /resource/images/~~.png 라고 한다면 

location=""에는 location="/resource/" 라고 적어 주면 된다.

앞의 url을 제외하고 /** 부터를 path로 보고 location=""에 지정된 디렉토리를 root로 해서 파일을 찾는다.


즉, <mvc:resource mapping="/resource/**" location="/resource/" />

라고 한다면 절대경로인 /에서 그 하위의 resource 디렉토리의 하부 디렉토리를 root로 하고 

그 뒤에 /**에 해당하는 url path를 추가하는 것이다.

/resource/images/~~.png url 요청이 들어왔다면 /resource/를 root 디렉토리로 하기 때문에

/resource/에 /**에 해당하는 images/~~.png를 추가하는 것이다.

정확히는 /images/~~.png 에 대한 url 요청으로 받아들인 것이고 images 앞에 /는 root를 나타내는 절대경로 표현이다.

이 때 root가 /resource/로 설정되어 있으니 /resource/images/~~.png 파일을 찾아 반환하는 것이다.


뭔가 말로 표현하니 복잡해 보이지만 간단한 내용이다.

그냥 <mvc:resource mapping="" location="" />  에다 mapping 형태와 root location만 설정하면 된다.

최근에는 일반적으로 webapp에 static 폴더를 추가하고 그 안에 정적 리소스를 폴더로 구분하여 전부 넣는 형식을 쓰는 듯 하다.

그 말은 즉슨, <mvc:resource mapping="" location="" />에서 mapping을 /** 로 설정하고

location은 /static/ 으로 설정하고 나머지는 url 요청을 적을 때에 static 디렉토리 안에 있는 폴더를 포함하여 적어 주기만 하면 된다.

<mvc:resource mapping="/**" location="/static/" /> 형태로 모든 요청에 대해 static root로 처리하는 형식을 많이 쓴다는 것이다.





참고로 Spring을 사용할 때 우리의 프로젝트 이름으로 context path가 지정되어 있을 텐데

spring의 DispatcherServlet은 기본적으로 context path를 '/'로 제공하기 때문에

서버 내부적으로 Forwarding이나 Redirect를 통해 페이지 요청을 할 때에 context path가 '/'로 설정된다.

그 말은 context path는 우리의 프로젝트 이름의 형태로 되어 있기 때문에 요청할 때 앞에 context path를 포함하여 요청해야 하는데  

DispatcherServlet이 context path를 기본적으로 '/'로 해서 url 요청을 하기 때문에 우리의 요청이 제대로 안 된다는 것이다.

만약에 다른 건 다 제대로 했는데 url요청을 통해 우리의 페이지에 들어갔을 때 정적 리소스가 제대로 안 보인다던가,

페이지의 이동이 제대로 안 된다면 이 context path 때문이다. 우리의 프로젝트에 정의된 context path를 포함한 요청을 해야 하는데

DispatcherServlet이 context path를 '/'로 해 버려서 요청이 제대로 안 가는 것이다.

이 context path 를 설정해 줄 수 있는데, ㅈㄴ 이상하게 spring boot는 그 기능이 있는데 일반 spring은 없는 듯 하다.

그러니 일단은 context path를 '/'로 지정하고 공부하자.


context path 지정 방법은 인터넷에 검색해도 바로 나오지만 이몸이 가볍게 알려 주면

프로젝트 우클릭 후 properties에 들어가서 web project settings 에 들어가면 context path 를 지정할 수 있다.

하지만 이 방식으로 지정할 경우 servers(프로젝트에 있는 servers 말고 실행되는 톰캣 서버)를 보면

왼쪽에 > 버튼이 있는데 그걸 누르면 우리 프로젝트에서 사용하는 서버가 하나 나오는데 그걸 삭제하고 다시 서버를 실행하면 된다.

이렇게 해 주는 이유는 아마 두 번째 방법이랑 연결되는 내용인 것 같다.


두 번째 방법은 직접 server.xml 설정을 바꾸는 것이다.

프로젝트가 있는 창에서 servers를 클릭하고 거기에 있는 server.xml에 들어간다.

그리고 <Context></Context> 태그를 찾는다. 거기에 보면 docBase와 Path에 대한 내용이 담겨 있다.

우리의 프로젝트에 해당되는 디렉토리가 ontext cath로 지정되어 있을 것이다.

path를 '/'로 바꿔 주면 된다. docBase가 context path로 지정할 실제 디렉토리 위치이고

path가 url 요청시 사용될 context path이다.

하여튼 위에서 서버를 껐다 킨 이유도 properties에서 설정을 바꾸기만 하면 그게 설정파일에 적용이 안 되는 것 같다.

서버를 껐다 키고 다시 server.xml 파일을 들어가 보면 우리가 properties에 설정한 대로 path가 바뀌어 있는 걸 볼 수 있다.