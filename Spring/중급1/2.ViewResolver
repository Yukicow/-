





전 내용에서 url 패턴으로 인해 MVC 패턴에 지장을 준다는 것을 알았다.

그렇다면 사용자가 DispatcherServlet을 꼭 거치도록 하면서 .jsp와 같은 url패턴을 통해 요청 시 접근을 불가능하게 하는 방법이 무엇이 있을까.


이런 것을 막기 위해서 개발자들이 일반적으로 사용하는 방식은 

WEB-INF 디렉토리에 View에 해당하는 파일을 넣을 수 있는 폴더를 하나 만들어 사용하는 것이다.

JSP/Servlet 컨테이너(웹 컨테이너)는 WEB-INF 디렉토리 이하를 보안상의 문제로 웹 브라우저를 통한 접근을 금지하고 있다. 

하지만 포워딩을 통한 접근은 웹 브라우저를 통하지 않기 때문에 가능하다.

그렇기 때문에 jsp 파일을 WEB-INF 디렉토리의 다른 폴더에 넣을 경우 일반적인 웹 브라우저를 통해서는 접근이 불가능하지만

Forwarding 방식으로는 접근이 가능해 진다.


이러한 원리를 이용해서 WEB-INF에 View파일을 넣을 폴더를 생성하고 안에 View 파일들을 넣는다.

그럼 .jsp 처럼 사용자가 웹 브라우저를 통해 View에 접근은 불가능해지고 일반적인 다른 url 패턴으로 접근 시에는

DispatcherServlet을 거쳐 내부적으로 접근하기 때문에 우리가 원하는 MVC 패턴의 형식을 제대로 지킬 수 있다.



이제 다음으로 알아 볼 것은 WEB-INF 내부에 있는 폴더에 접근을 할 때에 ViewName이 너무 길어지는 단점을 보완한 것이다.

바로 ViewResolver를 이용하는 것이다. 

전에 배운 내용 중 DispatcherServlet은 전달받은 결과의 ViewName을 ViewResolver 객체에게 넘기고 

이를 이용하여 view를 생성할 View객체를 검색한다는 내용이 있었다. 

ViewResolver에도 종류가 여러 가지가 있는데 각자의 방식대로 View에 해당하는 객체를 반환한다.


좀 더 자세히 알아 보면

View Resolver는 Spring의 DispatcherServlet이 Controller의 응답 결과를 가져올 때, 

어떤 방식으로 view 객체를 가져올지 정하고 해당 객체를 생성한다. View Resolver를 구현한 클래스는 

InternalResourceViewResolver, BeanNameViewResolver, XmlViewResolver, UrlBasedViewResolver 등이 있다.

DispatcherServlet은 여러개의 ViewResolver를 가질 수 있는데, 

order property에 따라 어떤 ViewResolver를 결정할지 우선순위를 정할 수 있다. 

우선순위를 명시하지 않으면 가장 낮은 우선순위를 가진다.

우선순위가 높은 ViewResolver에게 View 객체를 요청하는데, 

만약 null을 리턴한다면 그 다음 우선순위의 ViewResolver에게 객체를 요청하게 된다.

InternalResourceViewResolver는 항상 mapping되는 view 객체를 리턴하고 없다고 null을 반환하지 않으므로 항상 가장 낮은 우선순위로 두어야한다.



따로 ViewResolver를 설정하지 않으면 기본적으로 InternalResourceViewResolver가 사용된다.

이 resolver는 UrlBasedViewResolver를 상속받는 ViewResolver이다. 

UrlBasedViewResolver는 AbstractUrlBasedView를 상속받는 View 객체를 setViewClass 메소드를 통해 설정하고 

그 View 객체를 기본적으로 사용하도록 한다. AbstractUrlBasedView에서 알 수 있듯이 

요청 url을 베이스로 해서 view를 생성하는 것과 관련된 View 객체에 해당한다. 그 방식은 각각 차이가 있다.


하여튼 InternalResourceViewResolver는 InternalResourceView라는 View 객체가 기본으로 설정되어 있다.

정확히는 JSTL 라이브러리가 클래스패스에 존재할 경우 JstlView를 사용하고, 존재하지 않으면 InternalResourceView를 사용한다.

# JstlView는 InternalResourceView의 서브(자식) 클래스로 jsp를 뷰 템플릿으로 사용할 때 좀 더 많은 기능을 제공한다는 듯 하다.

InternalResourceViewResolver는 UrlBasedViewResolver를 상속 받은 ViewResolver이니 

InternalResourceViewResolver가 사용하는 View 객체도 AbstractUrlBasedView를 상속 받는 것들을 사용할 수 있다.

default로 설정된 InternalResourceView 또한 AbstractUrlBasedView를 상속 받고 있다.


InternalResourceView는 설정된 ViewName을 웹 애플리케이션 내부의 resource url로서 받아들인다.

ViewName을 웹 애플리케이션에 있는 리소스의 위치로서 사용하여 내부적으로 RequestDispatcher를 통해 Forwarding이나 Include한다.

쉽게 생각하면 우리가 ModelAndView 객체를 통해 지정한 View 이름을 이용해 실제로 그 이름에 해당하는 View파일을 찾아 반환한다는 것이다.

이 때 View 객체들에는 특정 기능이 있는데 ModelAndView에서 설정한 데이터, 설정파일, request,response 객체를 이용해서 

사용자에게 보여질 view를 만드는 기능을 포함하는 듯 하다. 그리고 이 과정을 렌더링이라고 하는 듯 하다.

InternalResourceView는 Controller에서 반환하는 ViewName을 리소스 url로서 사용하기 때문에 실제 리소스가 위치한 값을 설정해 주어야 한다.

하지만 그렇게 되면 너무 ViewName이 길어지고 쓰기가 귀찮아 진다.


그래서 InternalResourceViewResolver는 여기서 접두사와 접미사에 해당하는 값들을 우리가 지정해 줄 수가 있다.

이렇게 접두사와 접미사를 지정하면 우리가 setViewName을 통해 설정된 ViewName을 ViewResolver가 받고

그 ViewName에 설정한 접두사와 접미사를 추가하여 View 객체를 생성할 때 넘기는 듯 하다.


하지만 설정 없이 default로 지정된 InternalResourceViewResolver는 이러한 접두사와 접미사에 대한 정보를 갖지 않기 때문에

그냥 아무것도 없는 상태라고 보면 된다. 즉, 실제 경로를 다 입력해야 한다.


예를 들어 우리가 찾아야 할 View 파일의 경로가 /WEB-INF/views/index.jsp 라고 한다면

우리는 ModelAndView 객체를 통해 setViewName() 메소드에 인자로 "/WEB-INF/views/index.jsp"를 전부 넘길 것이다.

하지만 우리는 이게 불편해서 Resolver에 있는 기능의 도움을 받을 것이다.

참고로 이 기능은 UrlBasedViewResolver라는 ViewResolver에 있는 기능이다.


Front Controller가 참조하는 xml 파일에 Resolver 빈을 생성하고 그 Resolver의 특성에 맞게 설정을 해 주면 된다.

우리는 InternalResourceViewResolver를 사용할 것이다.

default로 설정된 Resolver라서 아무것도 설정되어 있지 않은 상태이기 때문에 우리가 xml파일을 통해 Resolver 빈을 생성하고

property를 통해 접두사와 접미사를 지정해 주어야 한다.


<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" />

를 통해 빈을 생성한다. id(name)은 따로 설정하지 않아도 되는데 아마 내부적으로 Resolver를 호출할 때에

interface를 통해 호출하는 방식을 취하고 있는 듯 하다. 즉, 우리는 Resolver를 만들어 두기만 하면 알아서 가져다 쓰는 것이다.

다음은 property를 통해 접두사 접미어를 설정할 것이다.

<property name="prefix" value="접두사에 해당하는 내용" />
<property name="suffix" value="접미사에 해당하는 내용" />

# prefix는 실제로 영단어에서 접두사, suffix는 접미사라는 뜻이다.


예시를 통해서 좀 더 알아 보면



<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" >
    <property name="prefix" value="/WEB-INF/views/" />
    <property name="suffix" value=".jsp" />
</bean>


/WEB-INF/views/index.jsp 라고 쓰게 될 부분에서 앞으로 공통되는 부분을 빼고 Resolver에 설정해서

View를 찾을 때 너가 알아서 붙여서 찾으라고 알린다고 생각하면 된다.

# 다른 Resolver는 View를 찾는 방식이 다르게 동작한다.


그럼 우리는 앞으로 ModelAndView를 통해 View를 설정할 때에 

접두사와 접미사로 설정한 부분은 제외하고 작성할 수가 있다.

setViewName("index") 라고만 코드를 작성해도 Resolver가 View를 찾을 때 앞에는 /WEB-INF/views/를

뒤에는 .jsp를 붙여서 찾기 때문에 우리가 원하는 형태의 파일을 알아서 찾아내 주는 것이다.