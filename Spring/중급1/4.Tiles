






웹 페이지에는 분명 페이지마다 공통으로 갖는 부분이 있다.

그 부분들을 단순히 forward 태그 등을 이용해서 페이지를 jsp에 붙여 넣어도 되겠지만

그렇게 되면 페이지가 변경되었을 때 수작업으로 다 다시 코드를 수정해 주어야 한다.

이러한 번거로움을 막고자 Tiles라는 것이 존재한다.

각 공통되는 페이지를 모듈로 분리하고 Tiles를 통해 조립하는 작업을 하는 것이다.


참고로 이 Tiles를 사용하기 위해서는 라이브러리가 필요하다.

필요한 라이브러리는 인터넷에 검색해서 다운받도록 하자, tile과 관련된 라이브러리와 jstl 라이브러리가 필요하다.


먼저 모듈화할 공통 페이지와 레이아웃에 해당되는 파일을 하나 만들게 될 것이다.

레이아웃은 말 그대로 모듈화한 페이지들이 조립될 기반이 되는 페이지이다.

그렇기 때문에 jsp(html)의 일반적인 양식을 갖추고 있어야 한다.

즉, <html> <head></head> <body></body></html> 의 모양새를 전부 갖추고 있어야 한다는 것이다.

그렇기 때문에 모듈화된 페이지들의 css <style> 등은 레이아웃 페이지에 작성하게 되고

모듈화된 페이지들은 그저 원래 jsp 파일의 <body></body>에 담기게 되는 내용 부분만 파일에 작성된 상태로

나중에 호출되어 그 레이아웃 페이지 조립되는 형태이다.



이 조립을 도와 주는 라이브러리가 있는데 그게 바로 Tiles이다.

하지만 현재는 이 Tiles의 업데이트 더 이상 없다.

이제 백엔드와 프론트엔드가 거의 분리되다 시피 프로젝트가 진행되다 보니 요즘은 프론트 엔드에서

보통 이러한 조립 작업을 진행하기 때문이다.

물론 큰 규모의 프로젝트는 아직도 벡엔드에서 어느정도 조립 작업을 하는 듯 하다.

하여튼 이렇게 프론트 엔드에서 이러한 작업을 거의 맡다 보니 현재는 Tiles의 중요성이 그다지 크지 않아서 현재 만들어진 정도만 있어도

충분하다는 뜻인 지 업데이트를 멈추게 되었다.

그럼에도 우리는 사용법을 알아 두면 좋다.


라이브러리를 사용하기 위해서 우리는 Tiles 라이브러리를 제공하는 사이트로 들어갈 것이다.

tiles.apache.org를 치고 들어가서 Documentation을 클릭 Tiles.3.0.x를 클릭

밑에 보면 여러 하이퍼링크가 있는데 거기서 Tutorial을 클릭하고 그 페이지에서 또 Creating Tiles pages 링크를 클릭한다.

그리고 살짝 밑으로 내려 보면 Create a definition에 대한 설명이 있는데 거기에 xml파일 설정 내용이 있다.

<?xml version="1.0" encoding="ISO-8859-1" ?> 이 부분은 필요 없으니 버리고 그 밑 부분을 복사한다.

내용을 읽어 보면 /WEB-INF/tiles.xml가 좋다고 하니 우리도 WEB-INF에 tiles.xml 파일을 만들어 사용할 것이다.

파일을 생성하고 복사한 내용을 붙여 넣기 한다.


이런 모양일 것이다.

<tiles-definitions>
  <definition name="myapp.homepage" template="/layouts/classic.jsp">
    <put-attribute name="title" value="Tiles tutorial homepage" />
    <put-attribute name="header" value="/tiles/banner.jsp" />
    <put-attribute name="menu" value="/tiles/common_menu.jsp" />
    <put-attribute name="body" value="/tiles/home_body.jsp" />
    <put-attribute name="footer" value="/tiles/credits.jsp" />
  </definition>
</tiles-definitions>


여기에 정의하는 내용은 우리가 사용할 View객체가 참고하게 될 내용이다.

지금까지 우리는 InternalResourceViewResolver를 사용하여 Controller에서 반환된 url에 접두사와 접미사를 붙여서

InternalResourceView객체에게 전달되고 그 url을 리소스 url로 해서 사용자에게 보여질 view를 생성하도록 했다.

하지만 Tiles를 사용하려면 InternalResourceViewResolver가 아니고 다른 ViewResolver를 사용해야 한다.

정확히 말하면 우리가 사용할 ViewResolver는 UrlBasedViewResolver인데  

InternalResourceViewResolver는 UrlBasedViewResolver를 상속 받았기 때문에 사실 InternalResourceViewResolver를 사용해도

문제가 없는 게 아닐까 하는 의심이 든다. 

# 찾아 보니 되는 것 같다. 하지만 굳이 더 복잡한 기능이 가능한 것 보다 가벼운 녀석을 쓰는게 좋지 않을까?


UrlBasedViewResolver도 Controller에서 정의된 ViewName를 이용해 자신에게 설정된 ViewClass를 통해 

View 객체를 생성해 반환한다. UrlBasedViewResolver에 설정할 View클래스는 TilesView이다.

<definition name="myapp.homepage" template="/layouts/classic.jsp"> 이 부분에서 name 부분이 ViewName과 매핑이 되는 부분이다.

Controller에서 "test" 라고 ViewName이 setting 되었다면 name="test" 라고 설정해 주면 된다.



TilesView는 Controller에게서 '/'와 '.' 형태의 ViewName을 받을 수 있다.

InternalResourceView같은 경우는 ViewName을 리소스 url로서 사용하기 때문에 '/' 방식으로 구분된 url을 받지만

# '.'도 받을 수는 있긴한데 리소스 url로 써야 하는데 디렉토리 이름에 '.'포함되면 모를까 구분자로서는 적합하지 않은 형태

TilesView의 경우 '/', '.' 형태를 모두 받을 수 있다. 정확히는 이 형태를 받아도 문제가 없다.


예를 들어 ModelAndView에서 setViewName으로 "test.test2"라고도 설정이 가능하고 "test/test2"라고도 설정이 가능하다는 말이다.

TilesView는 어차피 설정파일에서 리소스에 해당하는 녀석들의 디렉토리 위치를 따로 설정하고 그것들을 조합하는 형태이기 때문에 

setViewName에서 설정된 url은 말그래도 요청에 따라 수행을 달리하기 위한 하나의 이름 같은 거라고 보면 된다.

InternalResourceView처럼 setViewName으로 설정된 url이 실제로 리소스를 찾는 데에 쓰이지는 않는다는 것이다.



하여튼 위의 태그들을 다시 하나씩 분석하면 url에 매핑되는 name까지 알아 보았고 그 옆에 있는 template= 은

우리가 따로 만들어 두었던 Layout 파일을 설정하는 것이다.

template="" 에 layout 용으로 만들어둔 jsp파일이 있는 디렉토리와 파일명, 확장자까지 작성해 주면 된다.

<put-attribute> 태그는 레이아웃 파일에 실제로 들어가게 될 파일들을 설정해 주는 태그이다.

name 에는 이름을 설정해 주면 되고 value에는 들어가게 될 모듈 파일의 디렉토리와 파일명, 확장자명을 넣어 준다.

value에는 모듈 파일뿐만 아니고 그냥 string이 들어갈 수도 있다.

name을 설정하는 이유는 이 name에 설정한 값이 layout에서 실제로 태그를 통해 사용되기 때문이다. 이건 조금 뒤에 나온다.

value에 파일이 아니고 string이 들어갈 경우에는 layout에 모듈 파일이 조립되는 게 아니고 value로 설정한 string 값이 조립된다.

공통으로 들어가는 string같은 게 있다면 모듈처럼 설정해놓고 조립식으로 사용할 수 있다.


<put-attribute>에 우리가 모듈화한 것들을 전부 value에 담고 각 모듈에 맞게 이름을 부여했다면 이제

VeiwResolver와 우리가 만든 설정파일을 참고할 TilesView를 컨테이너에 등록해야 한다.

등록 해 주어야 할 것들은 총 이렇다.

<bean
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<property name="order" value="1" />
</bean>

<bean
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions" value="/WEB-INF/tiles.xml" />
</bean>


UrlBasedViewResolver랑 TilesView는 알겠는데 TilesConfigurer는 뭐죠? 라고 할 수 있다.

TilesConfigurer는 태그를 보면 알겠지만 tiles 설정 파일을 지정해 주는 클래스이다.

TilesConfigurer는 tiles 설정 파일들을 담는 컨테이너를 구성한다. 

이렇게 구성된 컨테이너에 있는 설정 파일들은 TilesView 인스턴스가 실제 접근해서 사용하게 된다.


UrlBasedViewResolver의 property로 설정해 주는 setViewClass는 ViewClass하는 클래스를 인자로 넘긴다.

.class를 인자로 받는다는 것이다. 그래서 porperty에도 보면 class파일을 value로 setting하고 있다.

근데 왜 인스턴스를 안 받고 class로 받을까? 

viewClass에 해당하는 객체가 어떤 객체가 올 지 모르기 때문인 듯 하다.

그래서 일단 .class를 받고 그 클래스 파일을 통해 getInstance로 인스턴스를 생성해서 사용하는 듯 하다.

viewClass로 받는 객체들이 모두 같은 인터페이스를 구현하는 게 아닌가 보다.

아니면 또 다른 이유로 불필요한 객체의 생성을 막기 위함일 수도 있다.

ViewResolver는 기본적으로 우선순위를 갖기 때문에 자신이 필요한 경우에만 View 인스턴스를 생성하기 위함일 수도 있다.


물론 VeiwResolver 중에는 미리 생성된 View 객체에서 선택을 해서 사용하게 하는 녀석도 있다.

예를 들어 BeanNameViewResolver이 있다.

이 녀석은 View객체들을 컨테이너에 미리 만들어 존재하게끔 하고 Bean의 속성 중 id(name)과

ViewName이 일치할 때 그 빈을 View객체로서 사용하게 하는 ViewResolver이다.


예를 들어 아래와 같이

<bean id="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver"/>

<bean id="download" class="sp.mvc.file.download.ExcelDown"/>

BeanNameViewResolver라는 ViewResolver를 등록하고 밑에는 우리가 직접 만든 View클래스를 빈으로 저장했다.

이 때 Controller에서 ViewName을 'download'로 설정했다면 ExcelDown이라는 View 빈을 사용하도록 한다는 것이다.

BeanNameViewResolver는 보통 위처럼 커스터마이징 View를 사용할 때 많이 사용되며 

ViewName과 일치하는 bean id(name)의 View 빈을 사용하게 한다. 

그렇기 때문에 일반적으로 BeanNameViewResolver의 경우 우선순위를 가장 높게 설정해야 한다.


하여튼 UrlBasedViewResolver viewClass를 TilesView로 설정해 주면 TilesView는 우리가 설정해 놓은 TilesConfigurer의 컨테이너에서

xml 파일을 참조하여 view를 생성한다. View를 생성하는 원리까지는 잘 모르겠다.

layout으로 사용되는 파일의 servlet 파일을 보면 <jsp:include>와 비슷한 형태로 동작하는 것 같은데

이 때 포함되게 되는 파일의 설정을 View가 담당하고 그 servlet 파일이 실행되는 것인지 view가 스스로 view를 만드는 것인 지..



위의 과정을 모두 마쳤다면 이제 tiles를 통해 레이아웃에 jsp 파일들이 결합되어 view가 만들어질 것이다.

근데 문제가 하나 있는데 url매핑 부분이다.

<tiles-definitions>
  <definition name="test.test2" template="/layouts/classic.jsp">
    <put-attribute name="title" value="Tiles tutorial homepage" />
    <put-attribute name="header" value="/tiles/banner.jsp" />
    <put-attribute name="menu" value="/tiles/common_menu.jsp" />
    <put-attribute name="body" value="/tiles/home_body.jsp" />
    <put-attribute name="footer" value="/tiles/credits.jsp" />
  </definition>
</tiles-definitions>

이런 식으로 매핑된 url은 ModelAndView에서 ViewName이 test.test2라고 설정된 것만 받는다.

그럼 모든 ViewName에 대해서 하나하나 다 설정을 해야 하는가? 그건 아니다.

다른 url 매핑과 똑같이 *를 이용하면 된다.

예를 들어 test.*이라고 하면 ViewName에 test. 으로 시작하는 모든 url을 받을 수 있다.


근데 그럼 문제가 하나 있다.

레이아웃에서 다른 부분은 변하지 않는 부분으로 공통된 것일 수 있지만

<put-attribute name="body" value="/tiles/home_body.jsp" />

요 부분, 즉, 해당 요청에 대한 메인(body)이 되는 부분은 각 요청마다 다른 파일을 사용한다는 것이다.

그래서 이걸 해결하기 위해 '{}'라는 것을 이용할 수 있다.

'{}'에 숫자를 넣어서 *과 매핑을 시킬 수 있다. 예를 들어 위의 test.* 이라는 요청은 

url에서 *에 해당하는 부분이 한 개이다. 그럼 {1}이라고 하면 *에 해당되는 부분을 자동으로 기입해 준다.

url 요청이 test.test2라고 오면 *에 해당되는 것은 test2이고 *이 한 개 이므로 {1}에 해당된다.

<put-attribute name="body" value="/tiles/{1}.jsp" />

이렇게 사용하면 실질적으로는 <put-attribute name="body" value="/tiles/test2.jsp" />와 같다는 것이다.

test.*.* 로 매핑을 하면 test.test2.test3 라는 요청이 들어왔을 때 {1}은 test2 {2}는 test3에 해당되게 된다.


위의 설정에는 몇 가지 특징이 있다.

첫 번째는 definition의 순서대로 요청을 검색한다는 것이다.

url 매핑이된 definition이 3개 있다고 해 보자, 그리고 각각 test.* test2.* test3.*의 순으로 정의되어 있다고 하면

url 요청이 test3.test 이런 식으로 들어와도 test.* -> test2.* -> test3.* 순으로 매핑이 되는 지 확인한다는 것이다.


두 번째는 그냥 *만 사용할 경우는 모든 요청에 대한 것을 그 매핑된 설정이 받게된다는 것이다.

물론 위의 definition의 순서는 지키기 때문에 앞에 다른 것이 정의되어 있다면 그것 부터 확인한다.

이런 경우가 있을 수 있다. root에 있는 파일들은 하위 디렉토리가 없기 때문에 요청을 할 때에 

위처럼 test.~~ 이런 식으로 받는 게 아니고 바로 test 이렇게 설정할 수 있다.

definition을 가장 밑에다 정의하는 식으로 해서 요청을 받아도 되겠지만 이렇게 처리하는 것 보다는 

그냥 root의 viewName 설정과 매핑도 앞에 root.* 이런식으로 구분자를 하나 추가해 주는 것이 좋다.




