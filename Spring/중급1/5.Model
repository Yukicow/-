






지금까지는 어떻게 View를 출력하는 지에 대한 내용을 다뤘다면

이번에는 그 View를 출력하기 위한 데이터들을 어떻게 처리하는 지 알아 볼 것이다.


jsp를 배울 때 DAO와 DTO를 이용했었다.

spring에서도 똑같이 DAO와 DTO를 사용하게 되는데

그 DAO를 통해 반환된 DTO 등을 어떻게 View를 처리하는 녀석들이 사용할 수 있게 하는 지 알아 보도록 하자.


사실 별 거 없다.

DAO에서 얻어온 DTO, 또는 특정 데이터를 ModelAndView 객체를 통해 설정해 주기만 하면 된다.

그러면 View 객체가 DispatcherServlet으로 부터 그 Model 데이터를 받아 Request에 다시 설정하든 뭘 하든

그런 식으로 View를 만드는 데에 사용할 수 있게 데이터를 알아서 설정하고 가져다 사용한다.


그리고 이제 본격적으로 Spring의 DI 기능을 사용해 볼 것이다.

이것도 배운 거라 어려울 건 없다.

우리는 DAO를 사용하기 위해 java 파일에서 DAO 객체를 생성자를 통한 호출방식 등등으로 

불러와서 그 DAO 객체를 이용해 DTO를 반환받는 등 그런 식으로 사용했다.

하지만 이제는 spring의 DI 기능을 이용해서 Controller클래스의 멤버변수로 DAO 객체를 미리 설정해 놓고

그 변수에 객체를 주입하여 사용하는 식으로 이용할 것이다.


당연히 사용법은 IoC컨테이너의 설정파일에 해당하는 *-servlet.xml 파일에 bean으로 DAO에 해당하는 클래스를 등록하고 

property에서 setter를 설정함으로써 멤버변수에 객체를 주입한다.

그러면 우리는 Controller의 소스코드에서 따로 의존관계를 설정할 필요없이 바로 사용이 가능하다.


DAO를 통해 반환받은 DTO를 Controller에서 ModelAndView의 메소드를 호출해 설정하고

그 설정한 값은 View단에서 사용이 가능해 진다.



이번엔 이 DAO에 해당하는 Service 객체들의 결합력을 낮추는 작업을 해 볼 것이다.

별 건 아니다.


우리가 이 DAO객체를 멤버 변수로 선언하고 사용하고 있는데

만약 중간에 데이터베이스를 다루기 위한 API를 jdbc를 사용하다가 jpa나 mybatis로 바꾼다고 가정해 보자.

그러면 Service 객체에 해당하는 파일을 새로운 API에 맞게 다시 작성하거나 아예 새롭게 만들텐데 이 새롭게 만든 파일을 사용하려면

새롭게 만드는 경우는 멤버변수의 데이터 타입을 새로 생성한 Service 클래스 파일로 다시 설정하고 xml파일에서 DI되는 클래스를 바꿔주어야 하고

원래 파일을 다시 작성하는 경우는 설정파일이나 Controller에서 할 건 없지만 원래 클래스 파일의 소스코드를 다시 작성하는 것이다.

둘 다 결국은 소스코드의 수정을 회피할 수 없는 상태에 이르렀다.

그래서 이걸 해결하기 위해 인터페이스를 이용할 것이다.


단순히 Service 객체라고 할 지라도 인터페이스를 하나 만들어서 그 인터페이스를 구현하게 만드는 것이다.

그리고 멤버변수로 Service 객체를 설정할 때 특정 Service객체의 클래스 파일의 데이터 타입이 아니고 인터페이스 데이터 타입으로 하는 것이다.

그럼 인터페이스를 구현한 어떤 Service 객체가 사용되던 상관 없이 받을 수 있기 때문에 중간에 Service 객체가 변경되더라도 문제가 없다.

우리는 변경된 Service 객체를 설정파일 변경만 해 주면 끝난다. 


새로운 Service 클래스 파일을 작성해서 그것을 사용하기 위해 

설정파일에서 새로 만든 Service 클래스로 변경하기만 하면 해결되는 것이다. 

아주 간편하고 결합력도 낮아서 실제 배포 이후에도 관리가 편해진다.

