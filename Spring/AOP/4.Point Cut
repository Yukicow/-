





Spring을 통해 AOP를 구현할 때 사용되는 용어들이 있다.

Target의 주요 로직을 Proxy를 통해 보조 로직에 끼워 넣는 것이 마치 뜨개질과 비슷하다고 해서 Weaving이라고 한다.

그리고 그런 Weaving의 대상이 되는 Target의 주요 로직(메소드)를 JoinPoint라고 한다.


전에 Advice 객체를 통해 AOP를 구현했을 때 모든 Target의 메소드에 대해서 Weaving이 일어났는데

이번에는 우리가 원하는 메소드만을 JoinPoint로 만드는 것을 해볼 것이다.

이렇게 필터링된 JoinPoint를 PointCut이라고 한다.

한마디로 우리는 Target의 JoinPoint를 특정시켜서 PointCut으로 만들 것이다.


이러한 기능을 구현하기 위해서는 PointCut 객체를 생성해야 하고 Advice 객체와 PointCut객체를 이어주는 Advisor 객체가 필요하다.

즉, PointCut 객체를 통해 특정 메소드만을 JoinPoint로 지정하고 Advisor 객체를 통해 Advice가 PointCut을 인지할 수 있게 연결해 주는 것이다.

그리고 우리는 Advice대신 두 객체를 연결한 Advisor를 사용하게 되고, Advisor는 PointCut으로 지정된 메소드가 호출될 때에만

Advice의 로직을 수행하도록 하는 것이다.


먼저, xml에 PointCut 객체를 생성해 줄 것이다.

bean 태그를 이용해서 org.springframework.aop.support.NameMatchMethodPointcut 클래스를 생성한다.

그리고 그 객체에 property 태그를 통해서 mappedName 을 setting해 줄 건데 

여기에 들어가는 게 Target의 메소드 이름이 된다.

<property name="mappedName" value="Target의 메소드 이름" />

의 형태로 지정해 주면 Target의 특정 메소드가 PointCut으로 지정이 된다.

이 때 여러개의 Traget 메소드를 지정해 주고 싶으면 mappedName을 mappedNames로 바꾸고

property 태그 안을 list태그로 감싸고 안에 value 태그를 통해 메소드의 이름을 여러개 작성한다.

setMappedNames라고 String 값을 여러개 받는 setter가 존재한다.


다음은 Advisor 객체를 만들어서 위에서 만든 PointCut과 Advice를 연결할 것이다.

bean 태그를 통해 org.springframework.aop.support.DefaultPointcutAdvisor 클래스를 만든다.

그리고 property 태그를 통해 Advice와 PointCut 객체를 설정한다.

<property name="advice" ref="만들어 둔 advice 빈" />
<property name="pointcut" ref="만들어 둔 pointcut 빈" />

이렇게 하면 Advisor 빈이 생성되었다.

그럼 우리는 이제 그 생성된 Advisor 빈을 Proxy 빈의 interceptorNames에 추가하면 된다.

원래 사용하던 Advice를 지우고 Advice 빈과 PointCut 빈을 연결한 Advisor를 대신 넣어 주면 된다.

그리고 실행해 보면 우리가 PointCut으로 지정한 메소드를 실행할 때에만 Advice의 로직이 수행되는 것을 볼 수 있다.




위는 조금 불편하게 PointCut과 Advisor를 분리해서 작성하는 방법이었고

Advisor이면서 PointCut을 지정하는 역할까지 갖는 클래스도 존재한다.

그 녀석을 사용하면 코드의 양을 줄이고 같은 기능을 구현할 수 있다.


우리는 Advisor로서 org.springframework.aop.support.DefaultPointcutAdvisor 를 사용했었는데 

org.springframework.aop.support.NameMatchMethodPointcutAdvisor 를 사용할 것이다.

이 녀석은 org.springframework.aop.support.NameMatchMethodPointcut의 mappedName을 설정하는 기능을 자체적으로 갖고 있기 때문에

bean 태그로 org.springframework.aop.support.NameMatchMethodPointcutAdvisor 를 생성하고

property 태그를 통해 


<property name="advice" ref="만들어 둔 advice 빈" />

<property name="mappedName" value="Target의 메소드 이름" />


advice와 mappedName을 통해 PointCut을 바로 지정하여 사용할 수 있다.

번거롭게 PointCut에 대한 빈을 따로 만들어서 Advisor에 설정해 줄 필요가 없다.



