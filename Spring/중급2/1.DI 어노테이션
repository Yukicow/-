





그동안은 설정파일에 하나하나 설정에 대한 내용을 작성하면서 spring을 사용했지만

이제부터는 설정파일에서 하던 것을 어노테이션으로 해볼 것이다.



Spring 초반에 기본기2의 어노테이션~java config 부분에서 배웠던 내용과 겹치기 때문에 그 부분을 다시 보고 오자.

그리고 그 이후에 추가된 내용만 다루도록 하겠다.




url 매핑에 대한 부분부터 시작하면 될 것 같다.

url 매핑을 다루기 이전에 Component 어노테이션에 대해 조금 가볍게 흝고 지나가 보자.


우리는 Component(Controller, Service, Repository) 어노테이션을 사용해서 각각의 클래스에 대한 빈을 생성하게 될 것이다.

여기서 Controller에 대한 얘기인데 우리는 그동안 Controller를 

org.springframework.web.servlet.mvc.Controller라는 인터페이스를 구현한 Controller를 생성하고

그 인터페이스에서 구현하도록 하는 ModelAndView를 리턴값으로 하는 handleRequest메소드를 오버라이딩해서 사용했다.

이것은 DispatcherServlet에서 url 매핑된 Controller를 찾아 로직을 수행하기 위한 약속된 규정같은 것이다.

DispatcherServlet은 Controller 인터페이스를 구현하는 빈을 찾아서 그 중에 url과 이름이 매핑되는 컨트롤러에게 

요청을 처리하도록 규칙이 정해져 있기 때문에 Controller를 구현하고 handleRequest메소드도 오버라이딩 해야만 했다.

하지만 Component(Controller) 어노테이션을 통해 Controller빈을 생성할 경우에는 이러한 규칙을 지키지 않아도 된다.

그래서 어노테이션을 사용하게 될 경우 Controller의 implement를 하지 않아도 되고 메소드 이름도 마음대로 정해도 된다.


@Component는 그 클래스의 객체를 생성해서 IoC컨테이너에 bean으로 등록하게 해 주는 어노테이션이다.

이렇게 등록된 빈을 Controller로서 사용하려면 그저 그 클래스 안의 메소드를 만들고 RequestMapping 어노테이션을 사용하면 된다.

그럼 그 @RequestMapping()의 '()' 안에 적혀 있는 String과 매핑되는 url에 대해서 안의 로직을 수행하도록 하는 것이다.

즉, 설정파일에서는 규칙을 지켜야했기 때문에 생성된 bean 하나가 url 하나에 매핑되는 형식으로밖에 동작할 수 없었지만

어노테이션을 통하면 하나의 Controller 안에 여러 가지 url 매핑에 대한 처리가 가능하다는 것이다.

즉, Controller의 단위가 bean이 아니고 메소드가 되는 것이다.

그렇다면 그 동안 Controller를 하나하나 만들어줬던 것을 각 특성에 맞는 것들끼리 묶어서 하나의 Controller에서 처리해 주면 된다.

예를 들어 고객센터와 관련된 Controller 하나에 고객센터 관련된 url을 모두 처리하고 게시판 관련된 Controller에서 게시판 관련 url을 처리하는 등


그럼 이 아주 좋은 @RequestMapping의 사용법을 알아보자.

@RequestMapping의 url 매핑은 설정파일에서 Controller 빈의 id(name)설정값과 똑같다.

절대경로 root '/'를 기준으로 뒤의 url을 적어주면 된다.

그럼 우리는 로직 내에서 view에 대한 url과 Model 데이터 처리를 해야 하는데 Model은 다음 시간에 알아 보고

오늘은 View를 어떻게 처리하는 지만 알아 보도록 하자.


일반적으로 메소드에 @RequestMapping을 사용할 경우 '()' 안에 있는 String 값을 ViewName으로 받아들인다.

만약 @RequestMapping("/test") 라고 매핑되어 있다면 'test'가 ViewName으로 설정되는 것이다.

그럼 ViewResolver는 View객체에게 'test'에 맞는 View의 생성,검색을 처리하도록 할 것이다.

하지만 우리는 Controller에서 받은 url요청에 따라 우리가 원하는 ViewName을 설정하고 싶다.

그럴 때에는 메소드의 반환타입을 String으로 설정하고 return값으로 ViewName으로 설정하고 싶은 값을 반환해 주면 끝이다.


예를 들어 메소드에 @RequestMapping("/test")을 설정하고 이 url요청이 들어왔을 때

ViewName으로 test.test2 를 설정하고 싶다면 return "test.test2" 라고 리턴해 주면 알아서 ViewName을 리턴값으로 해석한다.

ViewName 설정에 대한 내용은 이게 끝이다.



그리고 주의할 점이 있는데 위의 RequestMapping을 사용할 때에는 <mvc:annotation-driven />태그를 함께 사용해야 한다.

<context:component-scan base-package="" />를 기억하는가? <mvc:annotation-driven />도 그와 비슷한 일을 한다.

정확한 지는 모르겠지만, 어노테이션을 처리하기 위한 클래스도 사실 각각 따로 존재하는 듯 하다.

RequestMappingHandlerMapping나 RequestMappingHandlerAdapter 같은 것들..

즉, 우리가 어노테이션을 사용하려면 그것을 해석할 객체들을 설정파일에 적어서 직접 등록해야 하는데,

위의 태그들은 이러한 과정이 너무 귀찮고 복잡하기 때문에 사용하는 어노테이션에 따라 

어노테이션 처리를 도와주는 클래스중 몇 가지 기본적인 클래스들을 대신 등록해 주는 태그들인 것 같다.

그래서 태그의 종류도 여러 가지가 있다. 각각 등록해 주는 어노테이션 처리 클래스의 종류가 다르다.


<context:component-scan /> 의 경우는 Component와 관련된 어노테이션의 처리를 도와주는 빈을 등록해 주기 때문에

Component어노테이션 Service, Controller, Repository 어노테이션의 처리만 가능하다.

<context:component-scan />는 <context:annotation-config />의 역할도 수행할 수 있는데

<context:annotation-config />는 @Autowired와 @Qualifier 두 가지 어노테이션을 처리하는 클래스를 등록한다.

즉, <context:component-scan />를 사용하면 @Component과 @Autowired,@Qualifier에 대한 처리가 가능하다는 것이다.

그래서 <context:component-scan /> 태그를 사용하는 경우 <context : annotation-config />를 사용할 필요가 없는 것이다.

하지만 그래서는 @RequestMapping은 처리를 못 한다. 그래서 <mvc:annotation-driven />가 필요한 것이다.

<mvc:annotation-driven />에는 @RequestMapping을 처리할 수 있는 클래스를 등록해 주는 듯 하다.

그 외에도 여러 가지 어노테이션 처리가 가능한 클래스들을 등록해 주는 녀석이다.

하여튼 이런 이유 때문에 태그를 사용해야 하는데, 나중에는 우리가 직접 어노테이션 처리에 필요한 클래스를 

등록해야 하는 경우가 생길 수도 있다. 그건 나중에 생각하도록 하자.




그리고 이건 팁(?) 같은 것인데 @RequestMapping에서 요청이 길어서 적어 줄 내용이 너무 많아질 경우 공통되는 부분을 뺄 수 있다.

바로 @RequestMapping를 클래스 위에도 달아 주는 것이다.

클래스 위에 @RequestMapping를 쓰고 '()' 안에 모든 메소드에서 공통적으로 받고 있는 url을 넣으면 그 부분이 추가되어 url과 매핑된다.

InternerResourceViewResolver에서 prefix를 설정해 주는 것과 비슷하다.



예를 들면 이렇다. 

@RequestMapping("/test1/test2/test3/")
public class TestController (){

    @RequestMapping("test4")
    public String test4() {
        return "test1.test2.test3.test4"
    }
}

@RequestMapping("/test1/test2/test3/") 라고 설정했기 때문에 밑의 메소드에서는 @RequestMapping("test4")에서

test4라고만 적어줘도 되는 것이다. 그럼 "/test1/test2/test3/"과 "test4"이 더해져서 

/test1/test2/test3/test4 라는 요청이 들어오면 test4()가 호출되도록 하는 것이다.

RequestMapping의 사용법은 이걸로 끝이다. 하지만 이건 조금 구시대적인 것이고 이후에 다른 어노테이션 사용법을 알아 볼 것이다.



위의 내용을 다루다가 조금 의문이 하나 생겼다.

Controller의 단위가 클래스에서 메소드로 바뀌었다는 건 url과 매핑되는 메소드를 찾아서 

또는 매핑되는 메소드를 갖는 빈을 찾아서 그 내부에 메소드를 처리하도록 해야 한다는 것인데

그럼 빈이 Controller단위일 때와 다르게 매핑되는 메소드를 찾기 위해 빈을 하나씩 뒤져봐야 하는 게 아닌가 싶다.

그럼 조금 처리 속도가 느려지는 게 아닌가 의문이 생긴다. 실제 이렇게 처리하는 지는 모르겠지만.. 나중에 물어 보자.




그리고 이 부분은 위의 내용을 실제로 적용해서 프로젝트를 만들 때 도움이 되는 내용이다.

이제 저렇게 Controller도 어노테이션으로 처리할 수 있게 되었고 DI도 어노테이션으로 가능해졌으니

패키지를 어떻게 잘 구분하여 정리하는 것이 좋은가에 대한 내용이다.

보통은 실제 리소스가 존재하는 디렉토리 이름에 맞춰서 패키지도 정렬하는 것이 좋은 듯 하다.

그래야 url에 대한 리소스를 찾을 때에도 보기가 편해지고 서로 정렬이 매핑되기 때문에 보기도 깔끔하기 때문이다.


예를 들어 게시글 관련해서 board라는 디렉토리를 만들고 그 안에 

게시글와 관련된 내용들 중에서도 게시글 작성(write)과 게시글을 보는것(viewing)과 관련해서 또 디렉토리로 분류하고 리소스들을 넣어 두었다면

실제 Controller를 두는 패키지도 board라는 패키지를 만들어서 Cotroller를 wirteController viewingController로 두개 만들고

그 내부에는 이제 각각 관련된 url 요청에 대한 매핑 메소드들을 만들어서 두는 것이다.

그리고 url 요청도 실제 리소스 위치 즉, 파일 구조와 맞춰서 사용해 주는 것이 좋다. 

말로하기는 조금 버거운 내용이니 영상을 보는 게 가장 좋다.

https://www.youtube.com/watch?v=OS-Oo-DdxG4&list=PLq8wAnVUcTFUHYMzoV2RoFoY2HDTKru3T&index=55



