




jsp와 servlet의 기본적인 동작원리와 spring에서의 view가 만들어지기 까지의 과정을 비교해 보자.


먼저, 일반적인 jsp와 servlet이다.

url 요청이 들어오거나 웹 앱이 시작되면 웹 컨테이너는 servlet객체를 생성한다. 

url에 매핑되는 servlet객체에 의해 요청이 처리가 된다.

servlet은 우리가 직접 작성한 servlet이거나 jsp파일이 웹 컨테이너에 의해 servlet으로 변환된 경우일 것이다.

url요청에 대한 처리의 과정은 이렇다.

1. 사용자(클라이언트)가 URL을 입력하면 HTTP Request가 Servlet Container로 전송.

2. 요청을 전송받은 Servlet Container는 HttpServletRequest, HttpServletResponse 객체를 생성.

3. web.xml을 기반으로 사용자가 요청한 URL과 매핑되는 서블릿을 찾는다.

4. HTML인 경우와 JSP인 경우 구분하여 처리한다.

아마도 web.xml에 등록된 defaultSerlvet과 jspServlet의 역할인 듯 하다.

jspServlet의 경우는 jsp 파일을 Servlet 파일로 변환하고 그것을 실행하여 클라이언트에게 html파일로 되돌리는 방법을 아는 듯 하다.

jsp파일을 servlet파일로 변환하는 주체를 jsp engine이라고 하는데 이 녀석이 그것에 해당하는 듯 하다.

defaultSerlvet은 정적인 리소스를 그냥 그대로 반환하는 기능을 갖고 있는 것 같다.


우리가 정의한 url매핑에 따라 servlet 객체가 사용되는데 이 때 우리가 만든 servlet객체가 사용될 수도 있다.

일반적으로 우리가 만든 servlet 객체는 요청을 내부적으로 Forwarding하는 용도로 많이 사용하고

프레임워크나 웹 서버에서 제공하는 servlet은 url이나 설정파일을 기반으로 리소스를 찾아 

사용자에게 보내질 정적인 view를 생성하고 보내는 것까지 담당하는 경우가 많다.



spring에서 제공하는 servlet 또한 이러한 기능을 제공한다.

하지만 spring의 경우는 이런 과정을 모듈화를 잘 해서 세부적으로 분리해 놓은 듯 하다.

사실 위의 servlet들도 잘 모듈화 해서 분리해 놨는데 우리가 모르는 것일 수도 있다.


하여튼 spring의 경우는 사용하는 모듈이 아주 많다.

Controller, Resolver, View 등등 이러한 모듈을 이용해서 서로 상호작용하여 작동한다.

이 때 실질적으로 사용자에게 보내질 view를 만드는 것은 View객체인데

View는 Model 데이터의 렌더링을 담당하며, HTML Output을 생성한다. 여러가지 템플릿 엔진을 이용하는 듯 하다.

근데 나는 아직도 이해가 안 된다.

원래는 servlet이 실행되면서 output의 결과가 사용자에게 보내져야 하는데

servlet 없이 view가 자체적으로 output을 생성하는 것인 지 아니면 내부적으로 servlet으로 만들어 사용하는 것인 지 모르겠다.

자체적으로 만든다고 하기에는 jsp파일이 servlet으로 변환되어 존재하고 있다..

아니면 View는 Servelt 파일이 만들어지는 과정을 보조하는 녀석인 것인가..



팁

View를 만들어 실제로 응답을 담당하는 객체는 HttpServletResponse객체이다.

즉, 위에서 Spring의 View객체가 하는 모든 것도 결국은 Response 객체에게 만들어질 파일에 대한 정보를 

등록하는 과정에 지나지 않는 것이 아닐까 한다.

View 객체들이 뭐 HttpServletResponse 를 구현하는 것도 아니니 직접 응답에 대한 뭔가를 생성하는 것 같지는 않다..