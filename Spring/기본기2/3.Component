






오늘은 Component에 대해 배울 것이다.

우리가 빈을 만들 때에 xml 설정파일로 빈 태그를 이용했었는데 빈 태그 없이 

어노테이션에서 빈 태그를 만드는 방법은 무엇이 있을까.

바로 Component 어노테이션을 이용하는 것이다.


빈을 생성하고자 하는 클래스의 위에 적어 준다.

그럼 그 클래스의 빈이 생성되어 IoC컨테이너에 저장될 것이다.

이 때 이름을 지정해 줄 수도 있는데 지정해 주지 않으면 기본적으로 클래스 이름 그대로 또는 .class 로 호출이 가능하다.

이름은 @Component("이름") 처럼 () 안에 정해 줄 수 있다.


이게 전부이다. 하지만 이 때 주의해야 할 게 있는데 그냥 위의 Component 어노테이션만 사용하면 오류가 난다.

빈을 찾을 수 없다고 나오는데 @Component 가 작동하려면 이 어노테이션이 있다는 것을 알려야 한다.


엥? 저번에 <context:annotation-config/> 썼잖아요..

그건 우리가 빈을 설정파일에 적어 주었을 때 그 클래스의 내부에 있는 어노테이션을 찾기 때문에

클래스 외부에 있는 어노테이션은 모른다.


그래서 우리는 어노테이션을 사용했다고 또 알려야 한다.

<context:component-scan base-package="패키지"/>

를 사용하면 된다.

어노테이션을 사용한 패키지명을 적어 주면 그 패키지 내부에서 Component 어노테이션을 찾아

그 어노테이션이 있는 클래스의 빈을 생성한다.

그리고 자동적으로 그 내부의 다른 어노테이션도 스캔하기 때문에 

<context:component-scan base-package="패키지"/>를 사용할 경우 <context:annotation-config/>는 없어도 된다.

# 단 <context:component-scan base-package="패키지"/>는 작성한 패키지 한정이다. 

# 그렇다고 모든 패키지를 다 뒤지게 설정하는 것은 또 바람직하지 않다. 필요한 것들만 잘 설정하자.


만약 클래스에 값을 설정해 주어야 하는 변수 등이 있을 때에는 그 변수에 @Value 어노테이션을 사용할 수 있다.

@Value("50") 이런 식으로 값을 초기화 하는 것도 가능하다.



하지만 Component에는 문제가 있다.

사실 Component에는 세부적으로 3개의 어노테이션으로 또 구분되는데 @Controller, @Service, @Repository이다.

Spring Framework는 MVC 패턴에 맞게 Component를 3개의 이름으로 나누어서 제공하고 있다.

Component와 완전히 똑같은 것인데 그냥 기능에 따라 구분하여 사용할 수 있게 이름만 나눠 놓은 것이다.


하지만 문제는 이것이다.

MVC에 속하지도 않는 클래스들이다.

그냥 우리가 자체적으로 만들어 사용하는 클래스나 외부적으로 가져온 클래스, 자바에서 제공하는 클래스 등등은

우리가 만든 클래스는 정말 양보해서 Component를 사용한다고 해도 외부에서 가져온 클래스나 자바에서 제공하는 클래스는

우리가 소스코드를 가지고 있지 않기 때문에 어노테이션을 붙이는 것이 불가능하다.

이럴 경우에는 결국 xml 파일을 이용하는 것 밖에 답이 없다.

하지만 어노테이션과 xml 파일을 혼용해서 사용하는 것은 썩 좋은 방법은 아니다.


그래서 우리는 앞으로 방향성을 확실하게 정할 것이다.

어노테이션만 사용한다는 것이다.

그리고 위의 문제도 해결할 것이다. 

java config를 이용하는 것이다.

앞으로 우리는 java config를 통해 모든 것을 어노테이션을 통해서 사용하게 될 것이다.

