





어노테이션은 예전에도 배웠지만 외부의 설정파일(xml등)에 설정을 지정하는 방식을

코드파일에다 그 설정을 심는 편한 녀석이다.


여러 가지 사용 가능한 어노테이션이 있지만 차츰 사용하면서 배우도록 하고

오늘은 @Autowired, @Qualifier라는 어노테이션에 대해 배울 것이다.


이 녀석은 말 그대로 자동으로 의존관계를 주입해 주는 녀석이다.

<property name="" value=""></property> 부분을 대체하는 녀석이라고 할 수 있다.

@Autowired는 클래스의 필드, 오버로드 생성자, setter의 위에 달아 줄 수 있다.


오버로드 생성자나 setter는 이해가 가는데 필드 위에 다는 것은 뭐죠?

필드에 다는 것은 바로 직빵으로 생성한 빈을 꽂아버리는 형태인 듯 하다.

이게 무슨 원리로 동작하는 지는 모르겠지만 나중에 물어 보자.

# 참고로 주입은 생성자 주입을 추천하고 있는데 그 이유는 https://codingnojam.tistory.com/9 에서 확인하자.


문제는 어노테이션은 기본적으로 자동으로 인지하지 않는다. 

우리가 어노테이션을 사용했다는 걸 xml파일에 적어 놓아야 컨테이너가 어노테이션을 참고한다.

그 때 필요한 게 또 namespace(처리기)이다.

일단 namespace에서 context를 체크해 준다.

그리고 태그를 하나 추가할 것이다.

<context:annotation-config/>을 추가하면 된다.

이것은 맨 위에 써 주는 것이 좋다. 그래야 처음부터 어노테이션을 참고하기 때문이다.



하여튼 돌아와서 @Autowired는 우리가 지정하지도 않은 객체를 어떻게 자기가 판단하고 초기화 하는 것일까.

바로 데이터 타입을 보고 결정한다. 

필드의 경우는 선언된 필드의 데이터 타입을 오버로드 생성자와 setter는 그 인자의 데이터 타입을 보는 것이다.

그리고 그 데이터 타입으로 캐스팅 가능한 빈을 알아서 넣어 준다. 꼭 구체화가 되어 있지 않아도

알아서 타입이 될 수 있는 빈을 찾아서 넣어 준다.


그렇다면 문제가 하나 있다. 

그 데이터 타입으로 캐스팅 가능한 빈이 여러개 있다면 어떤 것을 넣을까.

기본적으로는 오류가 난다.

하지만 만약 그 중에 인자,필드의 변수 이름과 같은 id값을 가지는 빈이 있다면 그 빈이 우선순위가 되어 그 빈을 초기화 한다.


하지만 우리가 소스코드 상에 정의해 둔 변수의 이름을 따라서 id값을 지정하는 건 너무 비효율적이다.

혹시나 나중에 까먹으면 소스코드를 뜯어서 다시 봐야하는 경우도 생길 수 있기 때문이다.

그래서 우리가 지정한 이름을 우선순위로 할 수 있도록 지정하는 어노테이션이 있는데 @Qualifier이다.

@Qualifier("지정할 이름") 어노테이션을 같이 사용해 주면 캐스팅 가능 타입 중 그 이름을 기준으로 빈을 찾는다.


이 때 주의해야 할 것은 오버로드 생성자이다.

setter와 필드는 기본적으로 객체 한 개에 대한 내용이다.

하지만 오버로드 생성자는 매개변수로 같은 데이터 타입의 객체를 여러개 받을 수도 있다.

그럴 때에는 @Qualifier를 메소드 위에 정의하면 문제가 생긴다.

어떤 인자에 @Qualifier에 지정한 값을 넣을 지 알 수가 없기 때문이다.

그래서 오버로드 생성자의 경우에는 인자 앞에 @Qualifier 어노테이션을 사용할 수 있게 해놓았다.


EX)

public TestClass(@Qualifier("test1") Test t1 @Qualifier("test2") Test t2) {
    ~~~
    ~~
    ~~
}

이런 식으로 사용이 가능하다.



근데 또 이런 경우가 있을 수 있다.

빈이 없을 경우이다.

일반적으로 주입을 해달라고 해 놓고 주입할 빈이 없을 경우에는 오류가 난다. 

하지만 우리는 빈이 없더라도 일단 객체가 만들어졌으면 좋을 경우도 있다.

예를 들어 빈이 없을 때에 실행되는 로직을 안에 넣어놨을 수도 있기 때문이다

이럴 경우에는 @Autowired에 required 문구를 사용한다.


@Autowired(required = false) 처럼 required를 false로 지정하면 주입할 빈이 없어도 일단 객체를 생성한다.


