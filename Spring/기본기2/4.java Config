





java config는 xml파일을 대신해서 java파일을 통해 config를 설정하는 것이다.

이제는 xml 파일 대신에 앞으로 만든 java파일에 빈 설정을 할 것이다.


먼저 클래스 파일을 하나 만든다.

이름은 웬만하면 Config가 들어가면 구분하기 좋을 것이다.

만들어진 그 클래스 파일은 앞으로 우리가 configuration파일로서 사용할 것이기 때문에

그것을 알려야 한다. 

클래스의 위에 @Configuration 어노테이션을 추가하면 된다.

그럼 앞으로 xml 파일 대신에 이 java파일이 config가 된다.


가장 먼저 전 내용에서 다뤘던 Component를 인지하도록 하는 것을 해볼 것이다.

아주 간단한데 클래스 위에 @ComponentScan 태그를 달아 주면 된다.

@ComponentScan("") 그리고는 괄호 안에 패키지 이름을 넣어 주면 된다.

이 때 여러 패키지를 넣어 주고 싶으면 java파일이기 때문에 형식도 약간 java의 형식을 따라간다.

배열 형태로 구분해서 넣어 주면 된다.

@ComponentScan({"패키지1","패키지2","패키지3"})

이런 식으로 하면 된다.


다음은 빈을 만들어 볼 것이다.

빈을 만들 때에는 빈을 반환해 주는 함수를 만들고 그 위에 @Bean 태그를 쓰면 된다.

이 때 주의할 점은 함수의 이름이다.

여기서 함수의 이름이 Bean의 id와도 같기 때문에 Bean 이름을 get~~ 이런 식으로 사용하지 않고

클래스 이름을 그대로 사용하는 등 이름으로 사용하기 적합하게 형태로 만들어 주는 것이 좋다.

예를 들면 Pizza 라는 클래스의 빈을 하나 만든다면


@Bean
public Pizza pizza() {
    return new Pizza();
}

이렇게 하면 pizza 라는 이름의 빈이 생성되어 IoC컨테이너에 담기게 된다.


자 이제 IoC컨테이너에게서 빈을 호출할 것인데 지금까지는 xml 파일을 사용했기 때문에 

Classpath 방식으로 IoC 컨테이너 객체를 생성했었다.


이제 우리는 xml파일에서 java config로 바꾸었기 때문에 모두 어노테이션만을 사용하게될 것이다.

그래서 IoC 컨테이너는 호출하는 데에 필요한 클래스도 AnnotationConfigApplicationContext로 바꿔 줄 것이다.

AnnotationConfigApplicationContext(클래스.class) 의 형태로 우리의 설정 파일을 입력해 준다.

우리가 사용하게될 config가 이제 java 파일이기 때문에 그 java파일을 넣어 주는 것이다.

그러면 그 설정파일을 베이스로 하는 IoC컨테이너 객체가 생성되어 반환된다.

우리는 반환된 그 객체를 통해 빈을 호출할 수 있다.



이렇게 java 파일 형식으로 설정을 가볍게 다뤄 보았다.

자세한 것은 실제로 spring framework을 사용하면서 추가적으로 더 알아 가도록 하자.