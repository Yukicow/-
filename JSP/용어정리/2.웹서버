



웹 서버와 웹 어플리케이션 서버(WAS)라는 것이 있다.

둘의 차이가 무엇인 지 알아 보도록 하자.


먼저 static page와 dynamic page의 개념에 대해 알아야 한다.


Static pages

- image, html, css, javascript 파일과 같이 컴퓨터에 저장되어 있는 파일들을 의미한다.

- 웹 서버에서 요청에 알맞은 파일을 반환하며, 항상 동일한 페이지를 반환한다. (말 그대로 정적인 컨텐츠)

- 웹 서버에서 제공한다.


Dynamic pages

- 들어온 요청에 맞게 동적으로 만들어진 컨텐츠를 의미한다.

- 데이터베이스, 서버 내 로직 등을 활용해 만들어진 컨텐츠를 반환한다.

- 웹 어플리케이션 서버에서 제공한다.
 


이제 웹 서버와 웹 어플리케이션 서버에 대해 알아 보자.


Web Server

HTTP 요청을 받아 Static contents를 제공하는 서버, 프로그램

HTTP 프로토콜을 기반으로 하여 클라이언트의 요청을 서비스하는 기능을 담당


1. 정적인 컨텐츠 제공 

WAS를 거치지 않고, 바로 요청한 컨텐츠를 제공할 수 있다.

즉, 웹 서버에 담겨 있는 static page를 요청에 따라 그냥 넘긴다고 할 수 있다.


2. 동적인 컨텐츠 제공을 위한 요청 전달

요청을 WAS에 보내고, WAS가 처리한 결과를 클라이언트에게 전달한다.

클라이언트에게 dynamic page의 전달을 위해 WAS에게 요청을 보내고 받아오는 일이다.


웹 서버는 클라이언트와 웹 어플리케이션 서버의 사이에서 클라이언트의 요청에 맞게 static page를 보내거나

클라이언트에 의해 페이지에서 특정 동적인 기능이 수행되면 WAS에게 그 요청에 맞는 로직을 실행하게 하고 

로직을 통해 동적으로 만들어진 컨텐츠를 받아오는 역할을 한다고 볼 수 있다. 


# 참고로 톰캣은 웹 서버는 아니고 컨테이너에 포함된다. 



Web Application Server

다양한 서버 내 알고리즘, 비즈니스 로직, DB 조회 등 클라이언트 요청에 따라 동적인 컨텐츠를 제공하는 서버, 프로그램

- HTTP 프로토콜을 기반으로 하여 클라이언트의 요청에 따라 구현된 비즈니스 로직을 통해 동적으로 만들어진 컨텐츠를 반환

- 데이터베이스 접속 기능, 여러 개의 트랜잭션 관리 등 수행


여기서 Container에 대해 알아야 한다.

웹 서버가 보낸 JSP, PHP, ASP.net 등의 파일들을 실행하고 수행결과를 다시 웹 서버로 보내주는 역할을 한다.


결국, 웹 어플리케이션 서버는 웹 서버에서 요청을 받고, 이를 웹 컨테이너로 보내 로직(알고리즘, DB 연결 등)을 수행하고 

그 결과를 다시 웹 서버로 보내 최종적으로 클라이언트에게 보내주는 것이라고 할 수 있다.

 


그렇다면 여기서 의문이 하나 들 것이다.

WAS가 Web Server의 모든 기능을 수행하면 되는 것 아닌가? Web Server는 왜 사용하는가?


1. 웹 서버와의 기능을 분리하여 서버 부하를 방지한다.

- WAS는 DB 조회, 다양한 로직을 수행하기라 바쁘기 때문에 단순한 정적 컨텐츠는 Web Server에서 빠르게 클라이언트한테 제공하는 것이 좋다.

- 정적 컨텐츠 요청까지 WAS에서 수행하게 되면 부하가 커지게 되고, 동적 컨텐츠 처리가 지연됨에 따라 수행속도가 느려진다.


2. 물리적으로 분리하여 보안을 강화시킨다.

- SSL 대한 암복호화 처리에 Web Server를 사용


3. 여러 대의 WAS를 연결해 로드 밸런싱 용도로 사용할 수 있다.

- Fail over, Fail back 처리에 유리하다.

- 대용량 웹 어플리케이션의 경우, Web Server와 WAS를 분리하여 오류가 발생한 WAS를 사용하지 않고

다른 WAS를 사용하게 만듦으로써 무중단 운영을 가능하게 한다.


4. 여러 언어의 웹 어플리케이션 서비스가 가능하다.

- 하나의 서버에서 PHP Application, Java Application를 함께 사용하는 등과 같이 여러 웹 어플리케이션의 활용이 가능해진다.

- 톰캣은 Java언어만 해석이 가능하다. JSP 같은 경우, 처리가 가능하지만 PHP는 실행이 불가능하다. 

고로, Web server로 아파치를 사용해 PHP를 사용할 수 있게 만들 수 있다.


결론적으로, 자원 이용의 효율성 및 장애 극복, 배포 및 유지보수의 편의성을 위해 Web Server, WAS를 각기 사용한다.
 

WAS 하나만으로도 웹 서버의 모든 기능을 처리할 수는 있다.

하지만 사람들이 많이 접속하는 대용량 WAS인 경우, 사용 중 WAS에서 문제가 생겨 WAS를 재시작해야 하는 경우가 생긴다. 

이 때 재시작하기 위해 앞단의 웹 서버에서 WAS를 사용하지 못하도록 요청을 차단한 후 WAS를 재시작하거나 다른 WAS를 이용한다면

사용자들은 WAS에 문제가 발생한지 모르고 이용이 가능하다. 즉 규모가 커질수록 웹 서버와 웹 앱 서버를 분리하는 것이다.


즉, 웹 서버의 구조는 아래의 총 3가지로 구성될 수 있다.

Client → WS → DB

Client → WAS → DB

Client → WS → WAS → DB


WAS가 처음 나왔을 때에 비해 기술이 좋아져서 혼자서도 모든 정적 동적 컨텐츠 관리가 가능하지만

효율,장애 극복,유지 보수의 편의성 등을 따졌을 때 WS와 WAS를 분리해서 함께 사용하는 것이 좋다는 것이다.