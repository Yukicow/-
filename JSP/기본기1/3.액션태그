





액션태그


액션태그란 JSP 내에서 어떤 동작을 지시하는 태그이다.


기본적인 3가지만 알아 보고 나머지는 추후에 공부한 후에 정리하자.



1. forward


<jsp:forward page = "jsp파일" /> 형태로 사용되며 jsp파일로 이동시키는 역할을 한다.

태그 내에 다른 태그를 추가할 때에는  <jsp:forward> </jsp:forward>처럼 시작 태그와 종료 태그를 분리하고 안에 태그를 넣어 준다.

response.sendRedirect()와 다른 점은 forward는 서버 내부적으로 요청의 흐름을 넘기는(위임) 것이다.

# 그렇기 때문에 외부 페이지는 사용 못 함

그래서 소스 코드를 보면 실제 이동된 페이지의 소스 코드이지만 url은 처음 url에서 변하지 않는다.

request.sendRedirect는 클라이언트의 페이지를 갱신하기 때문에 인자를 같이 넘겨 주어야 했지만

forward 액션 태그에 의해 연결된 페이지 간에는 동일한 request 객체를 공유한다.


forward 액션 태그를 만나면 출력 버퍼의 내용을 제거하고 프로그램 제어를 b.jsp로 이동(포워딩)시킨다.

이게 무슨 말이냐면 forward 태그를 만나기 전에 사용자에게 보내기 위해 저장해둔 모든 데이터들은 사라진다는 뜻이다.

따라서 최초 실행되는 JSP 페이지에서는 내용을 출력해봤자 의미가 없다. 

만약 forward를 실행하기 전에 강제로 flush하여 출력 버퍼의 내용을 브라우저로 출력하게 되면 forawrd 실행이 실패하게 된다.

JSP규약은 웹 브라우저에 데이터가 전송된 경우 <jsp:forward>액션 태그를 사용해서 흐름을 이동할 수 없도록 정의하고 있기 때문이다.


중요!!!)

위에 내용이 중요한 게 하다 보면 <script></script> 태그로 alert 같은 명령어를 사용해서 뭔가 띄우고 뒤에 forwarding을 시키고 싶을 때

그 앞에 response의 writer등으로 쓴 내용도 모두 없어져서 무시되기 때문에 왜 안 되는 지 궁금증이 생길 수 있다. 조심하자.





# jsp 컨테이너에 따라 html로는 이동이 안 되는 경우가 있다고 한다. 다행히 내 건 되는 듯.




2. include


<jsp:include page = "jsp파일" /> 형태로 사용되면 jsp파일을 화면에 포함시켜 출력하는 역할을 한다.

태그 내에 다른 태그를 추가할 때에는 <jsp:include> </jsp:include>처럼 시작 태그와 종료 태그를 분리하고 안에 태그를 넣어 준다.


<%@ include %> 와 다른점을 비교해 보자.


액션 태그 방식은 서로 각자의 스레드로 파일의 실행을 하고 나서 html로 클라이언트에게 요청이 보내질 때 합쳐져서 내보내진다.

include 태그에 의해 특정 파일이 호출받은면 그 파일은 받은 request, response객체를 이용해 로직을 수행하고 그에 맞는 결과를

html 파일로 만들어낼 것이다. 둘의 html 파일이 사용자에게 보내질 때 합쳐지는 개념인 것 같다.

# 하지만 액션태그 방식의 경우 호출된 파일은 response객체의 상태를 변경할 수 없도록 설계 되었다.


스크립트릿 방식은 include 하려는 jsp파일이 jsp파일 내에 복사되어 같이 컴파일 된다.

jsp 파일이 java 파일로 수정되기 전에 session.jsp 파일의 모든 내용이 호출한 jsp 파일로 include 된다는 뜻이다.

그렇기 때문에 둘이 하나가 되는 방식이라 jsp파일에 포함된 변수를 서로 공유하여 사용할 수 있다.


예를 들어 test1.jsp 파일이 있다고 해 보자. 

파일에 명령어 로직이 막~ 있을 것이다. 그 때 중간에 <%@ include file ="test2.jsp" %> 로 파일을 불러오면

그 include 명령어가 실행된 그 시점에 test2.jsp 파일의 모든 로직이 안으로 포함되어 실행되는 것이다.

완전히 파일 로직을 복사해서 그대로 실행하는 것과 같기 때문에 test1에서 사용했던 모든 변수나 메소드 등을 사용할 수 있다.

하지만 이것은 소스코드 내에서는 제대로 작동 되는 지를 판단을 못하기 때문에 아마 빨간 줄이 뒤ㅡ지게 많을 것이다.

하지만 잘 작동하니 걱정할 것 없다. test1 파일에 위에서 String id = request.getParameter("id") 로 불러온 적이 있는데

test2 파일에서 따로 id를 선언과 초기화 없이 바로 또 사용하는 로직을 넣어 두었다고 해 보자.

하지만 test2 소스 코드를 해석하는 녀석 입장에서는 당연히 id가 선언된 적도 없고 하니 빨간 줄을 막 그어댈 것이다. 안 된다고.

하지만 나중에 include 되는 관점에서 보면 test2의 소스 코드가 test1의 소스 코드에 그대로 들어가서 사용되는 것이기 때문에 

이미 선언된 적 있는 변수를 사용하는 것이나 다름이 없다. 


그리고 소스 코드가 호출한 jsp파일로 들어간다는 것은 같은 요청 객체를 사용한다는 뜻이니

test2에 request객체를 이용해 인자 값을 가져와도 실행했을 때 호출한 jsp파일의 request 객체를 사용해 제대로 인자를 갖고 온다.

그리고 위에서 말했듯 액션 태그 방식은 같은 request 객체를 공유한다.


결론은 두 include 방식 모두 클라이언트의 요청에 대한 같은 request 객체를 사용한다는 것이다. 방식만 다를 뿐.

지시자 방식은 애초에 호출한 파일이 같은 소스 코드 내에서 실행되니 같을 수 밖에 없고 

액션 태그 방식은 호출된 페이지가 복사된 request,response 객체를 사용한다.

단, 액션 태그 중에 밑에서 배울 'param'이라는 태그가 있는데 이것은 호출을 할 때에 인자를 넘기는 태그이다.

그래서 param 태그에서 name에 대한 value를 바꾸어 넘기거나 새로운 인자를 만들어 넘기면 

request객체의 value가 바뀐 name은 그 값들로 업데이트 되고 새로 생긴 인자는 request객체에 담겨 호출한 jsp파일로 넘어간다.

# 그래서 복사라고 생각한 것이다. 새로운 인자나 바뀐 인자는 원래 페이지에서는 적용이 안 되기 때문.


하여튼 위와 같은 점들을 생각했을 때 지시자 include는 잘 알고 사용하여야 한다. 

그렇지 않으면 소스 코드 상에서는 문제가 없어 보이는데 실행하면 충돌하는 경우가 많이 발생할 것 같다.


<jsp:include></jsp:include> 태그에는 flush 속성이 있는데 이것은 

포함될 페이지로 제어가 이동될 때 현재 포함하는 페이지가 지금까지 출력 버퍼에 저장한 결과를 처리하는 방법을 결정하는 속성이다.


flush 속성의 값을 'true' 로 지정하면 포함될 페이지로 제어가 이동될 때 

현재 페이지가 지금까지 버퍼에 저장한 내용을 웹 브라우저에 출력하고 버퍼를 비운다.


flush 속성을 일반적으로 'false' 로 지정하는 것이 좋다. 

'true'로 지정하면 일단 출력 버퍼를 웹 브라우저에 전송하게 되는데 이때 헤더 정보도 같이 전송된다. 

헤더 정보가 일단 웹 브라우저에 전송이 되고 나면 헤더 정보를 추가해도 결과가 반영되지 않기 때문이다.


<%@ include %>와 pageContext.include() 모두 RequestDispatcher객체의 include 메소드를 호출하는 원리로 작동한다.



3. param

<jsp:include>와 <jsp:forward> 태그의 하위 속성으로 사용된다.

<jsp:param name ="속성이름" value ="값"/> 의 형태를 가지며 인자를 보낼 때 사용한다.

<jsp:include>와 <jsp:forward> 태그 사이에 적어서 사용할 수 있는데 예를 들어 test파일을 include한다고 할 때

test파일에서 현재 웹 페이지가 클라이언트로 부터 받은 인자 id값을 필요로 한다면 

# 실제로는 클라이언트에게 받은 인자는 서로 갖다 보니 그럴 일은 거의 없겠지만 설명을 위해 이걸 선택했다.

<jsp:include page = "test.jsp"> 
    <jsp:param name="id" value= '<%=request.getParameter("id")%>' />이런 식으로 사용할 수 있다.
</jsp:include>


위의 표를 처음 보면 두 가지 의문이 들 것이다.

1. 왜 value가 ""가 아닌 ''로 되어 있나요?

이건 사실 이유는 아는데 가능한 지가 더 궁금할 것이다.

value 안의 함수 중에 ""를 쓰는 것이 있어서 ''를 통해 묶은 것이다.

근데 신기하게도 작동을 한다. 아마 value는 ''과""를 모두 허용하는 듯 하다.


2. 근데 왜 request.getParameter()를 <%= %> 안에 넣은 거죠?

value 안에 들어가는 값은 "" 또는 ''로 선언된다. 그렇기 때문에 값 자체를 넣어주어야 한다는 소리다.

그럼 특정 메소드의 결과값이나 변수를 value로 넣을 수가 없게 된다.

그 것을 해결하기 위해 jsp의 표현식 태그인 <%=%>를 이용하는 것이다. 

value에 표현식을 사용하고 안에 값,변수,메소드(void제외)를 넣으면 그에 해당하는 값은 파일 내에서

그 위치에 value값을 출력하는 것과 같다. 그래서 일반적으로 <%= > 을 사용하면 화면에 출력되는 이유가

jsp파일의 body부분에 value값이 찍힌 채로 보내지기 때문이다.

위가 이해가 됐다면 out.print()메소드를 이용할 수도 있다는 걸 알 것이다.

<%=%>가 아닌 <%~~ out.print("") %> 이런 식으로 사용해도 out.print가 해당 html 문서의 그 위치에 메소드의 value를 찍으니

value = "<%out.print("hi")%>" 는 value = "hi"와 같다는 것이다. 이걸 이용하면 <% %>에 조건식을 사용해 value를 찍어 줄 수 도 있다.

