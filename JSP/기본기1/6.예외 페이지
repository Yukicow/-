





웹 페이지에서 에러가 발생했을 때 클라이언트에게 보여 줄 페이지를 지정할 수 있다.

페이지 지시자를 이용하거나, web.xml단에서 처리해 줄 수 있다.


1. 페이지 지시자

<%@page errorPage = "에러 페이지" %> 형식으로 지정해 줄 수 있다.

각 페이지마다 페이지 지시자를 통해 에러가 발생했을 때 이동될 에러 페이지를 지정해 주는 것이다.

에러 페이지에는 <@page isErrorPage = "true" %> 와 같이 Error페이지라는 것을 true로 지정해 주어야 한다.

기본적으로 false로 되어 있기 때문에 에러 페이지에는 꼭 직접 true를 넣어 주어야 한다.

저렇게 isErrorPage를 true로 설정하고 나면 페이지 내에서 exception 객체를 이용할 수 있게 된다.


또 <% response.setStatus(200) %>을 설정해 주는데 현재 페이지의 상대를 나타내는 명령어이다.

200은 정상 페이지라는 뜻이다. 500,404 등등 여러 종류가 있고 500은 연산 오류에 대한 오류 페이지를 나타낸다.

웹 컨테이너에서 에러 페이지를 setStatus(500)으로 설정하고 내보내는 경우가 있다고 한다.

에러 페이지는 에러가 발생한 페이지에 대해 에러 페이지 대신 보여 주는 일반적인 정상 페이지이다.

그렇기 때문에 setStatus(200)으로 정상 페이지로 설정이 되어야 하는데 저렇게 500으로 내보내 지는 경우가 있기 때문에

그것을 방지하기 위해 설정해 주는 것이다.  # 나도 해 보니까 setStatus를 따로 설정 안하면 500으로 출력된다.



2. web.xml


web.xml 파일을 이용한 에러 페이지 처리 방법은 태그를 이용한다.

<error-page>
    <error-code> 에러코드 </error-code>
    <location> /에러 페이지 </location>
</error-page>

위 처럼 error-page를 틀로 지정하고 그 안에 error-code와 location을 넣는다.

error-code에는 발생하는 에러에 대한 코드를 넣어 주는 것이다 404,500 등등.

location에는 그 에러가 발생했을 때 이동할 페이지를 넣어 주는 것이다.


하나하나 지정해 주어야 한다는 게 조금 불편해 보이지만 모든 페이지에 적용된다는 게 유용하기도 하다.

또 404에러 같은 경우는 페이지를 이동할 때 없는 페이지에 대해 발생하는 에러이기 때문에

페이지를 이동시켜 준 그 페이지 내에서 발생하는 에러가 아니고 이동 후에 발생하는 에러이다.

이동은 했지만 그 페이지에 대한 정보가 없어서 나타나는 에러라는 것이다.

그래서 페이지에 지시자 방식으로 예외 처리를 했다면 웹 컨테이너에서 제공하는 404에러 페이지로 이동하게 된다.

# 그 페이지는 존재하지도 않기 때문에 예외 처리가 안 돼 있기 때문

하지만 web.xml에서 404에러에 대한 예외 처리를 해 두었다면 에러가 발생했을 때 원하는 에러 페이지로 이동할 것이다.

