





Servlet에 대해 좀 알아 봤으니 이제 진짜 JSP에 대해 공부해 보자.

JSP의 개념은 대충 알고 있으니 동작 원리만 조금 알아 보겠다.


사실 JSP의 동작 원리는 Servlet의 동작 원리를 알면 별 거 없다.

클라이언트가 jsp파일을 요청하면 jsp파일이 Servlet(java) 파일로 변환된다.

이것은 jsp 컨테이너가 알아서 해 준다. jsp의 html 태그들을 Servlet의 출력 객체의 인자로 넘겨

html코드가 완성될 수 있게 하는 과정을 가질 것이다. 그렇게 변환이 끝나면 class파일로 컴파일이 되고

애플리케이션이 실행되어 동작,기능을 수행하고 Servlet의 출력 객체로 완성된 html파일을 클라이언트에게 다시 보내는 것이다.


쉽게 말해서 jsp파일의 java로 이루어진 코드는 Servlet단에서 기능을 수행하고 html로 이루어진 코드는

Servlet의 출력 객체에 의해 실제 클라이언트에게 전송될 html파일이 되는 것이다.



JSP를 사용하려면 태그에 대해 알아야 한다. HTML에 JAVA코드를 넣는 것이니 당연하게도 태그를 알아야 한다.

JSP에 대해 알아 보자.


1. 지시자 <%@ %> : 페이지의 속성을 나타내는 태그

지시자에는 page,include,taglib이 있다.


1-1 page

page는 현재 페이지의 전체적인 속성을 지정해 주는 지시자이다.

<%@page language = "java" contentType = "txt/html"  속성 ="" .... %>

위와 같은 형식을 갖는다.


1-2 include

include는 별도의 페이지를 현재의 페이지에 집어 넣을 때 사용하는 지시자이다.

<%@include file = "jsp파일.jsp" %>

file 속성을 이용하여 jsp파일을 불러와 현재 페이지에 출력한다.


1-3 taglib

taglib는 JSTL과 같은 라이브러리를 사용하기 위해 사용하는 태그이다.




2. 주석 : <%-- --%>

말 그대로 주석이다. 소스코드를 열어 보면 주석은 보인다.

-- 말고 java에서 쓰는 //를 이용해도 된다.



3. 선언 <%! %> : 변수, 메소드 선언





4. 표현식 <%= %> : 결과값 출력

5. 스크립트릿 <% %> : JAVA 코드 입력

6. 액션 태그 <jsp:action> </jsp:action> : 자바빈 연결



그런데 위에서 스크립트릿<% %>에 변수를 선언하는 것과  <%! %>에 변수,메소드를 선언하는 것은 어떻게 다를까?

JSP 파일이 Servlet으로 변환되면 java 파일이 되는데 이 파일 안에는 _jspService() 메소드가 구현되어 있다.

그 메소드 안에 JSP의 모든 수행할 작업이 들어가게 된다.

근데 스크립트릿은 그 _jspService() 메소드 안에 선언을 하는 것과 같다. 그래서 지역변수가 된다.

당연히 메소드 안이기 때문에 메소드 안에 메소드의 선언은 불가하다. 그래서 스크립트릿으로는 변수만 선언할 수 있다.

그렇다면 선언 <%! %>은 무엇일까. <%! %>에 선언하면 전역변수가 된다. 클래스에 선언된 클래스 변수,메소드와 같다.

각각의 요청마다 객체를 생성하고 스레드를 할당해서 실행한다는 것을 기억하는가?

여기서 객체를 생성한다는 것은 jsp파일이 Servlet으로 변환되고 그 클래스 파일의 인스턴스를 만든다는 것이다.

즉, jsp를 Servlet으로 만들고 class 파일로 컴파일되면 그 class 파일의 객체를 만들고 각 인스턴스마다 스레드를 할당한다. 

스레드를 할당 받은 객체들은 각자의 메모리 영역을 갖고 자신이 받은 요청 데이터를 가지고 기능을 수행한다. 

<% %>에 선언된 값은 _jspService() 메소드에 선언되는 값이니 위처럼 생성되는 객체의 지역 변수가 되는 것이다.

그래서 각 인스턴스에 독립적이고 요청이 오면 새로운 객체가 생성되니 요청마다 각각 초기값으로 초기화 되는 것이다.

하지만 <%! %>에 선언된 전역 변수들은 클래스 변수 즉, static으로 선언된 변수와 같기 때문에

인스턴스의 생성과 상관없이 모든 인스턴스 객체들이 공유하는 변수와 메소드가 되는 것이다.

그래서 서버를 닫아 Servlet이 웹 앱이 닫히지 않는 한 인스턴스 객체들의 수행에 따라 계속 변하고 유지되는 값이 된다.

앱이 돌아가는 한 static 변수,메소드는 계속 메모리 상에 고정될 것이고 요청에 따라 인스턴스 객체를 생성해 멀티 스레드로 돌리는 것이다.


