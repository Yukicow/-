




JDBC

java에서 sql문을 실행하기 위한 java API이다.

java에서 제공하는 API중에 DB와 상호작용할 수 있는 API를 통틀어서 말하는 것이다.


DB를 만드는 각 회사에서 우리가 이런 JDBC를 사용할 수 있도록 JDBC드라이버를 만들어 제공한다.

각 회사에서 java 제공하는 driver 인터페이스를 상속받아 드라이버 클래스를 제작한다.

우리는 그런 드라이버에 연결하기만 하면 어떤 DB를 사용하던 JDBC를 가지고 같은 방식으로 DB에 접근할 수 있다.


우리는 oracle을 사용중이기 때문에 oracle을 다운 받을 때에 JDBC 드라이버도 같이 다운받아졌다.

이클립스의 class path에 그 파일을 넣으면 JDBC 드라이버 클래스 파일을 로드할 수 있게 된다.

# class path에 설정하는 것 보다 기본 class path에 jar 파일을 복사 붙여넣기 하는 것이 더 편하다. 


_g가 붙은 jar파일이 있고 없는 jar파일이 있는데 차이점은 _g가 붙은 것은 

추가 디버깅 코드를 지원해서 개발 환경에서 사용되는 것이라고 한다.

그러니 운영 배포를 할 때에는 _g가 없는 것을 사용해야 한다고 한다.




그럼 이제 JDBC를 사용해서 내 웹 앱과 DB를 연결시키는 과정을 알아 보겠다.


먼저 우리는 각 DB 회사에서 제공한 드라이버 클래스 파일을 로드해서 객체를 생성하고 연결해야 한다.

드라이버 클래스는 내부적으로 DB와 연결 가능하게 로직이 짜여 있다.

driver 클래스의 메소드로 connect() 메소드가 있는데 DBMS의 서버 정보를 받아 그 DBMS에 연결한다.


하지만 우리는 driver 객체를 바로 사용하지 않는다.

driver 객체는 DBMS에 연결만 도와 주는 드라이버 역할만 하고 우리는 실제로 다른 여러 객체를 만들어 DBMS을 이용한다.

# 우리는 오라클을 사용 중이니 RDBMS라고 생각하면 된다.


driver 클래스는 static으로 자신의 객체를 만들어 driverManager 클래스에 연결하는 로직을 갖고 있다.

이 말은 static이기 때문에 driver 클래스가 클래스 로더 의해 올려지기만 해도 메모리에 로직이 할당되어 실행된다는 뜻이다.

그래서 우리가 driver 클래스의 객체를 직접 생성하고 그 객체를 driverManager에 연결시켜 주지 않아도 

클래스 로더에 의해 메모리 상에 driver 클래스가 한 번 올리지기만 하면 된다는 것이다.


그래서 우리는 직접 객체를 생성하고 driverManager 클래스와 driver객체를 연결하는 registerDriver()메소드를 사용하지 않고

class.forName("driver 클래스") 메소드를 사용한다. 

class.forName() 메소드는 ()안에 들어오는 클래스의 Class 클래스 객체를 반환하는 메소드이다.

Class 클래스는 클래스에 대한 정보를 담고 있는 메타 데이터이다. 클래스의 이름,멤버 변수,메소드 정보 등등을 담고 있다.

그래서 우리가 class.forName()을 통해 driver 클래스를 호출하면 driver 클래스에 대한 정보가 로드될 것이다.

단순 정보에 대한 Class 클래스 객체가 반환되는 것이지만 이 때 클래스에 있는 static로직은 메모리 상에 고정될 것이다.

로직이 수행될 때 그 로직은 driver 객체와 driverManager를 연결 시키는 로직이다.


이런 원리로 class.forName()을 사용한다. 

객체를 직접 생성하고 할당하는 것 보다 효율면에서도 뛰어난데, 객체를 직접 생성하게 되면 

객체가 생성될 때 이미 위의 원리로 driverManager는 driver 객체와 연결이 바로 된다.

그럼 이미 그 시점에서 생성한 객체를 사용할 이유가 없어진다. 메모리 낭비라는 것이다.

그리고 또 class.forName()의 장점인 runtime 시에 원하는 객체를 생성할 수 있다는 것인데

class.forName()은 인자로 받은 값에 해당하는 클래스의 Class 객체를 생성한다.

즉, 우리가 다른 오라클,MySql 등등 여러 DBMS를 사용할 텐데 만약 객체를 직접 생성하는 방식을 사용했다면

다른 DBMS를 사용할 때에 그 DBMS의 JDBC driver을 따로 생성해야 한다는 것이다.

class.forName을 이용하면 ()안에 JDBC의 driver 클래스를 넣어 주면 그에 맞는 dirver객체가 생성되고 driverManager에 연결된다.

oracle에서 제공하는 라이브러리에서 driver 클래스의 위치는 현재 oracle.jdbc.driver.OracleDriver이다.

# 오라클은 곧 oracle.jdbc.driver.OracleDriver을 사용하지 않는다고 했다. 앞으로는 oracle.jdbc.OracleDriver를 사용하자.

즉, 우리가 만든 프로그램이 실행되고 특정 DBMS에 연결하기 위해 DBMS의 driver를 직접 인자로 전달하도록 설계해 놓았다면 

훨씬 효율적으로 사용할 수 있다는 것이다.


# 주의할 점!!! Tomcat은 다른 자바프로그램과 동일한 방법으로 classpath 를 바라보지 않는다.

# 따라서 eclipse에 classpath에 JDBC 드라이버 파일을 넣는 것으로는 인식을 못 한다.

# 일단 현재 내 선에서 가능한 방법은 src->main->webapp->->WEB-INF->lib-> 오른쪽 마우스 클릭 -> import -> 

# General -> File System -> browse에서 드라이버가 있는 폴더 선택 -> 드라이버(jar파일) - > finish




위의 과정은 JDBC driver가 메모리 상에 올라가 driverManager와 연결되는 과정이었다.

우리는 driver와 연결된 driverManager를 이용해 DBMS에 연결할 것이다.

driverManager안의 getConnection() 메소드를 이용한다.

인자로 URL을 넘긴다.

"jdbc:oracle:thin:@localhost:1521:XE" 이런 형태를 갖는다.

그럼 해당 DBMS에 로그인하고 DBMS와 연결된 Connection 객체를 생성해서 반환한다.


"jdbc:oracle:thin:@localhost:1521:XE" 의 의미


1. jdbc - jdbc 라이브러리


2. oracle - 오라클로 연결


3. thin - 사용하는 JDBC드라이버의 타입

자바용 오라클 JDBC 드라이버는 두 가지가 있는데 하나는 Java JDBC THIN 드라이버고, 다른 하나는 OCI기반의 드라이버라고 한다.


4. @localhost -  Oracle DB가 설치되어 있는 서버의 IP

내 내부 아이피로 접속하기 때문에 localhost를 사용.


5. 1521 - 포트번호 

1521 은 오라클 listener의 포트번호


6. XE - 리스너

Oracle database client의 고유한 service name이다. 디폴트로 XE를 사용한다.

이에 대한 설정 정보는 Oracle이 설치된 폴더 아래의 app\oracle\product\11.2.0\server\network\ADMIN\listener.ora 파일에 

다음과 같이 표시되어 있다.




그럼 이제 진짜 DBMS에 최종적으로 연결된 Connection 객체가 완성된 것이다.



하지만 참 슬프게도 또 이 Connection 객체를 바로 이용하지 않는다.

sql문을 이용하기 위해서 DBMS에 연결된 이 객체를 이용해 Statement와 PreparedStatement 객체를 만들어야 한다.

이 둘은 SQL문장을 실행하고 결과를 반환하는 기능들을 캡슐화한 인터페이스로 프로그램 내에서 제일 빈번하게 쓰이는 객체이다.




이 둘에 대해서는 다음에 강에 정리하겠다.

여기까지 DBMS에 연결되는 원리를 이해해 보았다.


참고로 driver 클래스,DBMS 정보,DB ID,DB PW 는 자주 사용되기도 하고 길고 복잡한 값들이라

따로 String 변수에 저장해 놓고 사용하는 경우가 많은 듯 하다.

