




Statement


저번 강에서 JDBC에 대해 알아 보았고 실제로 JDBC driver를 로드 및 DBMS에 연결을 해 보았다.

DBMS에 로드 했다면 이제 사용을 해 볼 차례이다.

우리가 프로그램 내에서 DBMS를 다루는데 필요한 SQL을 사용하기 위한 방법이

Statement 객체를 이용하는 것이다.


기본적인 Statement 객체의 메소드 executeQuery()와 executeUpdate()에 대해 알아 보자.


executeQuery()는 SQL문 실행 후 결과값이 생기는 경우에 사용되는 메소드이다.

이게 무슨 말이냐. 예를 들어 SQL의 select와 같은 예약어는 사용하고 나면

그에 맞는 결과를 창에 띄워 준다. 테이블,컬럼,레코드 등등을 화면에 출력한다는 뜻이다.

이러한 출력된 결과를 받아와야 하는 경우에 executeQuery()메소드를 사용한다.

()안에 String 형식으로 SQL의 명령문을 넣어 주면 실행된다. 

# 참고로 ';'는 빼고 적는다.


실행이 끝나면 ResultSet 데이터 타입의 객체를 반환하는데

이 객체는 레코드 데이터를 담는 객체이다. 안에 저장된 레코드들을 불러와서 사용할 수 있다.


executeUpdate()는 단순히 테이블의 내용을 변경시키는 SQL문을 사용할 때에 사용한다.

executeQuery()처럼 수행 결과에 대한 데이터를 따로 필요로 하지 않는 SQL문을 사용할 때 쓰는 것이다. 

SQL의 update,insert,delete 등을 사용할 때가 해당할 수 있겠다.

()안에 String 형식으로 SQL문을 그대로 작성해서 넣으면 된다. 




ResultSet


ResultSet은 executeQuery()에 의해 SQL문장을 실행한 후 나온 객체의 데이터 타입이다.

ResultSet 객체는 iterator와 약간 비슷한 느낌이라고 생각하면 된다.

가지고 있는 데이터에 순서가 있다. 다음 데이터와 이전 데이터에 차례대로 접근할 수 있다.


그럼 ResultSet 객체에 있는 메소드들에 대해 알아 보자.



참고로 모든 수행을 마친 각 객체들은 모두 close() 메소들을 통해 연결을 끊어 주어야 한다.

연결을 끊어 주지 않으면 뭐, 나처럼 서버 ㅈㄴ 닫았다 켰다 하면 문제가 없는데

서버가 늘 켜져 있는 기업 입장에서는 연결을 끊어 주지 않으면 연결 수가 수도 없이 증가할 것이다.

그럼 쓸 데 없는 메모리 낭비일 뿐만 아니라 나중에는 결국 버티지 못 하고 맛이 가버릴 것이다.

보통 객체들로 로직을 수행할 때 try문에 넣어 주는데 마지막에 finally를 이용해서 close에 대한 로직을 넣자.

닫아 주는 순서는 생성한 순서와 반대가 되어야 한다.

if(ResultSet객체 != null) ResultSet객체.close();
if(Statement객체 != null) Statement객체.close();
if(Connection객체 != null) Connection객체.close();

보통 위와 같이 사용한다. 더 최신 방법이 있는 것 같은데 아직은 모르겠다.



1. get<>()


get 메소드는 ()안에 속성값을 넣어 주면 그에 해당하는 값을 반환해 주는 메소드이다.

getString, getInt, getDouble 등등 원하는 자료형으로 받아올 수 있다.

# 문자형 타입으로 저장된 데이터는 String, 숫자형으로 저장된 데이터는 숫자 데이터 타입으로 불러오자. 

<>를 적어 준 이유는 그냥 각 데이터 타입에 대한 get 메소드를 표현하기 위한 것이지 실제로는 <>는 없다.



2.
