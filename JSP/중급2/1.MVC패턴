




MVC패턴은 소프트웨어 공학에서 사용되는 소프트웨어 디자인 패턴이다.

웹 프로그래밍에서도 사용된다. 우리는 이 방식으로 프로그래밍을 해 볼 것이기 때문에 알아 두어야 한다.


MVC패턴은 Model,View,Controller 세 가지로 분류하여 서로 상호작용하는 패턴을 말한다.

Controller는 요청에 필요한 Model을 골라 데이터베이스와 연결하여 일을 수행하고

Model은 데이터베이스에 연결하여 작업을 수행한다. 수행에 따른 결과를 Controller에게 전달하고 

Controller는 그것을 참고해 요청자에게 보내질 View를 골라 보낸다.

Controller가 가운데에 껴서 Model과 View를 다루는 형태인 것이다.



각 역할 별로 정리해 보면


Controller : Model과 View 사이를 이어주는 인터페이스 역할을 한다.

사용자로부터 View에 요청이 있으면 Controller는 해당 업무를 수행하는 Model을 호출하고 

Model이 업무를 모두 수행하면 다시 결과를 View에 전달하는 역할을 한다.


Model : Model은 Data와 애플리케이션이 무엇을 할 것인지를 정의하는 부분으로 내부 비즈니스 로직을 처리하기 위한 역할을 한다.

즉, 모델은 컨트롤러가 호출을 하면 DB와 연동하여 사용자의 입출력 데이터를 다루는 일과 같은 

데이터와 연관된 비즈니스 로직을 처리하는 역할을 한다.


View : View는 사용자에게 보여주는 화면(UI)이 해당된다.

사용자와 상호작용을 하며 컨트롤러로부터 받은 모델의 결과값을 사용자에게 화면으로 출력하는 일을 한다.

Model에서 받은 데이터는 별도로 저장하지 않는다.



JSP에서 MVC패턴에는 Model1 방식과 Model2 방식이 있다.

Model1은 유지보수 보다는 빠르게 웹을 제작하는데에 사용하는 패턴이다.

Model2는 유지보수에 유리한 패턴이다. 


Model1

모델1 구조는 사용자의 요청을 JSP가 전부 다 처리한다. 

웹브라우저 사용자의 요청을 받은 JSP는 자바 빈이나 서비스 클래스를 사용하여 웹브라우저가 요청한 작업을 처리하고 그 결과를 출력해 준다.


Model2

모델2 구조는 모델1 구조와 달리 웹브라우저 사용자의 요청을 서블릿이 받는다. 

서블릿은 웹브라우저의 요청을 받아 View로 보여줄 것인지 Model로 보내줄 것인지 정하여 전송해 준다.

모델2 방식의 경우 실질적으로 보이는 HTML과 JAVA 소스를 분리해놓았기 때문에 모델 1 방식에 비해 

개발을 확장시키기도 쉽고 유지 보수하기도 쉽다. (코딩을 좀 더 깔끔하게 할 수 있습니다.)