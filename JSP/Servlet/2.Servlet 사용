




Servlet은 크게 알아 볼 건 없다. 가볍게 알고 넘어가자.


먼저 Servlet은 doGet과 doPost라는 메소드가 있다.

두 메소드는 html 태그의 form태그가 있는데 사용자로부터 데이터를 입력받을 때 사용된다.

form태그 자체가 입력을 받는 것이 아니고 입력을 받을 로직을 묶는 역할을 하는 것이다.

그 안에 담긴 태그들로 받아진 입력 데이터들은 form에서 정의하는 웹으로 이동하게 된다.

여기서 웹으로 데이터를 전달하게 되면 웹 서버에서는 그 데이터를 받아 Servlet의 doGet 또는 doPost 메소드를 실행한다.

여기서 doGet과 doPost중 어떤 메소드가 사용될 지를 가르는 것이 form 태그의 method라는 속성이다.

method 속성으로 "get"을 넘기면 doGet이 "post"를 넘기면 doPost 메소드가 호출되는 것이다.

한 마디로 doGet과 doPost 메소드는 클라이언트가 입력한 데이터를 받아 호출되어 실행되는 메소드라고 할 수 있다.


이 메소드들의 로직을 한 번 가볍게 작성해 보자.

두 메소드는 HttpServletRequest 객체와 HttpServletResponse 객체를 매개변수로 갖는다. 

두 객체는 웹 서버에서 클라이언트의 요청을 받으면 자체적으로 생성해서 넘겨 준다.

우리는 그렇게 넘겨 받은 두 객체를 이용해서 로직을 작성하면 된다.

html의 input 태그를 이용하면 클라이언트의 입력을 받을 수 있는데 이 때 받은 입력 데이터들을 

불러오는 HttpServletRequest 객체의 메소드가 존재한다. 가장 많이 쓰이는 3가지만 알아 보자.

1. getParameter(name)

2. getParameterValues(name)

3. getParameterNames(name)

여기서 name이란 input 태그에서 각 입력 받은 데이터들의 종류를 묶어서 이름을 지정하는데 그것을 말한다.

예를 들어 input태그를 이용해서 체크박스를 만든다고 해 보자.

<input type = "checkbox" name ="hobby" value = "요리">
<input type = "checkbox" name ="hobby" value = "게임">
<input type = "checkbox" name ="hobby" value = "유튜브 보기">
<input type = "checkbox" name ="hobby" value = "섹스">

위의 태그에서 name에 해당하는 부분을 의미한다.

취미에 대한 체크박스를 만들고 그것을 모두 hobby라는 이름으로 묶는 것이다.

그럼 Servlet에서 데이터를 받아 사용할 때, hobby를 통해 입력 데이터의 value를 구분하여 이용할 수 있는 것이다.


getParameter(name)는 name에 해당하는 value를 반환해 주는 메소드이다.


*중요) getParameter()메소드는 아무 값도 입력되지 않으면 null,"null","" 셋 중 하나를 반환한다.

정확히는 잘 모르겠는데 하여튼 만약 getParameter로 받은 값이 없을 때에 대한 처리를 해 주고 싶으면

if( 값 == null || 값.equals("") || 값.equals("null") )로 처리해 주어야 깔끔하다.

# 필자의 경우 getParameter()메소드로 받을 값이 없을 때 ""를 반환했다. 하지만 확실하게 세 가지 경우의 수 모두 처리해 주자.


getParameterValues(name)는 name에 해당하는 value를 반환해 주는 메소드인데, 그 value 값이 여러개일 때 사용한다.

같은 name속성의 value가 여러개 일 때 이를 getParameterValues(name)을 통해 배열로 받을 수 있다.

# 위의 hobby 같은 경우, 체크박스 타입이기 때문에 value가 여러개 지정될 수 있다. 이럴 경우 getParameterValues를 사용한다.


getParameterNames(name)는 form 태그에 있는 모든 name속성의 value를 Enumeration 객체로 반환하는 메소드이다.




다음 두 메소드의 한글 처리 방식이다.

두 메소드에서 데이터가 전송되어 왔을 때 한글이 깨지는 경우가 있다.

이럴 때에는 인코딩 방식을 설정해 주어야 하는데 doGet과 doPost가 방식이 서로 다르다.

일반적으로 doGet메소드는 톰캣에서 자동으로 한글처리를 해 주지만 doPost는 그렇지 않다.

하지만 doGet도 한글이 깨지는 경우가 있는데 그럴 때에는 밑에 방법대로 해보도록 하자.

doGet은 자신 서버의 server.xml 설정 파일로 들어가서 connector 태그에 URLEncoding = "EUC-KR" 을 넣어 주면 된다. # UTF-8도 됨


doPost는 doPost 메소드 내부에 메소드 하나를 넣어 주면 되는데 

request.setCharacterEncoding("EUC-KR") 응답을 보내는 것에는 response.setCharacterEncoding("EUC-KR")을 넣으면 된다.


하지만 매번 요청을 받고 보낼 때마다 이지랄 하는 것도 힘들다.

그래서 프로젝트의 web.xml 파일에 태그를 추가하여 자동으로 한글 인코딩 하는 두 가지 방법이 있다.


두 방식 모두 필터라는 파일을 이용한다.

필터는 수문장 같은 역할을 한다. 웹 애플리케이션 서버에서 request와 response에 대한 것을

서블릿 파일로 보낼 때 중간에 서서 그것들을 가로챈다. 그리고 필터에 대한 로직을 먼저 수행하도록 한다.

또 로직을 수행하고 그냥 넘기는 것이 아니고 실행하게 할 지 말 지도 필터에 정의할 수가 있다.

원래는 이런 특성 때문에 필터인데 이 특성을 이용해서 한글 인코딩을 자동으로 하는 것처럼 만드는 것이다.


먼저, 필터 파일을 만들어야 한다. 적당히 패키지를 하나 만들고 그 안에 필터 파일을 만들면 되는데

이름을 적당히 지어 주고 다음으로 넘어가면 뭐가 뜰 텐데 넘어가면 되고

마지막에 interface에 서블릿 필터 인터페이스만 추가해 주면 된다. 

# 보통 자동으로 되어 있다



그리고 첫 번째 방법은 프로젝트의 web.xml 파일에 밑의 태그를 추가하면 끝난다.

<filter>
  	<filter-name>EncodingFilter</filter-name>
  	<filter-class>패키지.필터파일</filter-class>
  <init-param>
  	<param-name>encoding</param-name>
  	<param-value>utf-8</param-value>
  </init-param>
  </filter>
  <filter-mapping>
  	<filter-name>EncodingFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>


<web-app> </web-app> 태그 사이에 넣어 주면 된다.


위의 태그가 너무 복잡해서 싫으면 조금 더 간단한 두 번째 방법이 있다.

필터 파일에 클래스 위에 어노테이션으로 @Webfilter("/*")를 넣어 주고


그 필터 파일의 doFilter 메소드에 

request.setCharacterEncoding("UTF-8");
response.setCharacterEncoding("UTF-8");
response.setContentType("text/html; charset=UTF-8");

doFilter 메소드를 보면 chain.doFilter 메소드가 있는데

그 위에 세 명령어를 넣어서 오버라이딩 해 주면 된다.

response.setCharacterEncoding("UTF-8");
response.setContentType("text/html; charset=UTF-8");

둘의 차이점은 

response.setCharacterEncoding("UTF-8");

얘는 서블릿이 HTML 파일을 만들 때 UTF-8로 쓰는 것이고

response.setContentType("text/html; charset=UTF-8");

얘는 HTML이 UTF-8 형식이라는 것을 브라우저에게 알리는 녀석이다.


https://www.youtube.com/watch?v=d8GkAMpjDfs&list=PLq8wAnVUcTFVOtENMsujSgtv2TOsMy8zd&t=874s

