






JSP의 경우 HTML 코드에 중간중간 java언어가 삽입되기 때문에

가독성이 떨어지는 문제점이 있다.

이러한 단점을 보완하고자 만들어진 태그 라이브러리가 JSTL이다.

JSTL의 경우 Tomcat 컨테이너에 포함되어 있지 않기 때문에 별도의 설치가 필요하다.



JSTL에서는 다섯 가지의 라이브러리를 제공하는데 Core 라이브러리가 가장 많이 쓰인다고 한다.

SQL과 XML 라이브러리는 현재 거의 사용되지 않기 때문에 넘어가고 Core,Function,Formatting 라이브러리에 대해 알아 보자


Core 라이브러리는 출력,제어문,반복문 같은 기능이 포함되어 있다.

사용법은 먼저 <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 

위의 지시자 태그로 사용한다고 명시해 주어야 한다. 

uri는 뭔가요? 

태그라이브러리도 하나의 java 소스 코드로 이루어진 라이브러리를 가져다 사용하는 것이다.

옛날에는 이러한 태그 라이브러리도 직접 만들어서 사용했다고 한다.

https://www.youtube.com/watch?v=9uW3jMilw8s&list=PLq8wAnVUcTFVOtENMsujSgtv2TOsMy8zd&index=61


uri는 그 라이브러리들을 구분하기 위한 것이다.

예를 들어 서로 다른 두 사람이 서로 다른 태그 라이브러리를 만들었다고 해 보자.

그 두 라이브러리 안에는 <for></for>라는 태그에 대한 기능을 만들어 놨는데

두 라이브러리 모두 <for></for>을 사용할 수 있으면 어떤 라이브러리를 사용해야 하는 지 문제가 생긴다.

그래서 그 라이브러리를 구분하기 위한 고유 식별자가 저 uri가 되는 것이다.


근데 그냥 편한 문자열로 하지 왜 저렇게 복잡하게 uri형태를 이용하죠?

그건 url에서 도메인은 고유하기 때문이다.

보통 라이브러리에에서 uri 형식에는 도메인을 포함하는데 도메인은 고유하기 때문에 절대로 겹칠 일이 없다.

만약 서로 다른 두 사람이 식별자로 같은 문자열을 사용해 버리면 또 문제가 발생한다.

그것을 방지하기 위해서는 고유한 무언가를 사용하는 것인데, 그게 바로 도메인다.

그래서 식별자로 도메인을 포함하는 uri 형태를 쓰는 것이다.

자신들이 사용하는 도메인을 쓰면 uri가 겹칠일이 영원히 없다.


그리고 이렇게 식별자를 지정하면 식별자를 통해 태그를 사용해야 한다.

<http://java.sun.com/jsp/jstl/core:for> </for>

태그를 쓸 때 마다 위처럼 uri를 적어 주어야 한다는 것이다. 

하지만 이건 영 가독성도 좋지 않고 쓰기도 불편하다.

그래서 prefix를 통해 특정 태그 라이브러리에 대해 파일 내에서 사용할 식별자를 정하는 것이다.

즉, uri 식별자는 라이브러리를 구분하기 위한 것 prefix는 파일 내에서 서로 다른 라이브러리를 구분할 때 사용하는 

uri 식별자를 줄여서 사용하기 위한 것이라고 생각하면 된다.





사용법에 대해 알아 보자.


1. Core라이브러리


출력 태그 : <c:out value="출력값">

단순히 화면에 value에 대한 값을 출력하는 태그이다.

요즘은 안 쓰는 추세이고 안 쓰는 게 좋다.


변수 저장 태그 : <c:set var="변수 이름" value="값" default="기본 값">

변수를 만들고 값을 안에 저장한다. 저장된 변수는 EL 등을 이용해 출력 가능하다.

value가 null이면 기본 값에 지정한 값이 들어간다. # 안 써도 된다.

이렇게 저장한 변수는 표현식으로는 출력할 수 없다. <%= %> 불가능.


변수 저장 태그는 변수 뿐만 아니라 객체의 변수값 지정도 가능하다.

<c:set target="${객체}" property="인스턴스변수" value="값" />

Bean을 사용하는 경우나 Map을 사용하는 경우에 쓸 수 있다.

JSTL도 태그이기 때문에 java 언어 독자적으로 사용하는 것들에는 접근할 수 없고

태그끼리 연관되는 객체나 변수 등에만 접근할 수 있다.


변수 제거 태그 : <c:remove var="변수 이름" scope="범위">



제어 태그 

1. <c:if> 태그 : <c:if test ="조건문"> </c:if>

test안의 조건문의 value가 true 이면 <c:if></c:if>태그 안의 구문을 실행한다.

# 조건문이기 때문에 보통 EL안에 넣어서 표현한다. EL을 사용하기 때문에 연산자를 이용한 표현도 가능하다.


2. <c:choose> 태그 : 

<c:choose> 
    <c:when test="조건식">
        실행
    </c:when>
    <c:otherwise>
       위의 모든 조건식 false일 시 실행
    </c:when>
</c:choose>


switch 문과 비슷하다.

when은 case에 해당하고 otherwise는 default에 해당한다.



반복 태그


1. <c:forEach> 태그

<c:forEach var="변수명" items="목록 데이터" begin="시작 인덱스" end="종료 인덱스" varStatus="변수명2" step="숫자"></c:forEach>

item에 지정된 객체의 목록에 있는 데이터를 시작인덱스 값부터 꺼내서 시작 인덱스 부터 종료 인덱스까지 반복 로직을 실행한다.

꺼낸 데이터는 var에서 지정한 변수에 들어간다.

varStatus는 현재 반복문에 대한 여러 정보를 담고 있는 변수를 꺼내 쓸 수 있도록 변수명을 지정하는 것이다.

Step은 인덱스를 몇 씩 증가할 지 결정


각각 varStatus에 있는 속성을 알아 보자. (varStatus를 status라고 지정했다고 가정)

- status.index : 0부터 시작하는 루프의 인덱스. (begin값이 설정되어 있다면 그 값부터 시작)

- status.count : 현재 몇번째 루프인지 값 (1부터 시작)

- status.current : 현재 item (현재 반복의 var속성의 값과 같다.)

- status.first : 현재가 첫 번째 루프이면 참

- status.last : 현재가 마지막 루프이면 참

- status.begin : begin  속성을 사용했을 경우 그 값이 나옴

- status.end : end 속성을 사용했을 경우 그 값이 나옴

- status.step : step 속성을 사용했을 경우 그 값이 나옴

이것들은 똑같이 EL 태그를 통해 사용할 수 있다. ${status.index}




items에는 다음을 지정할 수 있다.

1. 배열

2. java.util.Collection 구현체(ArrayList, LinkedList, EnumSet, ...)

3. java.util.Iterator 구현체

4. java.util.Enumeration 구현체

5. java.util.Map 구현체

6. 콤마(,) 구분자로 나열된 문자열



2. <c:forTokens> 태그 : <c:forTokens var="변수명" items="문자열" delims="구분자">콘텐츠</c:forTokens>

문자열을 토큰화 해서 반복문을 돌린다.

items에는 문자열이 직접 들어가거나 특정 문자열 객체를 넣어줄 수 있다.

delims에 구분자를 적으면 그 구분자를 기준으로(구분자는 없어짐) 각 문자열이 토큰화 된다.

토큰화된 문자열은 var에서 지정한 변수에 순서대로 들어간다.




url태그

1. <c:url> 태그 : 

<c:url var="변수명" value="url">
    <c:param name="파라미터명" value="값" />
    <c:param name="파라미터명" value="값" />
    <c:param name="파라미터명" value="값" />
</c:url>

get방식처럼 인자를 url에 담아 넘기는 경우 그런 url을 만들어야 할 때 사용할 수 있다.


2. <c:import> 태그 : <c:import url="url" var="변수명" scope="page(기본값) | request | session | application" />

url 속성에 콘텐츠가 있는 주소를 지정하면 해당 주소로 요청하고 응답 결과를 받아서 반환한다.

요즘은 안 쓰는 추세이고 안 쓰는 게 좋다.


3. <c:redirect> 태그 : <c:redirect url="url" />

리다이렉트 처리를 할때 사용한다. 내부적으로 HttpServletResponse의 sendRedirect()를 호출한다.

요즘은 안 쓰는 추세이고 안 쓰는 게 좋다.






2. format 라이브러리

여러 가지가 있지만 두 개만 알아볼 것이다. 나머지는 필요하면 알아서 검색해서 쓰자.


1. <fmt:formatDate> 태그

날짜 데이터의 출력 형식을 변환한다.

<fmt:formatDate pattern="패턴" value="날짜 데이터"></fmt:formatDate>

pattern에 지정한 패턴에 맞게 날짜 데이터가 변환된다.

패턴의 기본형식은 yyyy-MM-dd hh:mm:ss이다. 여기서 원하는 것들만 남겨서 출력할 수 있다.

예시) yy-MM-dd hh:mm:ss, yy-M-dd h:mm:ss,  yy-M, yy!!M m#@ss

위 예시처럼 막 남겨도 된다. 

그리고 '-' ':'와 같은 것은 그냥 관용적인 것이지 원하는 특수문자를 써도 된다.

그냥 위의 알파벳들이 년,월,일,시,분,초의 값이 대입되는 것 뿐이고 특수 문자는 크게 의미 없다.

!!을 쓰든 @@을 쓰든 상관없다.



2. <fmt:formatNumber>

숫자의 출력 형식을 변환한다.

기본 형식은 3자리 수마다 ','를 붙여 줌


<fmt:formatNumber value="숫자 데이터" type="형식 타입" pattern="패턴지정" maxIntegerDigit="" maxFractionDigit="">

type은 형태를 지정하는 것인데 num,currency,percent 등이 있다. 

원하는 패턴을 직접 만들 수도 있는데 type을 num으로 지정하고 pattern에 원하는 패턴을 지정하면 된다.

숫자는 #로 표현하고 구분자나 뒤에 붙이 특수문자,문자,문자열 등을 추가하면 된다.

예시) pattern="#,####원" pattern="헉!#,####원숭이"

숫자 가운데에 오는 특수 문자는 ','만사용 가능하고 다른 특수 문자,문자열,문자는 숫자의 맨 앞과 뒤에만 사용 가능하다.

#,####에서 ',' 앞에 #은 중요하지 않다 #,####이나 ,#### 이나 #########,####이나 결국 뒤의 '#'의 개수에 따라

','가 붙는 기준이 결정 된다. 즉, #가 뒤에 4개이기 때문에 숫자 4자리수마다 ','를 붙여 준다.








3. Function 라이브러리

그렇게 많이 사용되지는 않지만 혹시 쓰일 일이 있을 수도 있으니 알아는 두자


Function 태그 라이브러리는 문자열과 관련된 여러 가지 함수를 제공하는데

출력되는 문자열을 대문자로 바꿔 주거나, 특정 문자열로 끝날 경우 참을 반환하게 한다거나 특정 문자를 다른 문자로 바꾸거나 등등..


Function 라이브러리는 EL태그와 함께 사용된다.
 
보통은 prefix를 지정하고 태그 안에 <c:></c:> 이런 식으로 사용했는데

Function라이브러리는 함수와 비슷하게 EL태그 내에서 ${fn:~~} 이런 식으로 사용한다.


아주 간단하게 두 개만 알아 보도록 하자.

나머진 필요할 것 같으면 찾아서 쓰기


fn:endsWith() : ()안의 데이터가 ~로 끝날 경우 참을 반환하게 한다.

ex) ${fn:endsWith(fileName)}

fn:toUpperCase() : ()안의 데이터를 대문자로 출력한다.

ex) ${fn:toUpperCase(fileName)}

