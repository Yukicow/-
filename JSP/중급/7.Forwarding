





서블릿 또는 jsp에서 요청을 받은 후 다른 컴포넌트로 요청을 위임할 수 있다. 

이렇게 위임하는 것을 Forwarding이라고 한다.

그리고 이러한 위임 방법에는 2개의 클래스를 이용한다.



1. RequestDispatcher 


RequestDispatcher 클래스의 경우 요청 받은 요청 객체를 위임하는 컴포넌트에 동일하게 전달할 수 있다.

RequestDispatcher dispatcher = request.getRequestDispatcher("위임할 파일 url");

위의 형태로 사용된다. 

그러면 dispathcer 에는 위임할 파일에 대한 주소가 담긴 RequestDispatcher 객체가 담긴다.

RequestDispatcher 클래스에는 forward(request, response) 메소드가 있다.

이 메소드를 사용해야 우리가 지정한 위임할 파일에 request와 response객체를 넘기고 위임을 한다.

그럼 이제 그 파일 내에서 request객체와 response객체를 사용할 수 있다.



<jsp:forward></jsp:forward>와 같은 것이다.

<jsp:forward></jsp:forward>는 내부적으로 서블릿 파일로 변환되면 

RequestDispatcher 클래스의 forward()메소드가 실행되는 코드로 변환된다.





2. HttpServletResponse 클래스


얘는 그냥 우리가 자주 본 response 객체이다.

? 얘가 무슨 위임을 한다는 거죠? 라고 할 수 있지만

사실 우리는 그동안 위임을 ㅈㄴ 하고 있었다.

바로 response.sendRedirect()를 통해서 위임을 하고 있었다.

즉, 우리가 sendRedirect()를 사용한 게 위임을 하고 있었던 것이다.


그렇다면 배운 적이 있으니 이해할 수 있을 것이다.

당연하게도 이렇게 위임하는 방식은 사용자를 새 페이지로 넘기는 것이기 때문에 

요청이 유지되는 것이 아니고 새로운 요청에 해당하게 된다.

그러니 당연히 그 파일에 대한 request객체와 response객체는 새롭게 생성된다.

따라서 이 방식은 request객체와 response객체를 공유하지 않는 위임 방식이다.


뭐 말이 위임이라 거창한 거라 생각했는데 그냥 도중에 자신이 처리하는 요청을 멈추고 

다른 쪽으로 요청을 옮길 때 그것을 위임이라고 표현한다.

# "어떠한 요청을 받았을때 그것을 직접 처리하지 않고 다른쪽으로 위임할 때 포워딩이라고 한다"

이 때 요청에 대한 객체들을 유지한 상태로 위임을 하고 싶을 때에는 RequestDispatcher 클래스 방식을 이용하고

그냥 요청을 아예 새롭게 넘겨버리고 싶을 때에는 HttpServletResponse 클래스 방식을 사용한다.

물론 전에도 배웠지만 response로도 인자를 넘기는 것이 가능하다.

url에 인자를 담아서 보내는 것이다. response.sendRedirect()의 경우 url을 변경시키면서 위임이 일어나기 때문에

url에 인자를 담아서 위임이 가능하다. 객체는 넘길 수 없지만 꼭 필요한 인자가 있다면 담아서 넘기도록 하자.







이왕 나온 김에 페이지 이동에 대한 내용을 다 다루고 가자



1. sendRedirect

sendRedirect는 사용자의 페이지를 아예 이동시키는 방식이다. 따라서 요청을 새롭게 받게 되는 것과 같다. 

또 sendRedirect는 현재 페이지의 sendRedirect메소드를 만난 후의 로직들도 모두 실행이 되기 때문에 사용에 주의해야 한다.


" response.sendRedirect()를 실행될때 페이지를 이동하는 것이 아니라 

페이지의 Header정보의 HTTP 상태코드(Status code)를 302로 바꿔서 보내준다. "


이게 무슨 말이냐면 response객체에는 HTTP 상태코드를 세팅하는 메소드가 있다.

HTTP 상태는 404 500 등등 예외페이지,정상페이지 등등 할 때 그 상태를 나타내 주는 http 프로토콜의 헤더 양식 중 하나인 듯 하다.

302은 http 프로토콜에서 페이지 이동을 하기 위한 것을 나타내는데, response객체는 상태코드를 지정하는 것 말고도

302 상태에서 이동할 URL을 설정할 수도 있다. 아마도 sendRedirect 메소드는 이 과정을 다 해 주는 메소드가 아닐까 싶다.

하여튼 sendRedirect는 response 객체의 메소드이기 때문에 response 객체에 특정 설정을 하는 메소드이다.

이 response 객체에 저장된 내용들은 실제 요청에 대한 수행이 끝나고 응답으로 보내질 때에 그 페이지에 적용되는 내용들이다.

따라서 sendRedirect메소드는 호출한 시점에서 페이지를 이동하는 것이 아니고 response객체에 저장해 놓았다가

실제로 응답을 할 때에 거기에 담긴 정보를 토대로 페이지가 생성되어 사용자에게 보내지는 것이다.

그 말은 즉슨, 페이지가 바로 이동되는 것이 아니기 때문에 sendRedirect 메소드 밑의 로직도 당연히 수행하게 된다는 것이다.


sendRedirect는 또 조심해야 할 것이 있다.

바로 include 태그와 함께 사용할 때이다.

include 태그에는 두 가지가 있다고 했다 액션 태그 방식과 스크립트릿 방식이다.

스크립트릿 방식은 완전히 하나의 파일내에 다른 파일에 대한 servlet 코드가 추가되는 방식이라 그냥 하나로 보면 된다.

그래서 문제가 없는데 액션 태그 방식에서 문제가 생긴다.

액션태그 include의 정확한 동작원리는 모르지만 대충 예상해 보면 main servlet에 대한 로직을 수행하다가

include를 만나면 그 파일에 대한 servlet을 실행해서 결과를 response에 담거나 아예 결과 파일을 포함시키는 식으로 동작하지 않을까 한다.

어쨋든 만약 액션 태그 방식으로 include된 파일 내에 sendRedirect 메소드가 있으면 실행이 안 된다.

액션태그 include 처럼 잠시 다른 페이지에서 수행을 하고 다시 돌아오는 형태를 갖는 경우 

response의 상태 코드나 헤더 설정을 변경하지 못 하게 막기 때문이다. 그러니 sendRedirect가 헤더 정보를 302로 바꾸는 게 불가능해진다.

"The included servlet cannot change the response status code or set headers; any attempt to make a change is ignored."

위는 API문서에 있는 내용을 가져온 것이다. 

결국 실제로 사용자에게 응답이 보내질 때 사용되는 response객체의 상태 코드와 헤더 정보를 호출된 페이지에서는 바꿀 수 없다는 것이다.

만약 include 하려는 파일이 sendRedirect의 역할이 중요한 파일이라면 액션태그 말고 스크립트릿(<%@ %>)방식으로 사용하자.




2. location.href

sendRedirect과 가장 비슷한 녀석이다.

하지만 이녀석은 sendRedirect와 다르게 response 객체를 이용한 것이 아니기 때문에

include 내에서 아무렇게 사용해도 다 작동한다.


그리고 또 큰 차이점은 back 버튼이 되고 안되고의 차이이다.

sendRedirect를 통해 다른 페이지로 이동하면 뒤로 가기 버튼이 되는데

location.href로 가면 뒤로가기가 안 된다. url은 바뀐다.


location.href는 당연하게도 바로 페이지를 이동시키는 기능이기 때문에 뒤의 로직은 수행을 안 한다.




3. forward 

forward의 방법에는 pageContext.forawrd와 <jsp:forawrd> 그리고 RequestDispatcher객체의 forward 메소드 총 3가지가 있다.

모두 같은 방식으로 사료된다. 


forward는 다른 챕터에서 다뤘으니 크게 볼 건 없고 서버 내부적으로 요청을 위임하는 방식이기 때문에 

사용자는 요청을 보낸 그 페이지를 유지하지만 내부에서 다른 페이지로 요청 위임을 하고 

보여지는 view는 위임에 의해 처리되어 최종적으로 결정된 페이지이기 때문에 url이 유지가 된다.

원래 그 페이지에 대한 url은 다른 것이지만 내부적으로 요청이 위임되어 보여지는 페이지가 바뀐 것이기 때문이다.

물론 요청을 위임하고 그 도중에 sendRedirect나 location.href 와 같은 로직이 있다면

사용자에게 응답이 갔다가 다시 요청을 하는 형식이기 때문에 url이 바뀐다.


