







저번에 파일 업로드까지 알아 보았는데 사실 조금 부족한 내용이 있다.

문제는 총 4가지 인데 하나씩 알아 보자



1. 다중파일 업로드 시

다중파일 업로드를 할 수 있도록 했는데 만약 파일을 1개만 업로드할 경우,

정확히는 파일 업로드 가능 개수 보다 적게 파일을 업로드할 때에 문제가 생긴다.

왜냐하면 인자로 첨부한 파일에 대한 인자들이 넘어가는데 업로드하지 않은 파일 업로드에 대해서도

같은 파일 업로드의 속성을 갖기 때문에 인자가 넘어가기 때문이다.

이럴 경우 parts에서 for문을 돌리는 과정에서 아무 값도 넘어가지 않은 파일을 가지고

로직을 수행하는 경우가 생기기 때문에 로직 수행중 오류가 발생한다.


이것을 방지하기 위해서 코드를 추가해 주면 되는데 아주 간단하다.

if(part.getSize()==0) continue;

위의 한 줄만 넣어주면 끝난다.

파일(데이터)의 크기를 출력해 주는 함수인데 아무 것도 넘어오지 않았을 경우 0이 되기 때문에

아무것도 넘어오지 않은 파일 업로드에 대해 넘어갈 수 있게 해 준다.



2. 파일을 업로드할 폴더가 존재하지 않음

우리가 프로젝트에 폴더를 만들고 거기에 파일을 업로드 해도 실제로는 

서버에서 사용하는 디렉토리에 실제 매핑되는 디렉토리가 만들어지고 거기에 파일이 업로드된다.

한 마디로 우리가 사용하는 모든 Path들은 프로젝트와 관련된 Path가 아니고

실제로 서버에서 사용하는 디렉토리에 해당하는 것이다. 

절대경로 또한 프로젝트 워크스페이스의 webapp이 기준이 아니고 서버의 따로 존재하는 webapp이 절대경로 기준이 된다.

그래서 우리가 getRealPath() 에서 ()에 설정해 주는 url도 서버의 webapp이 기준이 된다.

그렇기 때문에 실제 서버의 디렉토리를 반환해 주는 것이다.

그럼 이 때 ()안에 들어가는 path는 실제 서버 디렉토리를 나타내는데

우리가 프로젝트 워크스페이스에서 폴더를 만들면 그와 매핑되도록 서버에서 알아서 폴더를 생성하지만

이게 배포가 되어 사용하게 되면 그게 자동으로 이루어지지 않는다.

그래서 파일을 업로드할 폴더가 실제로 존재하지 않을 수도 있게 된다.

그래서 그럴 경우를 대비해 디렉토리가 없을 경우 폴더를 만들어 주는 로직도 포함시켜야 한다.


File객체를 이용하는 것인데, 우리가 얻은 realPath의 File객체를 만든다

File dirPath = new File(realPath);

if(!dirPath.exists()) dirPath.mkdirs();

그리고 위의 한 줄만 넣어 주면 된다.

dirPath.exists()는 realPath로 넣어준 경로에 해당하는 디렉토리가 실제 존재하는 지를 확인한다.

있다면 true 없다면 false를 반환한다. 우리는 없는 경우에 대한 로직이므로 !를 추가했다.

그리고 없을 때에는 디렉토리를 만들라는 dirPath.mkdirs()를 수행시킨다.

이 때 메소드에는 dirPath.mkdirs()와 dirPath.mkdir()가 있는데 

dirPath.mkdirs()는 만약에 만들려는 디렉토리의 상위 디렉토리마저 없다면 전부 만들어 주는 것이고

dirPath.mkdir()는 path의 마지막에 해당하는 디렉토리만 생성한다.

예시로 realPath가 "/test1/test2"라고 하면 dirPath.mkdirs()는 둘 다 없을경우 test1과 test2모두 만들고

dirPath.mkdir()는 test2만 만든다.




3. 여러 파일을 구분하여 저장

업로드되는 파일이 여러 가지일 때 데이터베이스에 파일을 구분해서 담아야 할 것이다.

그냥 담으면 test.pngtest.txt 이런식으로 붙어서 들어가기 때문에 문제가 생긴다.

그래서 들어온 파일의 이름들을 구분해줄 특수문자를 사용하는 것이 좋은데

일반적으로는 ','를 많이 사용할 것이다.

그리고 이 특수문자는 프론트 단에서도 <c:forTokens var="" items="" delims=",">를 통해서

특수문자 단위로 문자열을 잘라 따로 구분하여 출력되도록 만든다.


그럼 데이터베이스에 들어갈 파일 이름들의 문자열을 만들어야 하는데 

쉽게 그냥 Part객체로부터 getName() 메소드를 사용해서 이름과 특수문자를 계속 붙여 만들면 된다.

근데 문제는 마지막에 들어가는 특수문자는 빼야 한다.

이 때 사용할 수 있는 방법이야 여러 가지가 있지만 마지막에 ','를 자르는 게 가장 쉽지 않을까 싶다.





4. 파일 이름이 동일할 경우

말 그대로 업로드하는 파일이 이미 디렉토리 상에 같은 이름이 존재할 때이다.

이건 나중에 배우도록 하자



